"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([["65609"],{44390:function(e,t,n){n.r(t),n.d(t,{metadata:()=>i,contentTitle:()=>o,default:()=>h,assets:()=>d,toc:()=>l,frontMatter:()=>r});var i=JSON.parse('{"id":"api/dataclassManipulation","title":"Data Manipulation","description":"Data Querying","source":"@site/versioned_docs/version-1.0.0/api/dataManipulation.md","sourceDirName":"api","slug":"/api/dataclassManipulation","permalink":"/docs/1.0.0/api/dataclassManipulation","draft":false,"unlisted":false,"editUrl":"https://github.com/qodly/docs/issues/new?title=Comment%20on%20api%2FdataManipulation.md%20(1.0.0)&body=Share%20any%20feedback%20about%20this%20page%20%E2%80%94%20report%20issues%2C%20suggest%20improvements%2C%20or%20tell%20us%20what%E2%80%99s%20helpful.%0A%0AIf%20it%E2%80%99s%20an%20issue%3A%0A-%20What%E2%80%99s%20the%20issue%3F%20(e.g.%2C%20typo%2C%20incorrect%20information%2C%20unclear%20explanation)%0A-%20Where%20is%20it%3F%20(e.g.%2C%20section%20name%2C%20specific%20paragraph%2C%20or%20line)%0A%0AThank%20you%20for%20helping%20us%20improve!%20%F0%9F%9A%80%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20","tags":[],"version":"1.0.0","frontMatter":{"id":"dataclassManipulation","title":"Data Manipulation"},"sidebar":"Integrations","previous":{"title":"Endpoints and Data Access","permalink":"/docs/1.0.0/api/dataclassEndpoints"},"next":{"title":"$asArray","permalink":"/docs/1.0.0/api/$asArray"}}'),a=n("85893"),s=n("50065");n("47354");let r={id:"dataclassManipulation",title:"Data Manipulation"},o=void 0,d={},l=[{value:"Data Querying",id:"data-querying",level:2},{value:"Simple Queries",id:"simple-queries",level:3},{value:"Sorting Data",id:"sorting-data",level:3},{value:"Pagination in Data Queries",id:"pagination-in-data-queries",level:3},{value:"Entity Manipulation",id:"entity-manipulation",level:2},{value:"Creating and Updating Entities",id:"creating-and-updating-entities",level:3},{value:"Deleting Entities",id:"deleting-entities",level:3},{value:"Managing Entity Sets",id:"managing-entity-sets",level:2},{value:"Entity Set Creation",id:"entity-set-creation",level:3},{value:"Accessing an Entity Set",id:"accessing-an-entity-set",level:3},{value:"Modifying and Maintaining Entity Sets",id:"modifying-and-maintaining-entity-sets",level:3},{value:"Entity Set Expiry and Renewal",id:"entity-set-expiry-and-renewal",level:3},{value:"Deleting Entity Sets",id:"deleting-entity-sets",level:3},{value:"Combining Entity Sets",id:"combining-entity-sets",level:3},{value:"Data Aggregation",id:"data-aggregation",level:2},{value:"Image and BLOB Handling",id:"image-and-blob-handling",level:2},{value:"Viewing Images",id:"viewing-images",level:3},{value:"Storing BLOBs",id:"storing-blobs",level:3}];function c(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"data-querying",children:"Data Querying"}),"\n",(0,a.jsx)(t.h3,{id:"simple-queries",children:"Simple Queries"}),"\n",(0,a.jsxs)(t.p,{children:["Queries can be executed using the ",(0,a.jsx)(t.a,{href:"./$filter",children:(0,a.jsx)(t.code,{children:"$filter"})})," query parameter to specify conditions. For example, to retrieve persons by last name:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'GET {{ApiEndpoint}}/rest/Person/?$filter="lastName=Smith"\n'})}),"\n",(0,a.jsx)(t.h3,{id:"sorting-data",children:"Sorting Data"}),"\n",(0,a.jsxs)(t.p,{children:["Data can be ordered using the ",(0,a.jsx)(t.a,{href:"./$orderby",children:(0,a.jsx)(t.code,{children:"$orderby"})})," parameter, which allows sorting by one or multiple attributes, and can also handle attributes of related entities:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'GET {{ApiEndpoint}}/rest/Employee/?$orderby="lastName asc, department.name desc"\n'})}),"\n",(0,a.jsx)(t.h3,{id:"pagination-in-data-queries",children:"Pagination in Data Queries"}),"\n",(0,a.jsxs)(t.p,{children:["Pagination is managed through ",(0,a.jsx)(t.a,{href:"./$skip",children:(0,a.jsx)(t.code,{children:"$skip"})})," and ",(0,a.jsxs)(t.a,{href:"./$top$limit",children:[(0,a.jsx)(t.code,{children:"$top"})," (or $limit)"]})," parameters to control the starting point and the number of records returned:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Employee/?$top=10&$skip=20\n"})}),"\n",(0,a.jsx)(t.h2,{id:"entity-manipulation",children:"Entity Manipulation"}),"\n",(0,a.jsx)(t.h3,{id:"creating-and-updating-entities",children:"Creating and Updating Entities"}),"\n",(0,a.jsxs)(t.p,{children:["Entities can be added or modified using the POST or PUT methods with ",(0,a.jsx)(t.a,{href:"./$method#methodupdate",children:(0,a.jsx)(t.code,{children:"$method=update"})}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"POST {{ApiEndpoint}}/rest/Employee?$method=update\n"})}),"\n",(0,a.jsx)(t.h3,{id:"deleting-entities",children:"Deleting Entities"}),"\n",(0,a.jsxs)(t.p,{children:["Entities can be removed by using the ",(0,a.jsx)(t.code,{children:"DELETE"})," method:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"DELETE {{ApiEndpoint}}/rest/Employee[123]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Or the ",(0,a.jsx)(t.a,{href:"./$method#methoddelete",children:(0,a.jsx)(t.code,{children:"$method=delete"})})," in a GET request:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Employee[123]?$method=delete\n"})}),"\n",(0,a.jsx)(t.h2,{id:"managing-entity-sets",children:"Managing Entity Sets"}),"\n",(0,a.jsx)(t.p,{children:"Entity sets or selections are collections of entities accessed through REST and cached in the server. This approach enhances performance by avoiding repeated queries for the same data."}),"\n",(0,a.jsx)(t.h3,{id:"entity-set-creation",children:"Entity Set Creation"}),"\n",(0,a.jsxs)(t.p,{children:["Entity sets, which are cached selections of entities, are created with the ",(0,a.jsx)(t.a,{href:"./$method#methodentityset",children:(0,a.jsx)(t.code,{children:"$method=entityset"})})," for enhanced performance and reduced data re-fetching:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Employee?$method=entityset\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["A new selection of entities is returned; however, you can also create a new entity set by calling ",(0,a.jsx)(t.a,{href:"./$method#methodentityset",children:"$method=entityset"})," at the end of the REST request."]})}),"\n",(0,a.jsx)(t.h3,{id:"accessing-an-entity-set",children:"Accessing an Entity Set"}),"\n",(0,a.jsx)(t.p,{children:"To retrieve a stored entity set:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Employee/$entityset/{{entitySetID}}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"modifying-and-maintaining-entity-sets",children:"Modifying and Maintaining Entity Sets"}),"\n",(0,a.jsx)(t.p,{children:"Modifications to entity attributes within a set are dynamically updated. If the modified attribute affects the original query result, the entity remains in the set unless removed or the query is rerun:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"PATCH {{ApiEndpoint}}/rest/Employee/$entityset/{{entitySetID}}[123]\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsx)(t.p,{children:"Updating attributes within an entity set affects only the stored data and does not alter the original query criteria. An entity will remain part of the set unless it is explicitly removed or the set is re-queried, even if changes to its attributes mean it no longer matches the initial query criteria. Deletions are immediately reflected, removing the entity from the set permanently."})}),"\n",(0,a.jsx)(t.h3,{id:"entity-set-expiry-and-renewal",children:"Entity Set Expiry and Renewal"}),"\n",(0,a.jsxs)(t.p,{children:["Entity sets have a default expiration of two hours, adjustable with ",(0,a.jsx)(t.a,{href:"./$timeout",children:(0,a.jsx)(t.code,{children:"$timeout"})}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Employee/$entityset/{{entitySetID}}?$timeout=7200\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["Each time an entity set is accessed, its expiration timer is reset to the specified timeout value, whether it's the default setting or a custom duration defined by ",(0,a.jsx)(t.a,{href:"./$timeout",children:(0,a.jsx)(t.code,{children:"$timeout"})}),"."]})}),"\n",(0,a.jsx)(t.h3,{id:"deleting-entity-sets",children:"Deleting Entity Sets"}),"\n",(0,a.jsxs)(t.p,{children:["An entity set could be removed from cache with ",(0,a.jsx)(t.a,{href:"./$method#methodrelease",children:(0,a.jsx)(t.code,{children:"$method=release"})}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Employee/$entityset/{{entitySetID}}?$method=release\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsx)(t.p,{children:"If an entity set is accessed after it has been removed or expired, it will be automatically recreated with a new default expiration of 10 minutes. This process refreshes the set, potentially updating its contents based on the latest data available."})}),"\n",(0,a.jsx)(t.h3,{id:"combining-entity-sets",children:"Combining Entity Sets"}),"\n",(0,a.jsx)(t.p,{children:"You can merge two previously created entity sets using logical operators. This functionality allows for the combination, intersection, or differentiation of entity sets based on specified conditions:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-plaintext",children:"GET {{ApiEndpoint}}/rest/Employee/$entityset/{{entitySetID1}}?$logicOperator...&$otherCollection={{entitySetID2}}\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsx)(t.p,{children:"This operation enables you to manipulate the resulting dataset by merging both sets, extracting common elements, or identifying unique records in either set."})}),"\n",(0,a.jsx)(t.h2,{id:"data-aggregation",children:"Data Aggregation"}),"\n",(0,a.jsxs)(t.p,{children:["Use ",(0,a.jsx)(t.a,{href:"./$compute",children:(0,a.jsx)(t.code,{children:"$compute"})})," to perform aggregate functions like average, count, min, max, or sum on a specific attribute. The syntax is straightforward, for example:"]}),"\n",(0,a.jsxs)(t.p,{children:["Aggregative computations (average, count, min, max, sum) can be executed on specific attributes using ",(0,a.jsx)(t.a,{href:"./$compute",children:(0,a.jsx)(t.code,{children:"$compute"})}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Employee/salary?$compute=max\n"})}),"\n",(0,a.jsx)(t.p,{children:"To fetch all aggregate values in one request:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Employee/salary?$compute=$all\n"})}),"\n",(0,a.jsx)(t.h2,{id:"image-and-blob-handling",children:"Image and BLOB Handling"}),"\n",(0,a.jsx)(t.h3,{id:"viewing-images",children:"Viewing Images"}),"\n",(0,a.jsx)(t.p,{children:"To access images at their best resolution, incorporating format and version control:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Employee(1)/photo?$imageformat=best&$version=1&$expand=photo\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["For detailed information on image formats, see the ",(0,a.jsx)(t.a,{href:"./$imageformat",children:"$imageformat"})," section. For details on the version parameter, please refer to ",(0,a.jsx)(t.a,{href:"./$version",children:"$version"}),"."]})}),"\n",(0,a.jsx)(t.h3,{id:"storing-blobs",children:"Storing BLOBs"}),"\n",(0,a.jsx)(t.p,{children:"For saving BLOB data to disk while ensuring the data is transferred in binary format:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"GET {{ApiEndpoint}}/rest/Company(11)/blobAtt?$binary=true&$expand=blobAtt\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["For additional details on image formats, please consult the sections on ",(0,a.jsx)(t.a,{href:"./$binary",children:(0,a.jsx)(t.code,{children:"$binary=true"})})," and ",(0,a.jsx)(t.a,{href:"./$expand",children:(0,a.jsx)(t.code,{children:"$expand"})}),"."]})})]})}function h(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},47354:function(e,t,n){n.d(t,{ZP:function(){return o}});var i=n(85893),a=n(67294),s=n(67026);let r=e=>{let t="undefined"!=typeof window&&window.matchMedia(e),[n,i]=(0,a.useState)(t.matches);return(0,a.useEffect)(()=>(t.onchange=e=>i(e.matches),()=>t.onchange=null)),n},o={List:function(e){let{children:t,align:n="start",justifyContent:a="start"}=e;return(0,i.jsx)("div",{className:(0,s.Z)("flex flex-col lg:flex-row flex-wrap",{"items-start":"start"===n,"items-center":"center"===n,"items-end":"end"===n},{"justify-start":"start"===a,"justify-center":"center"===a,"justify-end":"end"===a,"justify-between":"between"===a,"justify-around":"around"===a,"justify-evenly":"evenly"===a}),children:t})},Item:function(e){let{children:t,width:n}=e,a=r("(max-width: 1024px)");return(0,i.jsx)("div",{className:(0,s.Z)({"flex-1":!n}),style:a?{}:{width:n},children:t})}}},50065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return r}});var i=n(67294);let a={},s=i.createContext(a);function r(e){let t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);