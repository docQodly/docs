"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[2777],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),i=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=i(a),u=o,h=m["".concat(c,".").concat(u)]||m[u]||p[u]||r;return a?n.createElement(h,l(l({ref:t},d),{},{components:a})):n.createElement(h,l({ref:t},d))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:o,l[1]=s;for(var i=2;i<r;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3065:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var n=a(7462),o=(a(7294),a(3905));const r={id:"lang-methods",title:"Methods"},l=void 0,s={unversionedId:"concepts/lang-methods",id:"concepts/lang-methods",title:"Methods",description:"A method is basically a piece of code that executes one or several action(s). Qodly provides a large number of built-in methods (i.e. commands) but also lets you create your own user methods. In this section, we describe user methods.",source:"@site/docs/concepts/lang-methods.md",sourceDirName:"concepts",slug:"/concepts/lang-methods",permalink:"/docs/concepts/lang-methods",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/concepts/lang-methods.md",tags:[],version:"current",frontMatter:{id:"lang-methods",title:"Methods"},sidebar:"QodlyScript",previous:{title:"Operators",permalink:"/docs/concepts/lang-operators"},next:{title:"Parameters",permalink:"/docs/concepts/lang-parameters"}},c={},i=[{value:"Defining and Calling Methods",id:"defining-and-calling-methods",level:2},{value:"Methods as Object Formulas",id:"methods-as-object-formulas",level:2},{value:"Recursive Methods",id:"recursive-methods",level:2},{value:"Process Methods",id:"process-methods",level:2}],d={toc:i};function m(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A method is basically a piece of code that executes one or several action(s). Qodly provides a large number of built-in methods (i.e. ",(0,o.kt)("strong",{parentName:"p"},"commands"),") but also lets you create your own user methods. In this section, we describe user methods."),(0,o.kt)("h2",{id:"defining-and-calling-methods"},"Defining and Calling Methods"),(0,o.kt)("p",null,"A method can contain any code to execute any custom actions. "),(0,o.kt)("p",null,"You give a method a name that identifies what it does, and this name is used to call the method wherever it is needed. "),(0,o.kt)("p",null,"A user method is composed of statements. A statement performs an action, and may be simple or complex. Each statement usually consists of one line in the method (if necessary, it can however be ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/lang-quicktour#code-on-several-lines"},"split using the ",(0,o.kt)("inlineCode",{parentName:"a"},"\\")," character"),"). "),(0,o.kt)("p",null,"The maximum size of a method is limited to 2 GB of text or 32,000 lines of code.  "),(0,o.kt)("p",null,"Once a method is created, it becomes part of the language of the project. "),(0,o.kt)("p",null,"A method is executed when its name is called, with or without ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/lang-parameters"},"parameters"),", by another code. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},'//methodA\n//methodA calls methodB with one parameter\nvar t : Text\nt=methodB("world") //t == "hello world"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},'//methodB\n#DECLARE (param : Text)\nreturn ("hello " + param)\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Qodly Studio allows executing methods from the Explorer to test them.")),(0,o.kt)("h2",{id:"methods-as-object-formulas"},"Methods as Object Formulas"),(0,o.kt)("p",null,"You can encapsulate your methods in ",(0,o.kt)("strong",{parentName:"p"},"formula")," objects and call them from your objects."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Formula")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Formula from string")," commands allow you to create formula objects that you can encapsulate in object properties. It allows you to implement custom object methods."),(0,o.kt)("p",null,"To execute a method stored in an object property, use the ",(0,o.kt)("strong",{parentName:"p"},"()")," operator after the property name. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},"//three_days_later\nreturn (Current date+3)\n")),(0,o.kt)("p",null,"Then ",(0,o.kt)("inlineCode",{parentName:"p"},"three_days_later")," can be encapsulated in any object and called:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},'var o : Object\no=New object("threeDays";Formula(three_days_later))\no.threeDays() //returns the date in three days\n')),(0,o.kt)("p",null,"Syntax with brackets is also supported:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},'o["threeDays"]() //returns the date in three days\n')),(0,o.kt)("p",null,"You can also ",(0,o.kt)("a",{parentName:"p",href:"parameters.md"},"pass parameters")," to your formula when you call it by using special variables ",(0,o.kt)("inlineCode",{parentName:"p"},"$1"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"$2"),"\u2026 ",(0,o.kt)("inlineCode",{parentName:"p"},"$N"),". They will be received in their sequence order in the formula code. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"$0")," in the formula code to return a value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},'//fullName method\nvar $0,$1,$2 : Text\n$0=$1+" "+$2\n')),(0,o.kt)("p",null,"Encapsulate ",(0,o.kt)("inlineCode",{parentName:"p"},"fullName")," in an object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},'var o : Object\no=New object("full_name",Formula(fullName))\nresult=o.full_name("John";"Smith") \n//result = "John Smith"\n//equivalent to result=fullName("param1";"param2")\n')),(0,o.kt)("p",null,"Combined with the ",(0,o.kt)("inlineCode",{parentName:"p"},"This"),"function, such object methods allow writing powerful generic code. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},'//fullName2 method\nvar $0 : Text\n$0=This.firstName+" "+This.lastName\n')),(0,o.kt)("p",null,"Then the method acts like a new, calculated attribute that can be added to other attributes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},'var o : Object\no=New object("firstName","Jim","lastName","Wesson")\no.fullName=Formula(fullName2) //add the method  \n\nresult=o.fullName() \n//result = "Jim Wesson"\n')),(0,o.kt)("p",null,"Note that, even if it does not have parameters, an object method to be executed must be called with ",(0,o.kt)("inlineCode",{parentName:"p"},"()")," parenthesis. Calling only the object property will return a new reference to the formula (and will not execute it):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-4d"},"o=f.message //returns the formula object in o\n")),(0,o.kt)("h2",{id:"recursive-methods"},"Recursive Methods"),(0,o.kt)("p",null,"Methods can call themselves. For example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The method A may call the method B which may call A, so A will call B again and so on."),(0,o.kt)("li",{parentName:"ul"},"A method can call itself.")),(0,o.kt)("p",null,"This is called recursion. The Qodly language fully supports recursion."),(0,o.kt)("p",null,"Process Methods\nA process method is a project method that is called when a process is started. The process lasts only as long as the process method continues to execute, except if it is a Worker process. Note that a menu method attached to a menu command with Start a New Process property is also the process method for the newly started process."),(0,o.kt)("h2",{id:"process-methods"},"Process Methods"),(0,o.kt)("p",null,"A process method is a method that is called when a process is started with the ",(0,o.kt)("inlineCode",{parentName:"p"},"New process")," command for example. The process lasts only as long as the process method continues to execute, except if it is a Worker process."))}m.isMDXComponent=!0}}]);