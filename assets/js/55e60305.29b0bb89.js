"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[1349],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,c=d["".concat(p,".").concat(u)]||d[u]||k[u]||l;return n?a.createElement(c,i(i({ref:t},m),{},{components:n})):a.createElement(c,i({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},64557:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const l={id:"SystemWorkerClass",title:"SystemWorker"},i=void 0,o={unversionedId:"language/SystemWorkerClass",id:"language/SystemWorkerClass",title:"SystemWorker",description:"System workers allow the QodlyScript code to call any external process on the server machine. System workers are called asynchronously. By using callbacks, Qodly makes it possible to communicate both ways.",source:"@site/docs/language/SystemWorkerClass.md",sourceDirName:"language",slug:"/language/SystemWorkerClass",permalink:"/docs/language/SystemWorkerClass",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/language/SystemWorkerClass.md",tags:[],version:"current",frontMatter:{id:"SystemWorkerClass",title:"SystemWorker"},sidebar:"Programming",previous:{title:"String",permalink:"/docs/language/string"},next:{title:"Users",permalink:"/docs/language/UsersClass"}},p={},s=[{value:"Summary",id:"summary",level:3},{value:"4D.SystemWorker.new()",id:"4dsystemworkernew",level:2},{value:"Description",id:"description",level:4},{value:"<em>options</em> Object",id:"options-object",level:4},{value:"Returned value",id:"returned-value",level:4},{value:".closeInput()",id:"closeinput",level:2},{value:"Description",id:"description-1",level:4},{value:".commandLine",id:"commandline",level:2},{value:"Description",id:"description-2",level:4},{value:".currentDirectory",id:"currentdirectory",level:2},{value:"Description",id:"description-3",level:4},{value:".dataType",id:"datatype",level:2},{value:"Description",id:"description-4",level:4},{value:".encoding",id:"encoding",level:2},{value:"Description",id:"description-5",level:4},{value:".errors",id:"errors",level:2},{value:"Description",id:"description-6",level:4},{value:".exitCode",id:"exitcode",level:2},{value:"Description",id:"description-7",level:4},{value:".pid",id:"pid",level:2},{value:"Description",id:"description-8",level:4},{value:".postMessage()",id:"postmessage",level:2},{value:"Description",id:"description-9",level:4},{value:".response",id:"response",level:2},{value:"Description",id:"description-10",level:4},{value:".responseError",id:"responseerror",level:2},{value:"Description",id:"description-11",level:4},{value:".terminate()",id:"terminate",level:2},{value:"Description",id:"description-12",level:4},{value:".terminated",id:"terminated",level:2},{value:"Description",id:"description-13",level:4},{value:".timeout",id:"timeout",level:2},{value:"Description",id:"description-14",level:4},{value:".wait()",id:"wait",level:2},{value:"Description",id:"description-15",level:4}],m={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"System workers allow the QodlyScript code to call any external process on the server machine. System workers are called asynchronously. By using callbacks, Qodly makes it possible to communicate both ways."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemWorker")," class is available from the ",(0,r.kt)("inlineCode",{parentName:"p"},"4D")," class store."),(0,r.kt)("h3",{id:"summary"},"Summary"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#4d-systemworker-new"},(0,r.kt)("strong",{parentName:"a"},"4D.SystemWorker.new")," ( ",(0,r.kt)("em",{parentName:"a"},"commandLine")," : Text { ; ",(0,r.kt)("em",{parentName:"a"},"options")," : Object } ) : 4D.SystemWorker"),"\xa0","\xa0","\xa0","\xa0","creates and returns a ",(0,r.kt)("inlineCode",{parentName:"td"},"4D.SystemWorker")," object that will execute the ",(0,r.kt)("em",{parentName:"td"},"commandLine")," you passed as parameter to launch an external process")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#closeinput"},(0,r.kt)("strong",{parentName:"a"},".closeInput"),"()"),"\xa0","\xa0","\xa0","\xa0","closes the input stream (",(0,r.kt)("em",{parentName:"td"},"stdin"),") of the external process")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#commandline"},(0,r.kt)("strong",{parentName:"a"},".commandLine")," : string"),"\xa0","\xa0","\xa0","\xa0","contains the command line passed as parameter to the ",(0,r.kt)("a",{parentName:"td",href:"#4d-systemworker-new"},(0,r.kt)("inlineCode",{parentName:"a"},"new()"))," function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#currentdirectory"},(0,r.kt)("strong",{parentName:"a"},".currentDirectory")," : 4D.Folder"),"\xa0","\xa0","\xa0","\xa0","contains the working directory in which the external process is executed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#dataype"},(0,r.kt)("strong",{parentName:"a"},".dataType")," : string"),"\xa0","\xa0","\xa0","\xa0","contains the type of the response body content")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#encoding"},(0,r.kt)("strong",{parentName:"a"},".encoding")," : string"),"\xa0","\xa0","\xa0","\xa0","contains the encoding of the response body content")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#errors"},(0,r.kt)("strong",{parentName:"a"},".errors")," : collection"),"\xa0","\xa0","\xa0","\xa0","contains a collection of errors in case of execution error(s) if any")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#exitcode"},(0,r.kt)("strong",{parentName:"a"},".exitCode")," : integer"),"\xa0","\xa0","\xa0","\xa0","contains the exit code returned by the external process")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#pid"},(0,r.kt)("strong",{parentName:"a"},".pid")," : integer"),"\xa0","\xa0","\xa0","\xa0","contains the process unique identifier of the external process at the system level")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#postmessage"},(0,r.kt)("strong",{parentName:"a"},".postMessage"),"( ",(0,r.kt)("em",{parentName:"a"},"message")," : string )",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},".postMessage"),"( ",(0,r.kt)("em",{parentName:"a"},"messageBLOB")," : blob )"),"\xa0","\xa0","\xa0","\xa0","allows you to write on the input stream (stdin) of the external process")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#response"},(0,r.kt)("strong",{parentName:"a"},".response")," : string",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},".response")," : blob"),"\xa0","\xa0","\xa0","\xa0","contains the concatenation of all data returned once the request is terminated")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#responseerror"},(0,r.kt)("strong",{parentName:"a"},".responseError")," : string"),"\xa0","\xa0","\xa0","\xa0","contains the concatenation of all the errors returned, once the request is terminated")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#terminate"},(0,r.kt)("strong",{parentName:"a"},".terminate"),"()"),"\xa0","\xa0","\xa0","\xa0","forces the ",(0,r.kt)("inlineCode",{parentName:"td"},"SystemWorker")," to terminate its execution")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#terminated"},(0,r.kt)("strong",{parentName:"a"},".terminated")," : boolean"),"\xa0","\xa0","\xa0","\xa0","contains ",(0,r.kt)("strong",{parentName:"td"},"true")," if the external process is terminated")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#timeout"},(0,r.kt)("strong",{parentName:"a"},".timeout")," : integer"),"\xa0","\xa0","\xa0","\xa0","contains the duration in seconds before the external process will be killed if it is still alive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#wait"},(0,r.kt)("strong",{parentName:"a"},".wait"),"( {",(0,r.kt)("em",{parentName:"a"},"timeout")," : number} ) : 4D.SystemWorker"),"\xa0","\xa0","\xa0","\xa0","waits until the end of the ",(0,r.kt)("inlineCode",{parentName:"td"},"SystemWorker")," execution or the specified ",(0,r.kt)("em",{parentName:"td"},"timeout"))))),(0,r.kt)("h2",{id:"4dsystemworkernew"},"4D.SystemWorker.new()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"4D.SystemWorker.new")," ( ",(0,r.kt)("em",{parentName:"p"},"commandLine")," : Text { ; ",(0,r.kt)("em",{parentName:"p"},"options")," : Object } ) : 4D.SystemWorker"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"commandLine"),(0,r.kt)("td",{parentName:"tr",align:null},"Text"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Command line to execute")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Worker parameters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"result"),(0,r.kt)("td",{parentName:"tr",align:null},"4D.SystemWorker"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"New asynchronous System worker or null if process not started")))),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"4D.SystemWorker.new()")," function creates and returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"4D.SystemWorker")," object that will execute the ",(0,r.kt)("em",{parentName:"p"},"commandLine")," you passed as parameter to launch an external process."),(0,r.kt)("p",null,"The returned system worker object can be used to post messages to the worker and get the worker output."),(0,r.kt)("p",null,"If an error occurs during the creation of the proxy object, the function returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," object and an error is thrown."),(0,r.kt)("p",null,"In the ",(0,r.kt)("em",{parentName:"p"},"commandLine")," parameter, pass the full path of the application's file to be executed (posix syntax), as well as any required arguments, if necessary. If you pass only the application name, 4D will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"PATH")," environment variable to locate the executable."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Warning:")," This function can only launch executable applications; it cannot execute instructions that are part of the shell (command interpreter). "),(0,r.kt)("h4",{id:"options-object"},(0,r.kt)("em",{parentName:"h4"},"options")," Object"),(0,r.kt)("p",null,"In the ",(0,r.kt)("em",{parentName:"p"},"options")," parameter, pass an object that can contain the following properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onResponse"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/language/FunctionClass"},(0,r.kt)("inlineCode",{parentName:"a"},"formula"))),(0,r.kt)("td",{parentName:"tr",align:null},"undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback for system worker messages. This callback is called once the complete response is received. It receives two objects as parameters (see below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onData"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/language/FunctionClass"},(0,r.kt)("inlineCode",{parentName:"a"},"formula"))),(0,r.kt)("td",{parentName:"tr",align:null},"undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback for system worker data. This callback is called each time the system worker receives data. It receives two objects as parameters (see below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDataError"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/language/FunctionClass"},(0,r.kt)("inlineCode",{parentName:"a"},"formula"))),(0,r.kt)("td",{parentName:"tr",align:null},"undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback for the external process errors (",(0,r.kt)("em",{parentName:"td"},"stderr")," of the external process). It receives two objects as parameters (see below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onError"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/language/FunctionClass"},(0,r.kt)("inlineCode",{parentName:"a"},"formula"))),(0,r.kt)("td",{parentName:"tr",align:null},"undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback for execution errors, returned by the system worker in case of unusual runtime conditions (system errors). It receives two objects as parameters (see below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onTerminate"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/language/FunctionClass"},(0,r.kt)("inlineCode",{parentName:"a"},"formula"))),(0,r.kt)("td",{parentName:"tr",align:null},"undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback when the external process is terminated. It receives two objects as parameters (see below)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timeout"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"Time in seconds before the process is killed if it is still alive")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dataType"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'"text"'),(0,r.kt)("td",{parentName:"tr",align:null},'Type of the response body content. Possible values: "text" (default), "blob".')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"encoding"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'"UTF-8"'),(0,r.kt)("td",{parentName:"tr",align:null},"Only if ",(0,r.kt)("inlineCode",{parentName:"td"},'dataType="text"'),". Encoding of the response body content. For the list of available values, see the ",(0,r.kt)("a",{parentName:"td",href:"/docs/language/string#convertfromstring"},(0,r.kt)("inlineCode",{parentName:"a"},"convertFromString"))," command")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"variables"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Sets custom environment variables for the system worker. Syntax: ",(0,r.kt)("inlineCode",{parentName:"td"},"variables.key=value"),", where ",(0,r.kt)("inlineCode",{parentName:"td"},"key")," is the variable name and ",(0,r.kt)("inlineCode",{parentName:"td"},"value")," its value. Values are converted into strings when possible. The value cannot contain a '='. If not defined, the system worker inherits from the Qodly environment.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"currentDirectory"),(0,r.kt)("td",{parentName:"tr",align:null},"folder"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Working directory in which the process is executed")))),(0,r.kt)("p",null,"All callback functions receive two object parameters. Their contents depend on the callback:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"onResponse")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"onData")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"onDataError")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"onError")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"onTerminate")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"$param1"),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"SystemWorker"),(0,r.kt)("td",{parentName:"tr",align:null},"SystemWorker"),(0,r.kt)("td",{parentName:"tr",align:null},"SystemWorker"),(0,r.kt)("td",{parentName:"tr",align:null},"SystemWorker"),(0,r.kt)("td",{parentName:"tr",align:null},"SystemWorker")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"$param2.type"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},'"response"'),(0,r.kt)("td",{parentName:"tr",align:null},'"data"'),(0,r.kt)("td",{parentName:"tr",align:null},'"error"'),(0,r.kt)("td",{parentName:"tr",align:null},'"error"'),(0,r.kt)("td",{parentName:"tr",align:null},'"termination"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"$param2.data"),(0,r.kt)("td",{parentName:"tr",align:null},"string or blob"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"received data"),(0,r.kt)("td",{parentName:"tr",align:null},"error data"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,"Here is the sequence of callback calls:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"onData")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"onDataError")," are executed one or several times"),(0,r.kt)("li",{parentName:"ol"},"if called, ",(0,r.kt)("inlineCode",{parentName:"li"},"onError")," is executed once (stops the system worker processing)"),(0,r.kt)("li",{parentName:"ol"},"if no error occured, ",(0,r.kt)("inlineCode",{parentName:"li"},"onResponse")," is executed once"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"onTerminate")," is always executed")),(0,r.kt)("h4",{id:"returned-value"},"Returned value"),(0,r.kt)("p",null,"The function returns a system worker object on which you can call functions and properties of the SystemWorker class."),(0,r.kt)("h2",{id:"closeinput"},".closeInput()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".closeInput"),"()"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:null},"Does not require any parameters")))),(0,r.kt)("h4",{id:"description-1"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".closeInput()")," function closes the input stream (",(0,r.kt)("em",{parentName:"p"},"stdin"),") of the external process."),(0,r.kt)("p",null,"When the executable waits for all data to be received through ",(0,r.kt)("inlineCode",{parentName:"p"},"postMessage()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".closeInput()")," is useful to indicate to the executable that data sending is finished and that it can proceed."),(0,r.kt)("h2",{id:"commandline"},".commandLine"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".commandLine")," : string"),(0,r.kt)("h4",{id:"description-2"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".commandLine")," property contains the command line passed as parameter to the ",(0,r.kt)("a",{parentName:"p",href:"#4d-systemworker-new"},(0,r.kt)("inlineCode",{parentName:"a"},"new()"))," function."),(0,r.kt)("p",null,"This property is ",(0,r.kt)("strong",{parentName:"p"},"read-only"),"."),(0,r.kt)("h2",{id:"currentdirectory"},".currentDirectory"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".currentDirectory")," : 4D.Folder"),(0,r.kt)("h4",{id:"description-3"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".currentDirectory")," property contains the working directory in which the external process is executed."),(0,r.kt)("h2",{id:"datatype"},".dataType"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".dataType")," : string"),(0,r.kt)("h4",{id:"description-4"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".dataType"),' property contains the type of the response body content. Possible values : "text" or "blob".'),(0,r.kt)("p",null,"This property is ",(0,r.kt)("strong",{parentName:"p"},"read-only"),"."),(0,r.kt)("h2",{id:"encoding"},".encoding"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".encoding")," : string"),(0,r.kt)("h4",{id:"description-5"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".encoding")," property contains the encoding of the response body content. This property is only available if the ",(0,r.kt)("a",{parentName:"p",href:"#datatype"},(0,r.kt)("inlineCode",{parentName:"a"},"dataType")),' is "text".'),(0,r.kt)("p",null,"This property is ",(0,r.kt)("strong",{parentName:"p"},"read-only"),"."),(0,r.kt)("h2",{id:"errors"},".errors"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".errors")," : collection"),(0,r.kt)("h4",{id:"description-6"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".errors")," property contains a collection of errors in case of execution error(s) if any."),(0,r.kt)("p",null,"Each element of the collection is an object with the following properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[].errorCode"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"Qodly error code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[].message"),(0,r.kt)("td",{parentName:"tr",align:null},"text"),(0,r.kt)("td",{parentName:"tr",align:null},"Description of the Qodly error")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[ ]",".componentSignature"),(0,r.kt)("td",{parentName:"tr",align:null},"text"),(0,r.kt)("td",{parentName:"tr",align:null},"Signature of the internal component which returned the error")))),(0,r.kt)("p",null,"If no error occured, ",(0,r.kt)("inlineCode",{parentName:"p"},".errors")," is ",(0,r.kt)("em",{parentName:"p"},"undefined"),"."),(0,r.kt)("h2",{id:"exitcode"},".exitCode"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".exitCode")," : integer"),(0,r.kt)("h4",{id:"description-7"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".exitCode")," property contains the exit code returned by the external process. If the process did not terminate normaly, ",(0,r.kt)("inlineCode",{parentName:"p"},"exitCode")," is ",(0,r.kt)("em",{parentName:"p"},"undefined"),"."),(0,r.kt)("p",null,"This property is ",(0,r.kt)("strong",{parentName:"p"},"read-only"),"."),(0,r.kt)("h2",{id:"pid"},".pid"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".pid")," : integer"),(0,r.kt)("h4",{id:"description-8"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".pid")," property contains the process unique identifier of the external process at the system level."),(0,r.kt)("p",null,"This property is ",(0,r.kt)("strong",{parentName:"p"},"read-only"),"."),(0,r.kt)("h2",{id:"postmessage"},".postMessage()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".postMessage"),"( ",(0,r.kt)("em",{parentName:"p"},"message")," : string )",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},".postMessage"),"( ",(0,r.kt)("em",{parentName:"p"},"messageBLOB")," : blob )"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"message"),(0,r.kt)("td",{parentName:"tr",align:null},"Text"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Text to write on the input stream (stdin) of the external process")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"messageBLOB"),(0,r.kt)("td",{parentName:"tr",align:null},"Blob"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Bytes write on the input stream")))),(0,r.kt)("h4",{id:"description-9"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".postMessage()")," function allows you to write on the input stream (stdin) of the external process. In the ",(0,r.kt)("em",{parentName:"p"},"message")," parameter, pass the text to write in ",(0,r.kt)("em",{parentName:"p"},"stdin"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".postMessage()")," function also accepts a Blob type value in ",(0,r.kt)("em",{parentName:"p"},"messageBLOB")," to pass in ",(0,r.kt)("em",{parentName:"p"},"stdin"),", so that you can post binary data."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},".dataType")," property of the ",(0,r.kt)("a",{parentName:"p",href:"#options-object"},"options object")," to make response body return Blob values."),(0,r.kt)("h2",{id:"response"},".response"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".response")," : string",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},".response")," : blob"),(0,r.kt)("h4",{id:"description-10"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".response")," property contains the concatenation of all data returned once the request is terminated, i.e. the full message received from the process output."),(0,r.kt)("p",null,"The type of the message is defined according to the ",(0,r.kt)("a",{parentName:"p",href:"#datatype"},(0,r.kt)("inlineCode",{parentName:"a"},"dataType"))," attribute."),(0,r.kt)("p",null,"This property is ",(0,r.kt)("strong",{parentName:"p"},"read-only"),"."),(0,r.kt)("h2",{id:"responseerror"},".responseError"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".responseError")," : string"),(0,r.kt)("h4",{id:"description-11"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".responseError")," property contains the concatenation of all the errors returned, once the request is terminated."),(0,r.kt)("h2",{id:"terminate"},".terminate()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".terminate"),"()"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:null},"Does not require any parameters")))),(0,r.kt)("h4",{id:"description-12"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".terminate()")," function forces the ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemWorker")," to terminate its execution."),(0,r.kt)("p",null,"This function sends the instruction to terminate and give control back to the executing script."),(0,r.kt)("h2",{id:"terminated"},".terminated"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".terminated")," : boolean"),(0,r.kt)("h4",{id:"description-13"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".terminated")," property contains ",(0,r.kt)("strong",{parentName:"p"},"true")," if the external process is terminated."),(0,r.kt)("p",null,"This property is ",(0,r.kt)("strong",{parentName:"p"},"read-only"),"."),(0,r.kt)("h2",{id:"timeout"},".timeout"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".timeout")," : integer"),(0,r.kt)("h4",{id:"description-14"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".timeout")," property contains the duration in seconds before the external process will be killed if it is still alive."),(0,r.kt)("p",null,"This property is ",(0,r.kt)("strong",{parentName:"p"},"read-only"),"."),(0,r.kt)("h2",{id:"wait"},".wait()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},".wait"),"( {",(0,r.kt)("em",{parentName:"p"},"timeout")," : number} ) : 4D.SystemWorker"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"timeout"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Waiting time (in seconds)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"4D.SystemWorker"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"SystemWorker object")))),(0,r.kt)("h4",{id:"description-15"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".wait()")," function waits until the end of the ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemWorker")," execution or the specified ",(0,r.kt)("em",{parentName:"p"},"timeout"),"."),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"timeout"),", pass a value in seconds. The ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemWorker")," script will wait for the external process for the amount of time defined in the ",(0,r.kt)("em",{parentName:"p"},"timeout")," parameter. If you omit the ",(0,r.kt)("em",{parentName:"p"},"timeout")," parameter, the script execution will wait indefinitely."),(0,r.kt)("p",null,"Actually, ",(0,r.kt)("inlineCode",{parentName:"p"},".wait()")," waits until the end of processing of the ",(0,r.kt)("inlineCode",{parentName:"p"},"onTerminate")," formula, except if the ",(0,r.kt)("em",{parentName:"p"},"timeout")," is reached. If ",(0,r.kt)("em",{parentName:"p"},"timeout")," is reached, the ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemWorker")," is not killed."),(0,r.kt)("p",null,"During a ",(0,r.kt)("inlineCode",{parentName:"p"},".wait()")," execution, callback functions are executed, especially callbacks from other events or from other ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemWorker")," instances. You can exit from a ",(0,r.kt)("inlineCode",{parentName:"p"},".wait()")," by calling ",(0,r.kt)("a",{parentName:"p",href:"#terminate"},(0,r.kt)("inlineCode",{parentName:"a"},"terminate()"))," from a callback."),(0,r.kt)("p",null,"This function returns the SystemWorker object."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This function is not necessary if you created the ",(0,r.kt)("inlineCode",{parentName:"p"},"SystemWorker")," from a Qodly worker process.")))}d.isMDXComponent=!0}}]);