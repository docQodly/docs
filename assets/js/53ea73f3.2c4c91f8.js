"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[1265],{3905:(t,e,a)=>{a.d(e,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var m=n.createContext({}),d=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},p=function(t){var e=d(t.components);return n.createElement(m.Provider,{value:e},t.children)},s="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},N=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,m=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),s=d(a),N=r,h=s["".concat(m,".").concat(N)]||s[N]||k[N]||l;return a?n.createElement(h,i(i({ref:e},p),{},{components:a})):n.createElement(h,i({ref:e},p))}));function h(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=N;var o={};for(var m in e)hasOwnProperty.call(e,m)&&(o[m]=e[m]);o.originalType=t,o[s]="string"==typeof t?t:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}N.displayName="MDXCreateElement"},43654:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const l={id:"jsonValidate",title:"jsonValidate"},i=void 0,o={unversionedId:"language/commands/jsonValidate",id:"language/commands/jsonValidate",title:"jsonValidate",description:"jsonValidate ( vJson object) : object",source:"@site/docs/language/commands/jsonValidate.md",sourceDirName:"language/commands",slug:"/language/commands/jsonValidate",permalink:"/docs/language/commands/jsonValidate",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/language/commands/jsonValidate.md",tags:[],version:"current",frontMatter:{id:"jsonValidate",title:"jsonValidate"},sidebar:"Develop",previous:{title:"jsonStringify",permalink:"/docs/language/commands/jsonStringify"},next:{title:"killWorker",permalink:"/docs/language/commands/killWorker"}},m={},d=[{value:"Description",id:"description",level:4},{value:"Error management",id:"error-management",level:5},{value:"Example",id:"example",level:4},{value:"See also",id:"see-also",level:4}],p={toc:d};function s(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"jsonValidate")," ( ",(0,r.kt)("em",{parentName:"p"},"vJson")," : object , ",(0,r.kt)("em",{parentName:"p"},"vSchema")," : object) : object"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"vJson"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON object to validate")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"vSchema"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"JSON schema used to validate JSON objects")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Validation status and errors (if any)")))),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"jsonValidate")," command checks the compliance of the ",(0,r.kt)("em",{parentName:"p"},"vJson")," JSON contents with the rules defined in the ",(0,r.kt)("em",{parentName:"p"},"vSchema")," JSON schema. If the JSON is invalid, the command returns a detailed description of error(s)."),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"vJson"),", pass a JSON object containing the JSON contents to be validated."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Validating a JSON string consists of checking that it follows the rules defined in a JSON schema. This is different from checking that the JSON is well-formed, which is done by the ",(0,r.kt)("a",{parentName:"p",href:"/docs/language/commands/jsonParse"},(0,r.kt)("inlineCode",{parentName:"a"},"jsonParse"))," command.")),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"vSchema"),", pass the JSON schema to use for the validation. For more information on how to create a JSON schema, you may consult the ",(0,r.kt)("a",{parentName:"p",href:"http://json-schema.org/"},(0,r.kt)("inlineCode",{parentName:"a"},"json-schema.org"))," web site."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To validate a JSON object, Qodly uses the norm described in the ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/draft-wright-json-schema-validation-00"},(0,r.kt)("inlineCode",{parentName:"a"},"JSON Schema Validation"))," document (this draft is still being written and can evolve in the future). Qodly's current implementation is based upon the version 4 of the draft.")),(0,r.kt)("p",null,"If the JSON schema is not valid, Qodly returns a null object and throws an error that can be caught by an on error call method."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"jsonValidate")," returns an object that provides the status of the validation. This object can contain the following properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Property name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"success")),(0,r.kt)("td",{parentName:"tr",align:"left"},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"left"},"True if ",(0,r.kt)("em",{parentName:"td"},"vJson")," is validated, false otherwise. If false, the ",(0,r.kt)("em",{parentName:"td"},"errors")," property is also returned")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"errors")),(0,r.kt)("td",{parentName:"tr",align:"left"},"object collection"),(0,r.kt)("td",{parentName:"tr",align:"left"},"List of error objects if the ",(0,r.kt)("em",{parentName:"td"},"vJson")," is not validated (see below)")))),(0,r.kt)("p",null,"Each error object of the ",(0,r.kt)("em",{parentName:"p"},"errors")," collection contains the following properties:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Property name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"code")),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Error code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"jsonPath")),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"JSON path that cannot be validated in ",(0,r.kt)("em",{parentName:"td"},"vJson"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"line")),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Line number of the error in the JSON file. This property is filled if the JSON has been parsed by ",(0,r.kt)("a",{parentName:"td",href:"/docs/language/commands/jsonParse"},(0,r.kt)("inlineCode",{parentName:"a"},"jsonParse"))," with the * parameter. Otherwise, the property is omitted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Error message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"offset")),(0,r.kt)("td",{parentName:"tr",align:"left"},"number"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Line offset of the error in the JSON file. This property is filled if the JSON has been parsed by ",(0,r.kt)("a",{parentName:"td",href:"/docs/language/commands/jsonParse"},(0,r.kt)("inlineCode",{parentName:"a"},"jsonParse"))," with the * parameter. Otherwise, the property is omitted.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"schemaPaths")),(0,r.kt)("td",{parentName:"tr",align:"left"},"string"),(0,r.kt)("td",{parentName:"tr",align:"left"},"JSON path in the schema that causes the validation error")))),(0,r.kt)("h5",{id:"error-management"},"Error management"),(0,r.kt)("p",null,"The following errors may be returned  :"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Code"),(0,r.kt)("th",{parentName:"tr",align:"left"},"JSON Keyword"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Message"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2"),(0,r.kt)("td",{parentName:"tr",align:"left"},"multipleOf"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Error while validating against 'multipleOf' key.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"maximum"),(0,r.kt)("td",{parentName:"tr",align:"left"},'The value provided should not be greater than specified in the schema ("{s1}").')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"exclusiveMaximum"),(0,r.kt)("td",{parentName:"tr",align:"left"},'The value provided should be less than specified in the schema ("{s1}").')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"minimum"),(0,r.kt)("td",{parentName:"tr",align:"left"},'The value provided should not be less than specified in the schema ("{s1}").')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"exclusiveMinimum"),(0,r.kt)("td",{parentName:"tr",align:"left"},'The value provided should be greater than specified in the schema ("{s1}").')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"maxLength"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The string is longer than specified in the schema.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"minLength"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The string is shorter than specified in the schema.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"pattern"),(0,r.kt)("td",{parentName:"tr",align:"left"},'The string "{s1}" does not match the pattern in the schema:{s2}.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"additionalItems"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Error while validating an array. JSON contains more elements than specified in the schema.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"11"),(0,r.kt)("td",{parentName:"tr",align:"left"},"maxItems"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The array contains more items than specified in the schema.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"minItems"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The array contains less items than specified in the schema.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"13"),(0,r.kt)("td",{parentName:"tr",align:"left"},"uniqueItems"),(0,r.kt)("td",{parentName:"tr",align:"left"},'Error while validating an array. Elements are not unique. Another instance of "{s1}" is already in the array.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"14"),(0,r.kt)("td",{parentName:"tr",align:"left"},"maxProperties"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The number of properties is greater than specified in the schema.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"15"),(0,r.kt)("td",{parentName:"tr",align:"left"},"minProperties"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The number of properties is less than specified in the schema.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"16"),(0,r.kt)("td",{parentName:"tr",align:"left"},"required"),(0,r.kt)("td",{parentName:"tr",align:"left"},'The required property "{s1}" is missing.')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"17"),(0,r.kt)("td",{parentName:"tr",align:"left"},"additionalProperties"),(0,r.kt)("td",{parentName:"tr",align:"left"},"No additional properties allowed by the schema. The property(ies) {s1} should be removed.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"18"),(0,r.kt)("td",{parentName:"tr",align:"left"},"dependencies"),(0,r.kt)("td",{parentName:"tr",align:"left"},'The property "{s1}" requires the property "{s2}".')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"19"),(0,r.kt)("td",{parentName:"tr",align:"left"},"enum"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Error while validating against 'enum' key. \"{s1}\" does not match any enum element in the schema.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"20"),(0,r.kt)("td",{parentName:"tr",align:"left"},"type"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Incorrect type. Expected type is: {s1}")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"21"),(0,r.kt)("td",{parentName:"tr",align:"left"},"oneOf"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The JSON matches more than one value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"22"),(0,r.kt)("td",{parentName:"tr",align:"left"},"oneOf"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The JSON does not match any value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"23"),(0,r.kt)("td",{parentName:"tr",align:"left"},"not"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The JSON is valid against the value of 'not'.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"24"),(0,r.kt)("td",{parentName:"tr",align:"left"},"format"),(0,r.kt)("td",{parentName:"tr",align:"left"},'The string does not match ("{s1}")')))),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("p",null,"You want to validate a JSON object with a schema and get the list of validation errors, if any, and store error lines and messages in a text variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},'var oResult : object\nvar vLNbErr : integer\nvar vTerrLine : string\n\noResult = jsonValidate(jsonParse(myJson, *), mySchema)\n\nif (oResult.success) // validation successful\n  // ...\nelse // validation failed\n  vLNbErr = oResult.errors.length // get the number of error(s)\n  vTerrLine = string(vLNbErr) + " validation error(s) found.\\r"\n  for (i, 0, vLNbErr)\n    vTerrLine = vTerrLine + oResult.errors[i].message + " " + string(oResult.errors[i].line\\r)\n  end for\nend if\n\n')),(0,r.kt)("h4",{id:"see-also"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://json-schema.org/"},(0,r.kt)("inlineCode",{parentName:"a"},"How to create a JSON schema")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"jsonParse"},(0,r.kt)("inlineCode",{parentName:"a"},"jsonParse")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"http://json-schema.org/latest/json-schema-validation.html"},(0,r.kt)("inlineCode",{parentName:"a"},"JSON schema validation keywords on json-schema.org"))))}s.isMDXComponent=!0}}]);