"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[3403],{3905:(t,e,a)=>{a.d(e,{Zo:()=>o,kt:()=>N});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var m=n.createContext({}),s=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},o=function(t){var e=s(t.components);return n.createElement(m.Provider,{value:e},t.children)},k="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},g=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,m=t.parentName,o=p(t,["components","mdxType","originalType","parentName"]),k=s(a),g=r,N=k["".concat(m,".").concat(g)]||k[g]||d[g]||l;return a?n.createElement(N,i(i({ref:e},o),{},{components:a})):n.createElement(N,i({ref:e},o))}));function N(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=g;var p={};for(var m in e)hasOwnProperty.call(e,m)&&(p[m]=e[m]);p.originalType=t,p[k]="string"==typeof t?t:r,i[1]=p;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},77848:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={id:"string",title:"String"},i=void 0,p={unversionedId:"language/string",id:"language/string",title:"String",description:"String is a generic term that stands for string and text values.",source:"@site/docs/language/string.md",sourceDirName:"language",slug:"/language/string",permalink:"/docs/language/string",draft:!1,editUrl:"https://github.com/qodly/docs/edit/main/docs/language/string.md",tags:[],version:"current",frontMatter:{id:"string",title:"String"},sidebar:"Develop",previous:{title:"Signal",permalink:"/docs/language/SignalClass"},next:{title:"SystemWorker",permalink:"/docs/language/SystemWorkerClass"}},m={},s=[{value:"String Commands",id:"string-commands",level:2},{value:"changeString",id:"changestring",level:2},{value:"Description",id:"description",level:4},{value:"Example",id:"example",level:4},{value:"See also",id:"see-also",level:4},{value:"char",id:"char",level:2},{value:"Description",id:"description-1",level:4},{value:"Example",id:"example-1",level:4},{value:"See also",id:"see-also-1",level:4},{value:"characterCode",id:"charactercode",level:2},{value:"Description",id:"description-2",level:4},{value:"Example 1",id:"example-1-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"Example 3",id:"example-3",level:4},{value:"See also",id:"see-also-2",level:4},{value:"compareStrings",id:"comparestrings",level:2},{value:"Description",id:"description-3",level:4},{value:"Example 1",id:"example-1-2",level:4},{value:"Example 2",id:"example-2-1",level:4},{value:"See also",id:"see-also-3",level:4},{value:"convertFromString",id:"convertfromstring",level:2},{value:"Description",id:"description-4",level:4},{value:"See also",id:"see-also-4",level:4},{value:"convertToString",id:"converttostring",level:2},{value:"Description",id:"description-5",level:4},{value:"See also",id:"see-also-5",level:4},{value:"deleteString",id:"deletestring",level:2},{value:"Description",id:"description-6",level:4},{value:"Example",id:"example-4",level:4},{value:"See also",id:"see-also-6",level:4},{value:"insertString",id:"insertstring",level:2},{value:"Description",id:"description-7",level:4},{value:"Example",id:"example-5",level:4},{value:"See also",id:"see-also-7",level:4},{value:"length",id:"length",level:2},{value:"Description",id:"description-8",level:4},{value:"Example",id:"example-6",level:4},{value:"lowercase",id:"lowercase",level:2},{value:"Description",id:"description-9",level:4},{value:"Example 1",id:"example-1-3",level:4},{value:"Example 2",id:"example-2-2",level:4},{value:"See also",id:"see-also-8",level:4},{value:"matchRegex",id:"matchregex",level:2},{value:"Description",id:"description-10",level:4},{value:"Example 1",id:"example-1-4",level:4},{value:"Example 2",id:"example-2-3",level:4},{value:"Error management",id:"error-management",level:4},{value:"num",id:"num",level:2},{value:"Description",id:"description-11",level:4},{value:"Example 1",id:"example-1-5",level:4},{value:"Example 2",id:"example-2-4",level:4},{value:"See also",id:"see-also-9",level:4},{value:"position",id:"position",level:2},{value:"Description",id:"description-12",level:4},{value:"Example 1",id:"example-1-6",level:4},{value:"Example 2",id:"example-2-5",level:4},{value:"Example 3",id:"example-3-1",level:4},{value:"See also",id:"see-also-10",level:4},{value:"replaceString",id:"replacestring",level:2},{value:"Description",id:"description-13",level:4},{value:"Example 1",id:"example-1-7",level:4},{value:"Example 2",id:"example-2-6",level:4},{value:"Example 3",id:"example-3-2",level:4},{value:"See also",id:"see-also-11",level:4},{value:"splitString",id:"splitstring",level:2},{value:"Description",id:"description-14",level:4},{value:"Example 1",id:"example-1-8",level:4},{value:"Example 2",id:"example-2-7",level:4},{value:"See also",id:"see-also-12",level:4},{value:"string",id:"string",level:2},{value:"Description",id:"description-15",level:4},{value:"See also",id:"see-also-13",level:4},{value:"substring",id:"substring",level:2},{value:"Description",id:"description-16",level:4},{value:"Example",id:"example-7",level:4},{value:"See also",id:"see-also-14",level:4},{value:"uppercase",id:"uppercase",level:2},{value:"Description",id:"description-17",level:4},{value:"Example 1",id:"example-1-9",level:4},{value:"Example 2",id:"example-2-8",level:4},{value:"See also",id:"see-also-15",level:4}],o={toc:s};function k(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},o,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"String")," is a generic term that stands for string and text values. "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"See also:")," "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/language/basics/lang-text#string-operators"},(0,r.kt)("strong",{parentName:"a"},"String operators"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/language/basics/lang-text#character-reference-symbols"},(0,r.kt)("strong",{parentName:"a"},"Character Reference Symbols")))),(0,r.kt)("h2",{id:"string-commands"},"String Commands"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#changestring"},(0,r.kt)("strong",{parentName:"a"},"changeString")," ( ",(0,r.kt)("em",{parentName:"a"},"source")," : string , ",(0,r.kt)("em",{parentName:"a"},"newChars")," : string , ",(0,r.kt)("em",{parentName:"a"},"where")," : integer ) : string"),"\xa0","\xa0","\xa0","\xa0","changes a group of characters in ",(0,r.kt)("em",{parentName:"td"},"source")," and returns the resulting string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#char"},(0,r.kt)("strong",{parentName:"a"},"char")," ( ",(0,r.kt)("em",{parentName:"a"},"charCode")," : integer ) : string"),"\xa0","\xa0","\xa0","\xa0","returns the character whose code is ",(0,r.kt)("em",{parentName:"td"},"charCode"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#charactercode"},(0,r.kt)("strong",{parentName:"a"},"characterCode")," ( ",(0,r.kt)("em",{parentName:"a"},"character")," : String ) : integer"),"\xa0","\xa0","\xa0","\xa0","returns the Unicode UTF-16 code (included between 1 and 65535) of ",(0,r.kt)("em",{parentName:"td"},"character"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#comparestrings"},(0,r.kt)("strong",{parentName:"a"},"compareStrings")," ( ",(0,r.kt)("em",{parentName:"a"},"aString")," : string , ",(0,r.kt)("em",{parentName:"a"},"bString")," : string { , ",(0,r.kt)("em",{parentName:"a"},"options")," : integer } ) : integer"),"\xa0","\xa0","\xa0","\xa0","returns a negative, zero, or positive value depending on if ",(0,r.kt)("em",{parentName:"td"},"aString")," is evaluated as lower, equal, or higher than ",(0,r.kt)("em",{parentName:"td"},"bString"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#convertfromstring"},(0,r.kt)("strong",{parentName:"a"},"convertFromString")," ( ",(0,r.kt)("em",{parentName:"a"},"aString")," : string , ",(0,r.kt)("em",{parentName:"a"},"charSetString")," : string ) : blob",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},"convertFromString")," ( ",(0,r.kt)("em",{parentName:"a"},"aString")," : string , ",(0,r.kt)("em",{parentName:"a"},"charSetInt")," : integer ) : blob"),"\xa0","\xa0","\xa0","\xa0","can be used to convert a string expressed in the current character set to a string expressed in another character set")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#converttostring"},(0,r.kt)("strong",{parentName:"a"},"convertToString")," ( ",(0,r.kt)("em",{parentName:"a"},"aBlob")," : blob , ",(0,r.kt)("em",{parentName:"a"},"charSetString")," : string ) : string",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},"convertToString")," ( ",(0,r.kt)("em",{parentName:"a"},"aBlob")," : blob , ",(0,r.kt)("em",{parentName:"a"},"charSetInt")," : integer ) : string"),"\xa0","\xa0","\xa0","\xa0","converts the text contained in the ",(0,r.kt)("em",{parentName:"td"},"aBlob")," parameter and returns it in text expressed in the character set of Qodly")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#deletestring"},(0,r.kt)("strong",{parentName:"a"},"deleteString")," ( ",(0,r.kt)("em",{parentName:"a"},"source")," : string , ",(0,r.kt)("em",{parentName:"a"},"where")," : integer , ",(0,r.kt)("em",{parentName:"a"},"numChars")," : integer ) : string"),"\xa0","\xa0","\xa0","\xa0","deletes ",(0,r.kt)("em",{parentName:"td"},"numChars")," from ",(0,r.kt)("em",{parentName:"td"},"source"),", starting at ",(0,r.kt)("em",{parentName:"td"},"where"),", and returns the resulting string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#insertstring"},(0,r.kt)("strong",{parentName:"a"},"insertString")," ( ",(0,r.kt)("em",{parentName:"a"},"source")," : string , ",(0,r.kt)("em",{parentName:"a"},"what")," : string , ",(0,r.kt)("em",{parentName:"a"},"where")," : integer ) : string"),"\xa0","\xa0","\xa0","\xa0","inserts a string into ",(0,r.kt)("em",{parentName:"td"},"source")," and returns the resulting string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#length"},(0,r.kt)("strong",{parentName:"a"},"length")," ( ",(0,r.kt)("em",{parentName:"a"},"aString")," : string ) : integer"),"\xa0","\xa0","\xa0","\xa0","returns the number of characters that are in a ",(0,r.kt)("em",{parentName:"td"},"aString"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#lowercase"},(0,r.kt)("strong",{parentName:"a"},"lowercase")," ( ",(0,r.kt)("em",{parentName:"a"},"aString")," : string {, ","*","} ) : string"),"\xa0","\xa0","\xa0","\xa0","takes ",(0,r.kt)("em",{parentName:"td"},"aString")," and returns the string with all alphabetic characters in lowercase")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#matchregex"},(0,r.kt)("strong",{parentName:"a"},"matchRegex")," ( ",(0,r.kt)("em",{parentName:"a"},"pattern")," : string , ",(0,r.kt)("em",{parentName:"a"},"aString")," : string ) : boolean ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},"matchRegex")," ( ",(0,r.kt)("em",{parentName:"a"},"pattern")," : string , ",(0,r.kt)("em",{parentName:"a"},"aString")," : string , ",(0,r.kt)("em",{parentName:"a"},"start")," : integer {, ","*","} ) : boolean ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},"matchRegex")," ( ",(0,r.kt)("em",{parentName:"a"},"pattern")," : string , ",(0,r.kt)("em",{parentName:"a"},"aString")," : string , ",(0,r.kt)("em",{parentName:"a"},"start")," : integer , ",(0,r.kt)("em",{parentName:"a"},"pos_found")," : integer , ",(0,r.kt)("em",{parentName:"a"},"length_found")," : integer {, ","*","} ) : boolean"),"\xa0","\xa0","\xa0","\xa0","searches for the regular expression ",(0,r.kt)("em",{parentName:"td"},"pattern")," in ",(0,r.kt)("em",{parentName:"td"},"aString"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#num"},(0,r.kt)("strong",{parentName:"a"},"num")," ( ",(0,r.kt)("em",{parentName:"a"},"expression")," : string {, ",(0,r.kt)("em",{parentName:"a"},"separator")," : string } ) : number ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},"num")," ( ",(0,r.kt)("em",{parentName:"a"},"expression")," : number ) : number ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},"num")," ( ",(0,r.kt)("em",{parentName:"a"},"expression")," : boolean ) : number "),"\xa0","\xa0","\xa0","\xa0","returns the numeric form of the string, boolean or numeric expression you pass in ",(0,r.kt)("em",{parentName:"td"},"expression"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#position"},(0,r.kt)("strong",{parentName:"a"},"position")," ( ",(0,r.kt)("em",{parentName:"a"},"find")," : string , ",(0,r.kt)("em",{parentName:"a"},"aString")," : string , ",(0,r.kt)("em",{parentName:"a"},"start")," : integer {, ","*","} ) : integer ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},"position")," ( ",(0,r.kt)("em",{parentName:"a"},"find")," : string , ",(0,r.kt)("em",{parentName:"a"},"aString")," : string , ",(0,r.kt)("em",{parentName:"a"},"start")," : integer , ",(0,r.kt)("em",{parentName:"a"},"lengthFound ")," : integer {, ","*","} ) : integer ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"a"},"position")," ( ",(0,r.kt)("em",{parentName:"a"},"find")," : string , ",(0,r.kt)("em",{parentName:"a"},"aString")," : string , ",(0,r.kt)("em",{parentName:"a"},"start")," : integer , ",(0,r.kt)("em",{parentName:"a"},"lengthFound")," : integer , ",(0,r.kt)("em",{parentName:"a"},"options")," : integer ) : integer"),"\xa0","\xa0","\xa0","\xa0","returns the position of the first occurrence of ",(0,r.kt)("em",{parentName:"td"},"find")," in ",(0,r.kt)("em",{parentName:"td"},"aString"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#replacestring"},(0,r.kt)("strong",{parentName:"a"},"replaceString")," ( ",(0,r.kt)("em",{parentName:"a"},"source")," : string , ",(0,r.kt)("em",{parentName:"a"},"oldString")," : string , ",(0,r.kt)("em",{parentName:"a"},"newString")," : string , ",(0,r.kt)("em",{parentName:"a"},"howMany")," : integer {, ","*","}) : string"),"\xa0","\xa0","\xa0","\xa0","replaces ",(0,r.kt)("em",{parentName:"td"},"howMany")," occurrences of ",(0,r.kt)("em",{parentName:"td"},"oldString")," in ",(0,r.kt)("em",{parentName:"td"},"source")," with ",(0,r.kt)("em",{parentName:"td"},"newString"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#splitstring"},(0,r.kt)("strong",{parentName:"a"},"splitString")," ( ",(0,r.kt)("em",{parentName:"a"},"stringToSplit")," : string , ",(0,r.kt)("em",{parentName:"a"},"separator")," : string {, ",(0,r.kt)("em",{parentName:"a"},"options")," : integer }) : collection "),"\xa0","\xa0","\xa0","\xa0","returns a collection of strings, created by splitting ",(0,r.kt)("em",{parentName:"td"},"stringToSplit")," into substrings at the boundaries specified by the ",(0,r.kt)("em",{parentName:"td"},"separator")," parameter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#string"},(0,r.kt)("strong",{parentName:"a"},"string")," ( ",(0,r.kt)("em",{parentName:"a"},"expression")," : any { , ",(0,r.kt)("em",{parentName:"a"},"format")," : integer { , ",(0,r.kt)("em",{parentName:"a"},"addTime")," : time }} ) : string"),"\xa0","\xa0","\xa0","\xa0"," returns the string form of the numeric, date, time, string or boolean expression you pass in ",(0,r.kt)("em",{parentName:"td"},"expression"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#substring"},(0,r.kt)("strong",{parentName:"a"},"substring")," ( ",(0,r.kt)("em",{parentName:"a"},"source")," : string , ",(0,r.kt)("em",{parentName:"a"},"firstChar")," : integer , ",(0,r.kt)("em",{parentName:"a"},"numChars")," : integer ) : string "),"\xa0","\xa0","\xa0","\xa0","returns the portion of source defined by ",(0,r.kt)("em",{parentName:"td"},"firstChar")," and ",(0,r.kt)("em",{parentName:"td"},"numChars"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#uppercase"},(0,r.kt)("strong",{parentName:"a"},"uppercase")," ( ",(0,r.kt)("em",{parentName:"a"},"aString")," : string {, ","*","} ) : string"),"\xa0","\xa0","\xa0","\xa0","takes ",(0,r.kt)("em",{parentName:"td"},"aString")," and returns the string with all alphabetic characters in uppercase.")))),(0,r.kt)("h2",{id:"changestring"},"changeString"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"changeString")," ( ",(0,r.kt)("em",{parentName:"p"},"source")," : string , ",(0,r.kt)("em",{parentName:"p"},"newChars")," : string , ",(0,r.kt)("em",{parentName:"p"},"where")," : integer ) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Original string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newChars"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"New characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"where"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Where to start the changes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Resulting string")))),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"changeString")," command changes a group of characters in ",(0,r.kt)("em",{parentName:"p"},"source")," and returns the resulting string. The command overlays ",(0,r.kt)("em",{parentName:"p"},"source"),", with the characters in ",(0,r.kt)("em",{parentName:"p"},"newChars"),", at the character described by ",(0,r.kt)("em",{parentName:"p"},"where"),"."),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"newChars"),' is an empty string (""), ',(0,r.kt)("inlineCode",{parentName:"p"},"changeString")," returns ",(0,r.kt)("em",{parentName:"p"},"source")," unchanged. ",(0,r.kt)("inlineCode",{parentName:"p"},"changeString")," always returns a string of the same length as ",(0,r.kt)("inlineCode",{parentName:"p"},"source"),". If ",(0,r.kt)("em",{parentName:"p"},"where")," is less than one or greater than the length of ",(0,r.kt)("em",{parentName:"p"},"source"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"changeString")," returns ",(0,r.kt)("em",{parentName:"p"},"source"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"changeString")," is different from ",(0,r.kt)("a",{parentName:"p",href:"#insertstring"},(0,r.kt)("inlineCode",{parentName:"a"},"insertString"))," in that it overwrites characters instead of inserting them."),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},'var vtResult : string\nvtResult = changeString("Acme","CME",2) //vtResult gets "ACME"\nvtResult = changeString("November","Dec",1) //vtResult gets "December"\n\n')),(0,r.kt)("h4",{id:"see-also"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#deletestring"},(0,r.kt)("inlineCode",{parentName:"a"},"deleteString")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#insertstring"},(0,r.kt)("inlineCode",{parentName:"a"},"insertString")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#replacestring"},(0,r.kt)("inlineCode",{parentName:"a"},"replaceString"))),(0,r.kt)("h2",{id:"char"},"char"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"char")," ( ",(0,r.kt)("em",{parentName:"p"},"charCode")," : integer ) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"charCode"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Character code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Character represented by the charCode")))),(0,r.kt)("h4",{id:"description-1"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," command returns the character whose code is ",(0,r.kt)("em",{parentName:"p"},"charCode"),". "),(0,r.kt)("p",null,"Pass a UTF-16 value (included between 1 and 65535) in ",(0,r.kt)("em",{parentName:"p"},"charCode"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In editing a method, the command ",(0,r.kt)("inlineCode",{parentName:"p"},"char")," is commonly used to specify characters that cannot be entered from the keyboard or that would be interpreted as an editing command in the code editor.")),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},'\nvar myText : string\nmyText  = "hello"+char(carriageReturn)+"world"\n')),(0,r.kt)("h4",{id:"see-also-1"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#charactercode"},(0,r.kt)("inlineCode",{parentName:"a"},"characterCode")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"/docs/language/basics/lang-text#character-reference-symbols"},(0,r.kt)("inlineCode",{parentName:"a"},"Character Reference Symbols"))),(0,r.kt)("h2",{id:"charactercode"},"characterCode"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"characterCode")," ( ",(0,r.kt)("em",{parentName:"p"},"character")," : String ) : integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"character"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Character for which you want to get the code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Character code")))),(0,r.kt)("h4",{id:"description-2"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"characterCode")," command returns the Unicode UTF-16 code (included between 1 and 65535) of ",(0,r.kt)("em",{parentName:"p"},"character"),". "),(0,r.kt)("p",null,"If there is more than one character in the string, ",(0,r.kt)("inlineCode",{parentName:"p"},"characterCode")," returns only the code of the first character."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"#char"},(0,r.kt)("inlineCode",{parentName:"a"},"char"))," function is the counterpart of ",(0,r.kt)("inlineCode",{parentName:"p"},"characterCode"),". It returns the character that the UTF-16 code represents."),(0,r.kt)("h4",{id:"example-1-1"},"Example 1"),(0,r.kt)("p",null,"Uppercase and lowercase characters are considered equal within a comparison. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"characterCode")," to differentiate between uppercase and lowercase characters. Thus, this line returns true:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},'("A" == "a")\n\n')),(0,r.kt)("p",null,"On the other hand, this line returns False:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' (characterCode("A") == characterCode("a"))\n\n')),(0,r.kt)("h4",{id:"example-2"},"Example 2"),(0,r.kt)("p",null,'This example returns the code of the first character of the string "ABC":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var GetCode : integer\n GetCode = characterCode("ABC") //GetCode gets 65, the characterCode of A\n\n')),(0,r.kt)("h4",{id:"example-3"},"Example 3"),(0,r.kt)("p",null,"The following example tests for carriage returns and tabs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"}," var vlChar : integer\n var vtText : string\n for(vlChar,1,length(vtText))\n    switch\n       :(vtText[[vlChar]] == char(Carriage return))\n  //do something\n       :(vtText[[vlChar]] == char(Tab))\n  // do something else\n       :(...)\n  //...\n    end\n end\n\n")),(0,r.kt)("p",null,"When executed multiple times on large texts, this test will run faster when compiled if it is written this way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"}," var vlChar, vlCode  : integer\n var vtText : string\n for(vlChar,1,length(vtText))\n    vlCode = characterCode(vtText[[vlChar]])\n    switch\n       :(vlCode == Carriage return)\n  //do something\n       :(vlCode == Tab)\n  //do something else\n       :(...)\n  //...\n    end\n end\n\n")),(0,r.kt)("p",null,"The second piece of code runs faster for two reasons: it does only one character reference by iteration and uses integer comparisons instead of string comparisons to test for carriage returns and tabs. Use this technique when working with common codes such as CR and TAB"),(0,r.kt)("h4",{id:"see-also-2"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#char"},(0,r.kt)("inlineCode",{parentName:"a"},"char")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#character-reference-symbols"},(0,r.kt)("inlineCode",{parentName:"a"},"Character Reference Symbols"))),(0,r.kt)("h2",{id:"comparestrings"},"compareStrings"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"compareStrings")," ( ",(0,r.kt)("em",{parentName:"p"},"aString")," : string , ",(0,r.kt)("em",{parentName:"p"},"bString")," : string { , ",(0,r.kt)("em",{parentName:"p"},"options")," : integer } ) : integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"aString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String to compare")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"bString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String to compare")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Comparison rule(s)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Result of string comparison")))),(0,r.kt)("h4",{id:"description-3"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"compareStrings")," command returns a negative, zero, or positive value depending on if ",(0,r.kt)("em",{parentName:"p"},"aString")," is evaluated as lower, equal, or higher than ",(0,r.kt)("em",{parentName:"p"},"bString"),".. "),(0,r.kt)("p",null,"In the ",(0,r.kt)("em",{parentName:"p"},"aString")," parameter, pass a string value."),(0,r.kt)("p",null,"In the ",(0,r.kt)("em",{parentName:"p"},"bString")," parameter, pass a string value to be compared to ",(0,r.kt)("em",{parentName:"p"},"aString"),"."),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"compareStrings"),' functions as if the "<" (less than) operator is used. This can be modified with the options parameter. You can pass one or a combination of the following constants: '),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Constant"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kCaseInsensitive"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,'Strings are compared according to the current data language with no consideration of capitalization differences. Note that diacritical marks are taken into consideration. For example, "A" is considered the same as "a", however',"\xa0",'"a" is not considered the same as "',"\xe0",'" .',"\xa0","By default, Qodly string comparison is case insensitive.","\xa0"),(0,r.kt)("p",null,"Can be combined with:","\xa0"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCharCodes")," OR ",(0,r.kt)("u",null,"kDiacriticInsensitive"))),(0,r.kt)("p",null,"This constant implies the use of the following constants (which can also be combined for improved readability):"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kKanaInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kWidthInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kStrict"))))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kCharCodes"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,"Strings are compared according to character codes. Current data language settings are not taken into account during the comparison.","\xa0"),(0,r.kt)("p",null,"\xa0"),(0,r.kt)("p",null,"Can be combined with:",(0,r.kt)("span",null,"\xa0"),(0,r.kt)("u",null,"kCaseInsensitive"),"\xa0"),(0,r.kt)("p",null,'Only for "a-z" or "A-Z" ranges. (e.g., Alpha = alpha, but Alpha # ',"\xe2","lph","\xe0",")"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kDiacriticInsensitive"),(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,'Strings are compared according to the current data language, however the diacritical mark (e.g., accent or symbol) of letters is ignored. For example, "a" is considered the same as "',"\xe0",'".',"\xa0"),(0,r.kt)("p",null,"Can be combined with:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCaseInsensitive"))),(0,r.kt)("p",null,"This constant implies the use of the following constants (which can also be combined for improved readability):"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kKanaInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kWidthInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kStrict"))))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kKanaInsensitive"),(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,"For Japanese language. Controls the distinction between Hiragana and Katakana syllables.","\xa0",'From a semantic point of view, the difference between Hiragana and Katakana is usually significant, but to capture as many results as possible, the default mode in Qodly is to ignore the difference (kana insensitive). For example, "\u3042" is considered the same as "\u30a2".',"\xa0","The",(0,r.kt)("span",null,"\xa0"),(0,r.kt)("u",null,"kStrict"),(0,r.kt)("span",null,"\xa0"),"option performs a kana sensitive comparison.",(0,r.kt)("span",null,"\xa0"),(0,r.kt)("span",null,"kKanaInsensitive"),(0,r.kt)("span",null,"\xa0"),"can be used to partially relax the rule to be kana insensitive.","\xa0"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"Note:"),(0,r.kt)("span",null,"\xa0"),"The data language must be set to Japanese to use this option. For all other languages, the option is ignored and",(0,r.kt)("span",null,"\xa0"),(0,r.kt)("a",{parentName:"td",href:"#comparestrings"},(0,r.kt)("inlineCode",{parentName:"a"},"compareStrings")),(0,r.kt)("span",null,"\xa0"),"will work as if",(0,r.kt)("span",null,"\xa0"),(0,r.kt)("u",null,"kStrict"),"\xa0","was specified. In other words, setting this option in a non-Japanese context would actually make the comparison kana sensitive (the opposite effect)."),(0,r.kt)("p",null,"Can be combined with:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCaseInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kDiacriticInsensitive"))))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kStrict"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,"Strings are compared for exact matches according to the current data language.","\xa0","In most cases, capitalization and diacritical marks of letters are taken into account during the comparison.","\xa0"),(0,r.kt)("p",null,"Can be combined with:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCaseInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kDiacriticInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kKanaInsensitive"))),(0,r.kt)("p",null,"This constant implies the use of the following constant (which can also be combined for improved readability):"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kWidthInsensitive"))))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kWidthInsensitive"),(0,r.kt)("td",{parentName:"tr",align:"left"},"16"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,'For Japanese language. Corresponds to the "East Asian Width" Unicode standard, as defined in ',(0,r.kt)("a",{href:"http://www.unicode.org/reports/tr11/"},"Unicode Standard Annex #11"),'. From a semantic point of view, the difference between a "narrow" and "wide" character or a "full width" and "half width" character is usually insignificant, which is the default mode in Qodly. For example, "\uff71" is considered the same as "\u30a2". The',"\xa0",(0,r.kt)("u",null,"kStrict"),(0,r.kt)("span",null,"\xa0"),"option performs a width sensitive comparison.","\xa0"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"Note:")," The data language must be set to Japanese to use this option. For all other languages, the option is ignored and ",(0,r.kt)("a",{parentName:"td",href:"#comparestrings"},(0,r.kt)("inlineCode",{parentName:"a"},"compareStrings"))," will work as if ",(0,r.kt)("u",null,"kStrict")," was specified. In other words, setting this option in a non-Japanese context would actually make the comparison width sensitive (the opposite effect)."),(0,r.kt)("p",null,"Can be combined with:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCaseInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kDiacriticInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kKanaInsensitive"))),(0,r.kt)("p",null,"This constant implies the use of the following constant (which can also be combined for improved readability):"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kStrict"))))))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You cannot use the @ wildcard character with ",(0,r.kt)("inlineCode",{parentName:"p"},"compareStrings"),'. For example, if you pass "',(0,r.kt)("em",{parentName:"p"},"abc@"),'" in ',(0,r.kt)("em",{parentName:"p"},"aString")," or ",(0,r.kt)("em",{parentName:"p"},"bString"),' the command will actually evaluate the "',(0,r.kt)("em",{parentName:"p"},"abc@"),'" string and not an "abc" string plus any character.')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returned value")),(0,r.kt)("p",null,"The command returns the following integer values:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"-1"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"aString")," is lower than ",(0,r.kt)("em",{parentName:"td"},"bString"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"aString")," is equal to ",(0,r.kt)("em",{parentName:"td"},"bString"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("em",{parentName:"td"},"aString")," is higher ",(0,r.kt)("em",{parentName:"td"},"bString"))))),(0,r.kt)("h4",{id:"example-1-2"},"Example 1"),(0,r.kt)("p",null,"You want to compare the following strings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var string1, string2 : string\n var myResult : integer\n string1 = "alpha Bravo charlie Delta Echo Fox-Trot"\n string2 = "Alpha Bravo Charlie Delta Echo Fox-Trot"\n \n  //compare the strings using the character code\n myResult = compareStrings(string1,string2,kCharCodes)\n  // myResult = 1\n \n  //compare the strings using the character code but ignoring any capitalization\n myResult = compareStrings(string1,string2,kCharCodes+kCaseInsensitive)\n  // myResult = 0\n \n')),(0,r.kt)("h4",{id:"example-2-1"},"Example 2"),(0,r.kt)("p",null,"The following examples illustrate the specific impact of options in ",(0,r.kt)("strong",{parentName:"p"},"Japanese data language context"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var myResult : integer\n//default is kana insensitive\n myResult = compareStrings("\u30a4\u30ed\u30cf","\u3044\u308d\u306f") // equal\n myResult = compareStrings("\u30a4\u30ed\u30cf","\u3044\u308d\u306f",kStrict)      // not equal\n result = compareStrings("\u30a4\u30ed\u30cf","\u3044\u308d\u306f",kKanaInsensitive) // equal\n \n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var myResult : integer\n//default is case insensitive\n myResult = compareStrings("\u3055\u3064\u304d","\u3055\u3063\u304d") // equal\n myResult = compareStrings("\u3055\u3064\u304d","\u3055\u3063\u304d",kStrict) // not equal\n myResult = compareStrings("\u3055\u3064\u304d","\u3055\u3063\u304d",kCaseInsensitive) // equal\n \n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var myResult : integer\n //default is diacritic sensitive when the data language is set to Japanese (different to all other languages)\n myResult = compareStrings("ete","\xe9t\xe9") // equal in non-Japanese data language\n myResult = compareStrings("ete","\xe9t\xe9") // not equal in Japanese data language\n myResult = compareStrings("\u3046\u304c\u3044","\u3046\u304b\u3044") // not equal\n myResult = compareStrings("\u3046\u304c\u3044","\u3046\u304b\u3044",kStrict) // not equal\n myResult = compareStrings("\u3046\u304c\u3044","\u3046\u304b\u3044",kDiacriticInsensitive) // equal\n \n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'The "Sorting order appropriate for searching" setting has an impact on the ',(0,r.kt)("inlineCode",{parentName:"p"},"compareStrings"),' command. In particular, the "Katakana-Hiragana Prolonged Sound Mark" or "\u9577\u97f3\u8a18\u53f7" will be interpreted differently. The setting also has an impact on "Japanese Iteration Marks" such as "\u309d" or "\u309e". ')),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var myResult : integer\n myResult = compareStrings("\u3044\u3059\u305a","\u3044\u3059\u309e") // equal if setting is disabled\n myResult = compareStrings("\u3044\u3059\u305a","\u3044\u3059\u309e") // not equal if setting is enabled\n myResult = compareStrings("\u30e9\u30fc\u30e1\u30f3","\uff97\uff70\uff92\uff9d") // equal if setting is enabled\n myResult = compareStrings("\u30e9\u30fc\u30e1\u30f3",&NBSP,"\uff97\uff70\uff92\uff9d") // not equal if setting is disabled\n \n')),(0,r.kt)("h4",{id:"see-also-3"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#position"},(0,r.kt)("inlineCode",{parentName:"a"},"position"))),(0,r.kt)("h2",{id:"convertfromstring"},"convertFromString"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"convertFromString")," ( ",(0,r.kt)("em",{parentName:"p"},"aString")," : string , ",(0,r.kt)("em",{parentName:"p"},"charSetString")," : string ) : blob",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},"convertFromString")," ( ",(0,r.kt)("em",{parentName:"p"},"aString")," : string , ",(0,r.kt)("em",{parentName:"p"},"charSetInt")," : integer ) : blob"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"aString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"string expressed in current character set")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"charSetString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of character set")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"charSetInt"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of character set")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"blob"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"blob containing converted string")))),(0,r.kt)("h4",{id:"description-4"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"convertFromString")," command can be used to convert a string expressed in the current character set to a string expressed in another character set. "),(0,r.kt)("p",null,"In the ",(0,r.kt)("em",{parentName:"p"},"aString")," parameter, pass the text to be converted. This text is expressed in the current character set (Unicode by default)."),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"charSetString")," or ",(0,r.kt)("em",{parentName:"p"},"charSetInt"),', pass the character set to be used for the conversion. You can pass a string containing the standard name of the set (for example "ISO-8859-1" or "UTF-8"), or its MIBEnum identifier.'),(0,r.kt)("p",null,"Here is a list of character sets supported by the convertFromString and ",(0,r.kt)("a",{parentName:"p",href:"#converttostring"},(0,r.kt)("inlineCode",{parentName:"a"},"convertToString"))," commands:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"MIBEnum"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Name(s)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1017"),(0,r.kt)("td",{parentName:"tr",align:"left"},"UTF-32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1018"),(0,r.kt)("td",{parentName:"tr",align:"left"},"UTF-32BE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1019"),(0,r.kt)("td",{parentName:"tr",align:"left"},"UTF-32LE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1015"),(0,r.kt)("td",{parentName:"tr",align:"left"},"UTF-16")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1013"),(0,r.kt)("td",{parentName:"tr",align:"left"},"UTF-16BE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1014"),(0,r.kt)("td",{parentName:"tr",align:"left"},"UTF-16LE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"106"),(0,r.kt)("td",{parentName:"tr",align:"left"},"UTF-8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1012"),(0,r.kt)("td",{parentName:"tr",align:"left"},"UTF-7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"US-ASCII")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ANSI_X3.4-1968")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ANSI_X3.4-1986")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ASCII")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cp367")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csASCII")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM367")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_646.irv:1991")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO646-US")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"us")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2011"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM437")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2011"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cp437")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2011"),(0,r.kt)("td",{parentName:"tr",align:"left"},"437")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2011"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csPC8CodePage437")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2028"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ebcdic-cp-us")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2028"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cp037")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2028"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csIBM037")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2028"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ebcdic-cp-ca")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2028"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ebcdic-cp-n")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2028"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ebcdic-cp-wt")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2028"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM037")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2027"),(0,r.kt)("td",{parentName:"tr",align:"left"},"MacRoman")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2027"),(0,r.kt)("td",{parentName:"tr",align:"left"},"x-mac-roman")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2027"),(0,r.kt)("td",{parentName:"tr",align:"left"},"mac")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2027"),(0,r.kt)("td",{parentName:"tr",align:"left"},"macintosh")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2027"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csMacintosh")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2252"),(0,r.kt)("td",{parentName:"tr",align:"left"},"windows-1252")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1250"),(0,r.kt)("td",{parentName:"tr",align:"left"},"MacCE")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1250"),(0,r.kt)("td",{parentName:"tr",align:"left"},"x-mac-ce")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2250"),(0,r.kt)("td",{parentName:"tr",align:"left"},"windows-1250")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1251"),(0,r.kt)("td",{parentName:"tr",align:"left"},"x-mac-cyrillic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2251"),(0,r.kt)("td",{parentName:"tr",align:"left"},"windows-1251")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1253"),(0,r.kt)("td",{parentName:"tr",align:"left"},"x-mac-greek")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2253"),(0,r.kt)("td",{parentName:"tr",align:"left"},"windows-1253")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1254"),(0,r.kt)("td",{parentName:"tr",align:"left"},"x-mac-turkish")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2254"),(0,r.kt)("td",{parentName:"tr",align:"left"},"windows-1254")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1256"),(0,r.kt)("td",{parentName:"tr",align:"left"},"x-mac-arabic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2256"),(0,r.kt)("td",{parentName:"tr",align:"left"},"windows-1256")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1255"),(0,r.kt)("td",{parentName:"tr",align:"left"},"x-mac-hebrew")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2255"),(0,r.kt)("td",{parentName:"tr",align:"left"},"windows-1255")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1257"),(0,r.kt)("td",{parentName:"tr",align:"left"},"x-mac-ce")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2257"),(0,r.kt)("td",{parentName:"tr",align:"left"},"windows-1257")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"17"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Shift_JIS")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"17"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csShiftJIS")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"17"),(0,r.kt)("td",{parentName:"tr",align:"left"},"MS_Kanji")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"17"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Shift-JIS")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"39"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-2022-JP")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"39"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISO2022JP")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2026"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Big5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2026"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csBig5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"38"),(0,r.kt)("td",{parentName:"tr",align:"left"},"EUC-KR")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"38"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csEUCKR")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2084"),(0,r.kt)("td",{parentName:"tr",align:"left"},"KOI8-R")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2084"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csKOI8R")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"CP819")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatin1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"IBM819")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-100")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-1:1987")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"l1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"latin1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatin2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-101")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-2:1987")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"l2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"latin2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatin3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-3:1988")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-109")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"l3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"latin3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatin4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-4:1988")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-110")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"l4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"latin4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatinCyrillic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"cyrillic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-5:1988")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-144")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"arabic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ASMO-708")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatinArabic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ECMA-114")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-6:1987")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-127")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatinGreek")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ECMA-118")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ELOT_928")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"greek")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"greek8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-126")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-7:1987")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"11"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"11"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatinHebrew")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"11"),(0,r.kt)("td",{parentName:"tr",align:"left"},"hebrew")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"11"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-138")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"11"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"11"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-8:1988")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatin5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-148")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-9:1989")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"l5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"12"),(0,r.kt)("td",{parentName:"tr",align:"left"},"latin5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"13"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"13"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISOLatin6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"13"),(0,r.kt)("td",{parentName:"tr",align:"left"},"iso-ir-157")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"13"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"13"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO_8859-10:1992")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"13"),(0,r.kt)("td",{parentName:"tr",align:"left"},"l6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"13"),(0,r.kt)("td",{parentName:"tr",align:"left"},"latin6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"109"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-13")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"111"),(0,r.kt)("td",{parentName:"tr",align:"left"},"ISO-8859-15")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"111"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Latin-9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"113"),(0,r.kt)("td",{parentName:"tr",align:"left"},"GBK")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2025"),(0,r.kt)("td",{parentName:"tr",align:"left"},"GB2312")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2025"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csGB2312")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2025"),(0,r.kt)("td",{parentName:"tr",align:"left"},"x-mac-chinesesimp")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2024"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Windows-31J")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"57"),(0,r.kt)("td",{parentName:"tr",align:"left"},"GB_2312-80")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"57"),(0,r.kt)("td",{parentName:"tr",align:"left"},"csISO58GB231280")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Several rows have the same MIBEnum identifier because a character set can have more than one name (alias).")),(0,r.kt)("p",null,"For more information about the names of character sets, please refer to the following address: ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("a",{parentName:"em",href:"http://www.iana.org/assignments/character-sets"},"http://www.iana.org/assignments/character-sets"))),(0,r.kt)("p",null,"After execution of the command, the converted text will be returned in the ",(0,r.kt)("em",{parentName:"p"},"convertedBLOB")," blob. This blob can be read by the ",(0,r.kt)("a",{parentName:"p",href:"#converttostring"},(0,r.kt)("inlineCode",{parentName:"a"},"convertToString"))," command."),(0,r.kt)("h4",{id:"see-also-4"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#converttostring"},(0,r.kt)("inlineCode",{parentName:"a"},"convertToString"))),(0,r.kt)("h2",{id:"converttostring"},"convertToString"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"convertToString")," ( ",(0,r.kt)("em",{parentName:"p"},"aBlob")," : blob , ",(0,r.kt)("em",{parentName:"p"},"charSetString")," : string ) : string",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},"convertToString")," ( ",(0,r.kt)("em",{parentName:"p"},"aBlob")," : blob , ",(0,r.kt)("em",{parentName:"p"},"charSetInt")," : integer ) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"aBlob"),(0,r.kt)("td",{parentName:"tr",align:null},"blob"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"blob containing text expressed in a specific character set")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"charSetString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of blob character set")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"charSetInt"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of blob character set")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Contents of blob expressed in Qodly character set")))),(0,r.kt)("h4",{id:"description-5"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"convertToString")," command converts the text contained in the ",(0,r.kt)("em",{parentName:"p"},"aBlob")," parameter and returns it in text expressed in the character set of Qodly. Qodly uses the UTF-16 character set by default."),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"charSetString")," or ",(0,r.kt)("em",{parentName:"p"},"charSetInt"),", pass the character set of the text contained in ",(0,r.kt)("em",{parentName:"p"},"aBlob"),", which will be used for the conversion. If the blob contains text copied from within Qodly, then the blob\u2019s text is likely to be in the UTF-16 character set. You can pass a string providing the standard name of the character set, or one of its aliases (for example, \u201cISO-8859-1\u201d or \u201cUTF-8\u201d), or its identifier (integer). For more information, please refer to the description of the ",(0,r.kt)("a",{parentName:"p",href:"#convertfromstring"},(0,r.kt)("inlineCode",{parentName:"a"},"convertFromString"))," command."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"convertToString")," supports Byte Order Marks (BOMs). If the character set specified is of the Unicode type (UTF-8, UTF-16 or UTF-32), Qodly attempts to identify a BOM among the first bytes received. If one is detected, it is filtered out of the result and Qodly uses the character set that it defines instead of the one specified."),(0,r.kt)("h4",{id:"see-also-5"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#convertfromstring"},(0,r.kt)("inlineCode",{parentName:"a"},"convertFromString"))),(0,r.kt)("h2",{id:"deletestring"},"deleteString"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"deleteString")," ( ",(0,r.kt)("em",{parentName:"p"},"source")," : string , ",(0,r.kt)("em",{parentName:"p"},"where")," : integer , ",(0,r.kt)("em",{parentName:"p"},"numChars")," : integer ) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String from which to delete characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"where"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"First character to delete")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"numChars"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of characters to delete")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Resulting string")))),(0,r.kt)("h4",{id:"description-6"},"Description"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"deleteString")," deletes ",(0,r.kt)("em",{parentName:"p"},"numChars")," from ",(0,r.kt)("em",{parentName:"p"},"source"),", starting at ",(0,r.kt)("em",{parentName:"p"},"where"),", and returns the resulting string. "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"deleteString")," returns the same string as ",(0,r.kt)("em",{parentName:"p"},"source")," when:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"source")," is an empty string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"where")," is greater than the length of ",(0,r.kt)("em",{parentName:"li"},"source")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"numChars")," is zero (0)")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"where")," is less than one, the characters are deleted from the beginning of the string."),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"where")," plus ",(0,r.kt)("em",{parentName:"p"},"numChars")," is equal to or greater than the length of ",(0,r.kt)("em",{parentName:"p"},"source"),", the characters are deleted from ",(0,r.kt)("em",{parentName:"p"},"where")," to the end of ",(0,r.kt)("em",{parentName:"p"},"source"),"."),(0,r.kt)("h4",{id:"example-4"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var vtResult, vtOtherVar : string\n vtResult = deleteString("Lamborghini",6,6) // vtResult gets "Lambo"\n vtResult = deleteString("Indentation",6,2) // vtResult gets "Indention"\n vtResult = deleteString(vtOtherVar,3,32000) // vtResult gets the first two characters of vtOtherVar\n \n')),(0,r.kt)("h4",{id:"see-also-6"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#changestring"},(0,r.kt)("inlineCode",{parentName:"a"},"changeString")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#insertstring"},(0,r.kt)("inlineCode",{parentName:"a"},"insertString")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#replacestring"},(0,r.kt)("inlineCode",{parentName:"a"},"replaceString"))),(0,r.kt)("h2",{id:"insertstring"},"insertString"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"insertString")," ( ",(0,r.kt)("em",{parentName:"p"},"source")," : string , ",(0,r.kt)("em",{parentName:"p"},"what")," : string , ",(0,r.kt)("em",{parentName:"p"},"where")," : integer ) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String in which to insert the other string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"what"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String to insert")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"where"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Where to insert")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Resulting string")))),(0,r.kt)("h4",{id:"description-7"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"insertString")," command inserts a string into ",(0,r.kt)("em",{parentName:"p"},"source")," and returns the resulting string. The command inserts the string ",(0,r.kt)("em",{parentName:"p"},"what")," before the character at position ",(0,r.kt)("em",{parentName:"p"},"where"),"."),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"what"),' is an empty string (""), ',(0,r.kt)("inlineCode",{parentName:"p"},"insertString")," returns source unchanged."),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"where")," is greater than the length of ",(0,r.kt)("em",{parentName:"p"},"source"),", then ",(0,r.kt)("em",{parentName:"p"},"what")," is appended to ",(0,r.kt)("em",{parentName:"p"},"source"),". If ",(0,r.kt)("em",{parentName:"p"},"where")," is less than one (1), then ",(0,r.kt)("em",{parentName:"p"},"what")," is inserted before ",(0,r.kt)("em",{parentName:"p"},"source"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"insertString")," is different from ",(0,r.kt)("a",{parentName:"p",href:"#changestring"},(0,r.kt)("inlineCode",{parentName:"a"},"changeString"))," in that it inserts characters instead of overwriting them."),(0,r.kt)("h4",{id:"example-5"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var vtResult : string\n vtResult = insertString("The tree"," green",4) // vtResult gets "The green  tree"\n vtResult = insertString("Shut","o",3) // vtResult gets "Shout"\n vtResult = insertString("Indention","ta",6) // vtResult gets "Indentation"\n \n')),(0,r.kt)("h4",{id:"see-also-7"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#changestring"},(0,r.kt)("inlineCode",{parentName:"a"},"changeString")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#deletestring"},(0,r.kt)("inlineCode",{parentName:"a"},"deleteString")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#replacestring"},(0,r.kt)("inlineCode",{parentName:"a"},"replaceString"))),(0,r.kt)("h2",{id:"length"},"length"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"length")," ( ",(0,r.kt)("em",{parentName:"p"},"aString")," : string ) : integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"aString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String for which to return length")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Length of string")))),(0,r.kt)("h4",{id:"description-8"},"Description"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"length")," is used to find the length of a ",(0,r.kt)("em",{parentName:"p"},"aString"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," returns the number of characters that are in a ",(0,r.kt)("em",{parentName:"p"},"aString"),".. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"When you want to check whether a string contains any characters, including ignorable characters, you must use the test ",(0,r.kt)("inlineCode",{parentName:"p"},"if(length(vtAnyText) == 0)")," rather than ",(0,r.kt)("inlineCode",{parentName:"p"},'if(vtAnyText == "")'),". If the string contains for example ",(0,r.kt)("inlineCode",{parentName:"p"},"char(1)"),", which is an ignorable character, ",(0,r.kt)("inlineCode",{parentName:"p"},"length(vtAnyText)")," does return 1 but ",(0,r.kt)("inlineCode",{parentName:"p"},'vtAnyText == ""')," returns true.")),(0,r.kt)("h4",{id:"example-6"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var vtResult : string\n vlResult = length("Topaz") // vlResult gets 5\n vlResult = length("Citizen") // vlResult gets 7\n \n')),(0,r.kt)("h2",{id:"lowercase"},"lowercase"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"lowercase")," ( ",(0,r.kt)("em",{parentName:"p"},"aString")," : string {, ","*","} ) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"aString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String to convert to lowercase")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"If passed: keep accents")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"String in lowercase")))),(0,r.kt)("h4",{id:"description-9"},"Description"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"lowercase")," takes ",(0,r.kt)("em",{parentName:"p"},"aString")," and returns the string with all alphabetic characters in lowercase. "),(0,r.kt)("p",null,"The optional ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," parameter, if passed, indicates that any accented characters present in ",(0,r.kt)("em",{parentName:"p"},"aString")," must be returned as accented lowercase characters. By default, when this parameter is omitted, accented characters \u201close\u201d their accents after the conversion is carried out."),(0,r.kt)("h4",{id:"example-1-3"},"Example 1"),(0,r.kt)("p",null,'The following project method capitalizes the string or text received as parameter. For instance, Caps ("john") would return "John".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"}," declare (myText : string) -> myCapText : string\n myCapText = lowercase(myText)\n if(length(myCapText)>0)\n    myCapText[[1]] == uppercase(myCapText[[1]])\n end\n\n")),(0,r.kt)("h4",{id:"example-2-2"},"Example 2"),(0,r.kt)("p",null,"This example compares the results obtained according to whether or not the ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," parameter has been passed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var thestring : string \n thestring = lowercase("D\xc9J\xc0 VU") // thestring is "deja vu"\n thestring = lowercase("D\xc9J\xc0 VU",*) // thestring is "d\xe9j\xe0 vu"\n\n')),(0,r.kt)("h4",{id:"see-also-8"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#uppercase"},(0,r.kt)("inlineCode",{parentName:"a"},"uppercase"))),(0,r.kt)("h2",{id:"matchregex"},"matchRegex"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"matchRegex")," ( ",(0,r.kt)("em",{parentName:"p"},"pattern")," : string , ",(0,r.kt)("em",{parentName:"p"},"aString")," : string ) : boolean ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},"matchRegex")," ( ",(0,r.kt)("em",{parentName:"p"},"pattern")," : string , ",(0,r.kt)("em",{parentName:"p"},"aString")," : string , ",(0,r.kt)("em",{parentName:"p"},"start")," : integer {, ","*","} ) : boolean ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},"matchRegex")," ( ",(0,r.kt)("em",{parentName:"p"},"pattern")," : string , ",(0,r.kt)("em",{parentName:"p"},"aString")," : string , ",(0,r.kt)("em",{parentName:"p"},"start")," : integer , ",(0,r.kt)("em",{parentName:"p"},"pos_found")," : integer , ",(0,r.kt)("em",{parentName:"p"},"length_found")," : integer {, ","*","} ) : boolean"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pattern"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Regular expression (complete equality when using two parameters only)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"aString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String in which search will be done")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"start"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Position in aString where search will start")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pos_found"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Position of occurrence")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"length_found"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Length of occurrence")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"If passed: only searches at position indicated")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"True = search has found an occurrence; Otherwise, False")))),(0,r.kt)("h4",{id:"description-10"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"matchRegex")," command searches for the regular expression ",(0,r.kt)("em",{parentName:"p"},"pattern")," in ",(0,r.kt)("em",{parentName:"p"},"aString"),'. It checks the conformity of a character string with respect to a set of synthesized rules by means of a meta-language called "regular expression" or "rational expression". The ',(0,r.kt)("em",{parentName:"p"},"regex")," abbreviation is commonly used to indicate these types of notations. "),(0,r.kt)("p",null,"Pass the regular expression to search for in ",(0,r.kt)("em",{parentName:"p"},"pattern"),". This consists of a set of characters used for describing a character string, using special characters."),(0,r.kt)("p",null,"Pass the string where you want to search for the regular expression in ",(0,r.kt)("em",{parentName:"p"},"aString"),"."),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"start"),", pass the position at which to start the search in ",(0,r.kt)("em",{parentName:"p"},"aString"),"."),(0,r.kt)("p",null,"In ",(0,r.kt)("em",{parentName:"p"},"pos_found")," and ",(0,r.kt)("em",{parentName:"p"},"length_found")," variables, the command returns the position and length of the first occurrence found."),(0,r.kt)("p",null,"The optional ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," parameter indicates, when it is passed, that the search must be carried out at the position specified by ",(0,r.kt)("em",{parentName:"p"},"start")," without searching any further in the case of failure."),(0,r.kt)("p",null,"The command returns ",(0,r.kt)("strong",{parentName:"p"},"true")," if the search has found an occurrence."),(0,r.kt)("p",null,"For more information about regex, refer to the dedicated ",(0,r.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Regular_expression"},"Wikipedia page"),". "),(0,r.kt)("p",null,"For more information about the syntax of the regular expression passed in the ",(0,r.kt)("em",{parentName:"p"},"pattern")," parameter, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://unicode-org.github.io/icu/userguide/strings/regexp.html#regular-expressions"},"this page"),"."),(0,r.kt)("h4",{id:"example-1-4"},"Example 1"),(0,r.kt)("p",null,"Search in text by position. You want to fidn all tags in a text:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' declare (myText : string) -> result : collection\n var start : integer\n var vfound : boolean\n start = 1\n result = newCollection\n repeat\n    vfound = matchRegex("<.*>",myText,start,pos_found,length_found)\n    if(vfound)\n       result.push(substring(myText,pos_found,length_found))\n       start = pos_found+length_found\n    end\n until(not(vfound))\n\n')),(0,r.kt)("h4",{id:"example-2-3"},"Example 2"),(0,r.kt)("p",null,"Search limiting the comparison of the pattern to the position indicated:\nAdd a star to the end of one of the two previous syntaxes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var pos_found, length_found : integer\n var vfound : string\n\n vfound = matchRegex("a.b","---a-b---",1,pos_found,length_found)\n  // returns true\n vfound = matchRegex("a.b","---a-b---",1,pos_found,length_found,*)\n  // returns false\n vfound = matchRegex("a.b","---a-b---",4,pos_found,length_found,*)\n  // returns true\n\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The positions and lengths returned are only meaningful in Unicode mode or if the text being worked with is of the 7-bit ASCII type.")),(0,r.kt)("h4",{id:"error-management"},"Error management"),(0,r.kt)("p",null,"In the event of an error, the command generates an error that you can intercept via a method installed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"onErrCall")," command."),(0,r.kt)("h2",{id:"num"},"num"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"num")," ( ",(0,r.kt)("em",{parentName:"p"},"expression")," : string {, ",(0,r.kt)("em",{parentName:"p"},"separator")," : string } ) : number ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},"num")," ( ",(0,r.kt)("em",{parentName:"p"},"expression")," : number ) : number ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},"num")," ( ",(0,r.kt)("em",{parentName:"p"},"expression")," : boolean ) : number "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expression"),(0,r.kt)("td",{parentName:"tr",align:null},"mixed"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Character for which you want to get the code")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"separator"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Decimal separator")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric form of the expression parameter")))),(0,r.kt)("h4",{id:"description-11"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," command returns the numeric form of the string, boolean or numeric expression you pass in ",(0,r.kt)("em",{parentName:"p"},"expression"),". The optional ",(0,r.kt)("em",{parentName:"p"},"separator")," parameter designates a decimal separator for evaluating string type expressions."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"String Expressions")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"expression")," consists only of one or more alphabetic characters, ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," returns a zero. If ",(0,r.kt)("em",{parentName:"p"},"expression"),' includes alphabetic and numeric characters, the command ignores the alphabetic characters. Thus, it transforms the string "a1b2c3" into the number 123.'),(0,r.kt)("p",null,"There are three reserved characters that ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," treats specially: the decimal separator as defined in the system (if the ",(0,r.kt)("em",{parentName:"p"},"separator")," parameter is not passed), the hyphen \u201c-\u201d, and \u201ce\u201d or \u201cE\u201d. These characters are interpreted as numeric format characters."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The decimal separator is interpreted as a decimal place and must appear embedded in a numeric string. By default, the command uses the decimal separator set by the operating system. You can modify this character using the ",(0,r.kt)("em",{parentName:"li"},"separator")," parameter (see below)."),(0,r.kt)("li",{parentName:"ul"},"The hyphen causes the number or exponent to be negative. The hyphen must appear before any negative numeric characters or after the \u201ce\u201d for an exponent. Except for the \u201ce\u201d character, if a hyphen is embedded in a numeric string, the portion of the string after the hyphen is ignored. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"num"),'("123-456") returns 123, but ',(0,r.kt)("inlineCode",{parentName:"li"},"num"),'("-9") returns -9.'),(0,r.kt)("li",{parentName:"ul"},"The e or E causes any numeric characters to its right to be interpreted as the power of an exponent. The \u201ce\u201d must be embedded in a numeric string. Thus, ",(0,r.kt)("inlineCode",{parentName:"li"},"num"),'("123e\u20132") returns 1.23.\nNote that when the string includes more than one "e", conversion might give different results under Mac OS and under Windows.')),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"separator")," parameter designates a custom decimal separator for evaluating the ",(0,r.kt)("em",{parentName:"p"},"expression"),". When the string to be evaluated is expressed with a decimal separator different from the system operator, the command returns an incorrect result. The ",(0,r.kt)("em",{parentName:"p"},"separator")," parameter can be used in this case to obtain a correct evaluation. When this parameter is passed, the command does not take the system decimal separator into account. You can pass one or more characters."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Boolean Expressions")),(0,r.kt)("p",null,"If you pass a boolean expression, ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," returns 1 if the expression is true; otherwise, it returns 0 (zero)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Numeric Expressions")),(0,r.kt)("p",null,"If you pass a numeric expression in the ",(0,r.kt)("em",{parentName:"p"},"expression")," parameter, ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," returns the value passed in the ",(0,r.kt)("em",{parentName:"p"},"expression")," parameter as is. This can be useful more particularly in the case of generic programming."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Undefined Expressions")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"expression")," evaluates to undefined, the command returns 0 (zero). This is useful when you expect the result of an expression (e.g. an object attribute) to be a number, even if it can be undefined."),(0,r.kt)("h4",{id:"example-1-5"},"Example 1"),(0,r.kt)("p",null,"The following example illustrates how ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," works when passed a string argument. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var vResult : number\n vResult = num("ABCD") // vResult gets 0\n vResult = num("A1B2C3") // vResult gets 123\n vResult = num("123") // vResult gets 123\n vResult = num("123.4") // vResult gets 123.4\n vResult = num("\u2013123") // vResult gets \u2013123\n vResult = num("\u2013123e2") // vResult gets \u201312300\n\n')),(0,r.kt)("h4",{id:"example-2-4"},"Example 2"),(0,r.kt)("p",null,"This example compares the results obtained depending on the separator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var thestring : string\n var thenum : number\n thestring = "33 333,33"\n thenum = num(thestring) // 3333333\n thenum = num(thestring,",") // 33333.33\n\n')),(0,r.kt)("h4",{id:"see-also-9"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#bool"},(0,r.kt)("inlineCode",{parentName:"a"},"bool")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#string"},(0,r.kt)("inlineCode",{parentName:"a"},"string"))),(0,r.kt)("h2",{id:"position"},"position"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"position")," ( ",(0,r.kt)("em",{parentName:"p"},"find")," : string , ",(0,r.kt)("em",{parentName:"p"},"aString")," : string , ",(0,r.kt)("em",{parentName:"p"},"start")," : integer {, ","*","} ) : integer ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},"position")," ( ",(0,r.kt)("em",{parentName:"p"},"find")," : string , ",(0,r.kt)("em",{parentName:"p"},"aString")," : string , ",(0,r.kt)("em",{parentName:"p"},"start")," : integer , ",(0,r.kt)("em",{parentName:"p"},"lengthFound ")," : integer {, ","*","} ) : integer ",(0,r.kt)("br",null),(0,r.kt)("strong",{parentName:"p"},"position")," ( ",(0,r.kt)("em",{parentName:"p"},"find")," : string , ",(0,r.kt)("em",{parentName:"p"},"aString")," : string , ",(0,r.kt)("em",{parentName:"p"},"start")," : integer , ",(0,r.kt)("em",{parentName:"p"},"lengthFound")," : integer , ",(0,r.kt)("em",{parentName:"p"},"options")," : integer ) : integer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"find"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String to find")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"aString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String in which to search")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"start"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Position in string where search will start")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lengthFound"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Length of string found")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"If passed: evaluation based on character codes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Search condition(s)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Position of first occurrence")))),(0,r.kt)("h4",{id:"description-12"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," returns the position of the first occurrence of ",(0,r.kt)("em",{parentName:"p"},"find")," in ",(0,r.kt)("em",{parentName:"p"},"aString"),". "),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"aString")," does not contain ",(0,r.kt)("em",{parentName:"p"},"find"),", it returns a zero (0).   "),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," locates an occurrence of ",(0,r.kt)("em",{parentName:"p"},"find"),", it returns the position of the first character of the occurrence in ",(0,r.kt)("em",{parentName:"p"},"aString"),"."),(0,r.kt)("p",null,"If you ask for the position of an empty string within an empty string, ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," returns zero (0). "),(0,r.kt)("p",null,"By default, the search begins at the first character of ",(0,r.kt)("em",{parentName:"p"},"aString"),". The ",(0,r.kt)("em",{parentName:"p"},"start")," parameter can be used to specify the character where the search will begin in ",(0,r.kt)("em",{parentName:"p"},"aString"),". "),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"lengthFound")," parameter, returns the length of the string actually found by the search. This parameter is necessary to be able to correctly manage letters that can be written using one or more characters (e.g.: \xe6 and ae, \xdf and ss, etc.).\nIf the ",(0,r.kt)("em",{parentName:"p"}," parameter is passed (see below), these letters are not considered as equivalent (\xe6 # ae); in this mode, "),"lengthFound",(0,r.kt)("em",{parentName:"p"}," is always equal to the length of "),"find* (if an occurrence is found). "),(0,r.kt)("p",null,'By default, the command makes global comparisons that take linguistic particularities and letters that may be written with one or more characters (for example \xe6 = ae) into account. On the other hand, it is not diacritical (a = A, a = \xe0 and so on) and does not take "ignorable" characters into account (Unicode specification). Ignorable characters include all characters in unicode C0 Control subset (U+0000 to U+001F, ascii character control set) except printable ones (U+0009 TAB, U+0010 LF, U+0011 VT, U+0012 FF and U+0013 CR). '),(0,r.kt)("p",null,"To modify this functioning, you can pass: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"first syntax (",(0,r.kt)("inlineCode",{parentName:"p"},"*")," parameter): In this case, comparisons will be based on character codes. You must pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," parameter:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you want to take special characters into account, used for example as delimiters (",(0,r.kt)("inlineCode",{parentName:"p"},"Char(1)"),", etc.)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If the evaluation of characters must be case sensitive and take accented characters into account (",(0,r.kt)("inlineCode",{parentName:"p"},"a#A"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"a#\xe0")," and so on). Note that in this mode, the evaluation does not handle variations in the way words are written."),(0,r.kt)("admonition",{parentName:"li",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In certain cases, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," parameter can significantly accelerate the execution of the command. "))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"second syntax (",(0,r.kt)("inlineCode",{parentName:"p"},"options")," parameter): one or a combination of the following constants:"))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Constant"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kCaseInsensitive"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,'Strings are compared according to the current data language with no consideration of capitalization differences. Note that diacritical marks are taken into consideration. For example, "A" is considered the same as "a", however',"\xa0",'"a" is not considered the same as "',"\xe0",'" .',"\xa0","By default, Qodly string comparison is case insensitive.","\xa0"),(0,r.kt)("p",null,"Can be combined with:","\xa0"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCharCodes")," OR ",(0,r.kt)("u",null,"kDiacriticInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kWholeWord"))),(0,r.kt)("p",null,"This constant implies the use of the following constants (which can also be combined for improved readability):"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kKanaInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kWidthInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kStrict"))))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kCharCodes"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,"Strings are compared according to character codes. Current data language settings are not taken into account during the comparison.","\xa0"),(0,r.kt)("p",null,"Can be combined with: ",(0,r.kt)("u",null,"kCaseInsensitive")),(0,r.kt)("p",null,'Only for "a-z" or "A-Z" ranges. (e.g., Alpha = alpha, but Alpha # ',"\xe2","lph","\xe0",")"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kDiacriticInsensitive"),(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,'Strings are compared according to the current data language, however the diacritical mark (e.g., accent or symbol) of letters is ignored. For example, "a" is considered the same as "',"\xe0",'".',"\xa0"),(0,r.kt)("p",null,"Can be combined with:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCaseInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kWholeWord"))),(0,r.kt)("p",null,"This constant implies the use of the following constants (which can also be combined for improved readability):"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kKanaInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kWidthInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kStrict"))))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kKanaInsensitive"),(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,"For Japanese language. Controls the distinction between Hiragana and Katakana syllables.","\xa0",'From a semantic point of view, the difference between Hiragana and Katakana is usually significant, but to capture as many results as possible, the default mode in Qodly is to ignore the difference (kana insensitive). For example, "\u3042" is considered the same as "\u30a2".',"\xa0","The",(0,r.kt)("span",null,"\xa0"),(0,r.kt)("u",null,"kStrict"),(0,r.kt)("span",null,"\xa0"),"option performs a kana sensitive comparison.",(0,r.kt)("span",null,"\xa0"),(0,r.kt)("span",null,"kKanaInsensitive"),(0,r.kt)("span",null,"\xa0"),"can be used to partially relax the rule to be kana insensitive.","\xa0"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"Note:"),(0,r.kt)("span",null,"\xa0"),"The data language must be set to Japanese to use this option. For all other languages, the option is ignored and",(0,r.kt)("span",null,"\xa0"),(0,r.kt)("a",{parentName:"td",href:"#comparestrings"},(0,r.kt)("inlineCode",{parentName:"a"},"compareStrings")),(0,r.kt)("span",null,"\xa0"),"will work as if",(0,r.kt)("span",null,"\xa0"),(0,r.kt)("u",null,"kStrict"),"\xa0","was specified. In other words, setting this option in a non-Japanese context would actually make the comparison kana sensitive (the opposite effect)."),(0,r.kt)("p",null,"Can be combined with:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCaseInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kDiacriticInsensitive"))))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kStrict"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,"Strings are compared for exact matches according to the current data language.","\xa0","In most cases, capitalization and diacritical marks of letters are taken into account during the comparison.","\xa0"),(0,r.kt)("p",null,"Can be combined with:"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCaseInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kDiacriticInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kKanaInsensitive"))),(0,r.kt)("p",null,"This constant implies the use of the following constant (which can also be combined for improved readability):"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kWidthInsensitive"))))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kWholeWord"),(0,r.kt)("td",{parentName:"tr",align:"left"},"32"),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("p",null,'Strings are compared according to the current data language. Only strings that are complete words are considered. Matching strings within other strings are not considered. For example, "where" is not considered when found within "somewhere".'),(0,r.kt)("p",null,"Can be combined with:","\xa0"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("u",null,"kCaseInsensitive")),(0,r.kt)("li",null,(0,r.kt)("u",null,"kDiacriticInsensitive"))))))),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You cannot use the @ wildcard character with ",(0,r.kt)("inlineCode",{parentName:"p"},"position"),'. For example, if you pass "',(0,r.kt)("em",{parentName:"p"},"abc@"),'" in ',(0,r.kt)("em",{parentName:"p"},"find"),', the command will actually evaluate the "',(0,r.kt)("em",{parentName:"p"},"abc@"),'" string and not an "abc" plus any character.')),(0,r.kt)("h4",{id:"example-1-6"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var length, vlResult : integer\n var vtText1, vtText2  : string\n vlResult = position("ll","Willow") // vlResult gets 3\n vlResult = position(vtText1,vtText2) // Returns first occurrence of vtText1 in vtText2\n vlResult = position("day","Today is the first day",1) // vlResult gets 3\n vlResult = position("day","Today is the first day",4) // vlResult gets 20\n vlResult = position("DAY","Today is the first day",1,*) // vlResult gets 0\n \n vlResult = position("\u0153","B\u0153uf",1,length) // vlResult  = 2, length = 1\n\n')),(0,r.kt)("h4",{id:"example-2-5"},"Example 2"),(0,r.kt)("p",null,"In the following example, the ",(0,r.kt)("em",{parentName:"p"},"lengthFound"),' parameter can be used to search for all the occurrences of "aegis" in a text, regardless of how it is written:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var start, lengthfound, vlResult : integer\n var myText : string\n start = 1\n repeat\n    vlResult = position("aegis",myText,start,lengthfound)\n    start = start+lengthfound\n until(vlResult == 0)\n\n')),(0,r.kt)("h4",{id:"example-3-1"},"Example 3"),(0,r.kt)("p",null,"In the following example, you want to find all instances of a string and replace it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var lengthFound, find, replace, option, p  : integer\n var myText : string\n myText = "Hello Joelle et joel!"\n find = "joel"\n replace = "Jo\xebl"\n option = kCaseInsensitive+kDiacriticInsensitive\n \n p = 0\n repeat\n    p = position(find,myText,p+1,lengthFound,option)\n    if(p>0)\n       myText = substring(myText,1,p-1)+replace+substring(myText,p+lengthFound)\n    end\n until(p  <= 0) //result: myText -> Hello Jo\xeblle and Jo\xebl!\n\n')),(0,r.kt)("h4",{id:"see-also-10"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#comparestrings"},(0,r.kt)("inlineCode",{parentName:"a"},"compareStrings")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#substring"},(0,r.kt)("inlineCode",{parentName:"a"},"substring"))),(0,r.kt)("h2",{id:"replacestring"},"replaceString"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"replaceString")," ( ",(0,r.kt)("em",{parentName:"p"},"source")," : string , ",(0,r.kt)("em",{parentName:"p"},"oldString")," : string , ",(0,r.kt)("em",{parentName:"p"},"newString")," : string , ",(0,r.kt)("em",{parentName:"p"},"howMany")," : integer {, ","*","}) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Original string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"oldString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Characters to replace")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Replacement string (if empty string, occurrences are deleted)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"howMany"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"How many times to replace If omitted, all occurrences are replaced")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"If passed: evaluation based on character codes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Resulting string")))),(0,r.kt)("h4",{id:"description-13"},"Description"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"replaceString")," replaces ",(0,r.kt)("em",{parentName:"p"},"howMany")," occurrences of ",(0,r.kt)("em",{parentName:"p"},"oldString")," in ",(0,r.kt)("em",{parentName:"p"},"source")," with ",(0,r.kt)("em",{parentName:"p"},"newString"),". "),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"newString"),' is an empty string (""), ',(0,r.kt)("inlineCode",{parentName:"p"},"replaceString")," deletes each occurrence of ",(0,r.kt)("em",{parentName:"p"},"oldString")," in ",(0,r.kt)("em",{parentName:"p"},"source"),"."),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"howMany")," is specified, ",(0,r.kt)("inlineCode",{parentName:"p"},"replaceString")," will replace only the number of occurrences of ",(0,r.kt)("em",{parentName:"p"},"oldString")," specified, starting at the first character of ",(0,r.kt)("em",{parentName:"p"},"source"),". If ",(0,r.kt)("em",{parentName:"p"},"howMany")," is not specified, then all occurrences of ",(0,r.kt)("em",{parentName:"p"},"oldString")," are replaced."),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"oldString")," is an empty string, ",(0,r.kt)("inlineCode",{parentName:"p"},"replaceString")," returns the unchanged ",(0,r.kt)("em",{parentName:"p"},"source"),"."),(0,r.kt)("p",null,'By default, the command makes global comparisons that take linguistic particularities and letters that may be written with one or more characters (for example \xe6 = ae) into account. On the other hand, it is not diacritical (a = A, a = \xe0 and so on) and does not take "ignorable" characters such as characters whose code < 9 into account (Unicode specification).'),(0,r.kt)("p",null,"To modify this functioning, pass the asterisk ",(0,r.kt)("em",{parentName:"p"}," as the last parameter. In this case, comparisons will be based on character codes. You must pass the ")," parameter:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you want to replace special characters, used for example as delimiters (",(0,r.kt)("inlineCode",{parentName:"li"},"Char(1)"),", etc.),"),(0,r.kt)("li",{parentName:"ul"},"If the replacement of characters must be case sensitive and take accented characters into account (a#A, a#\xe0 and so on).\nNote that in this mode, the evaluation does not handle variations in the way words are written.")),(0,r.kt)("h4",{id:"example-1-7"},"Example 1"),(0,r.kt)("p",null,"The following example illustrates the use of ",(0,r.kt)("inlineCode",{parentName:"p"},"replaceString"),". The results, described in the comments, are assigned to the variable ",(0,r.kt)("em",{parentName:"p"},"vtResult"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var vtResult, vtOtherVar : string\n vtResult = replaceString("Willow"," ll","d") // Result gets "Widow"\n vtResult = replaceString("Shout","o","") // Result gets "Shut"\n vtResult = replaceString(vtOtherVar,Char(Tab),",",*) // Replaces all tabs in vtOtherVar with commas\n\n')),(0,r.kt)("h4",{id:"example-2-6"},"Example 2"),(0,r.kt)("p",null,"The following example eliminates CRs and TABs from the text in ",(0,r.kt)("em",{parentName:"p"},"vtResult"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var vtResult : string\n vtResult = replaceString(replaceString(vtResult,Char(Carriage return),"",*),Char(Tab),"",*)\n\n')),(0,r.kt)("h4",{id:"example-3-2"},"Example 3"),(0,r.kt)("p",null,"The following example illustrates the use of the * parameter in the case of a diacritical evaluation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var vtResult : string\n vtResult = replaceString("Cr\xe8me br\xfbl\xe9e","Brulee","caramel") //Result gets "Cr\xe8me caramel"\n vtResult = replaceString("Cr\xe8me br\xfbl\xe9e","Brulee","caramel",*) //Result gets "Cr\xe8me br\xfbl\xe9e"\n\n')),(0,r.kt)("h4",{id:"see-also-11"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#changestring"},(0,r.kt)("inlineCode",{parentName:"a"},"changeString")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#deletestring"},(0,r.kt)("inlineCode",{parentName:"a"},"deleteString")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#insertstring"},(0,r.kt)("inlineCode",{parentName:"a"},"insertString"))),(0,r.kt)("h2",{id:"splitstring"},"splitString"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"splitString")," ( ",(0,r.kt)("em",{parentName:"p"},"stringToSplit")," : string , ",(0,r.kt)("em",{parentName:"p"},"separator")," : string {, ",(0,r.kt)("em",{parentName:"p"},"options")," : integer }) : collection "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stringToSplit"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"separator"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},'String at which stringToSplit splits. If empty string (""), each character of stringToSplit is a substring')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Option(s) regarding empty strings and spaces")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"collection"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Collection of substrings")))),(0,r.kt)("h4",{id:"description-14"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"splitString")," command returns a collection of strings, created by splitting ",(0,r.kt)("em",{parentName:"p"},"stringToSplit")," into substrings at the boundaries specified by the ",(0,r.kt)("em",{parentName:"p"},"separator")," parameter. The substrings in the returned collection do not include ",(0,r.kt)("em",{parentName:"p"},"separator")," itself."),(0,r.kt)("p",null,"If no ",(0,r.kt)("em",{parentName:"p"},"separator")," is found in ",(0,r.kt)("em",{parentName:"p"},"stringToSplit"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"splitString")," returns a collection containing a single element, ",(0,r.kt)("em",{parentName:"p"},"stringToSplit"),". If you passed an empty string in ",(0,r.kt)("em",{parentName:"p"},"separator"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"splitString")," returns a collection of each character of ",(0,r.kt)("em",{parentName:"p"},"stringToSplit"),"."),(0,r.kt)("p",null,"In the ",(0,r.kt)("em",{parentName:"p"},"options")," parameter, you can pass one or a combination of the following constants:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Constant"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Comment"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"kIgnoreEmptyStrings"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Remove empty strings from the resulting collection (they are ignored)"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"kTrimSpaces"),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Trim space characters at the beginning and end of substrings"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h4",{id:"example-1-8"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var myText : string\n var myCol : collection \n col = newCollection\n \n myText = "John,Doe,120 jefferson st.,Riverside,, NJ, 08075"\n myCol = splitString(myText,",") //["John","Doe","120 jefferson st.","Riverside",""," NJ"," 08075"]\n myCol = splitString(myText,",",kIgnoreEmptyStrings) //["John","Doe","120 jefferson st.","Riverside"," NJ"," 08075"]\n myCol = splitString(myText,",",kIgnoreEmptyStrings+kTrimSpaces) //["John","Doe","120 jefferson st.","Riverside","NJ","08075"]\n \n')),(0,r.kt)("h4",{id:"example-2-7"},"Example 2"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"separator")," parameter can be a multiple-character string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var myText : string\n var myCol : collection\n myText = "Name<tab>Smith<tab>age<tab>40"\n myCol = splitString(myText,"<tab>")\n  //myCol = ["Name","Smith","age","40"]\n \n')),(0,r.kt)("h4",{id:"see-also-12"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#collection.join"},(0,r.kt)("inlineCode",{parentName:"a"},"collection.join()")),(0,r.kt)("br",null)),(0,r.kt)("h2",{id:"string"},"string"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"string")," ( ",(0,r.kt)("em",{parentName:"p"},"expression")," : any { , ",(0,r.kt)("em",{parentName:"p"},"format")," : integer { , ",(0,r.kt)("em",{parentName:"p"},"addTime")," : time }} ) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expression"),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Expression for which to return the string form (can be number, integer, date, time, string, boolean, undefined, or null)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"format"),(0,r.kt)("td",{parentName:"tr",align:null},"string, integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Display format")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"addTime"),(0,r.kt)("td",{parentName:"tr",align:null},"time"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Time to add on if expression is a date")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"String form of the expression")))),(0,r.kt)("h4",{id:"description-15"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," command  returns the string form of the numeric, date, time, string or boolean expression you pass in ",(0,r.kt)("em",{parentName:"p"},"expression"),". "),(0,r.kt)("p",null,"If you do not pass the optional ",(0,r.kt)("em",{parentName:"p"},"format")," parameter, the string is returned with the appropriate default format. If you pass ",(0,r.kt)("em",{parentName:"p"},"format"),", you can force the result string to be of a specific format."),(0,r.kt)("p",null,"The optional ",(0,r.kt)("em",{parentName:"p"},"addTime")," parameter adds a time to a date in a combined format. It can only be used when the ",(0,r.kt)("em",{parentName:"p"},"expression")," parameter is a date (see below)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Numeric Expressions")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"expression")," is a numeric expression (number or integer), you can pass an optional string ",(0,r.kt)("em",{parentName:"p"},"format"),". Following are some examples:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Example"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Result"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Comments"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"string(2^15)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"32768"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Default format")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(2^15;"###,##0 Inhabitants")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"32,768 Inhabitants"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(1/3;"##0.00000")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"0.33333"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"string(1/3)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0.3333333333333"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Default format")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"string(Arctan(1)*4)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"3.14159265359"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Default format")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(Arctan(1)*4;"##0.00")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"3.14"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(-1;"&x")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"0xFFFFFFFF"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(-1;"&$")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"$FFFFFFFF"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(0 ?+ 7;"&x")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"0x0080"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(0 ?+ 7;"&$")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"$80"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(0 ?+ 14;"&x")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"0x4000"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(0 ?+ 14;"&$")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"$4000"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(50.3;"&xml")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"50.3"),(0,r.kt)("td",{parentName:"tr",align:"left"},'Always "." as decimal separator')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(num(1 = 1);"True;;False")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"True"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'string(num(1 = 2);"True;;False")'),(0,r.kt)("td",{parentName:"tr",align:"left"},"False"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"string(log(-1))"),(0,r.kt)("td",{parentName:"tr",align:"left"}),(0,r.kt)("td",{parentName:"tr",align:"left"},"Undefined number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"string(1/0)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"INF"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Positive infinite number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"string(-1/0)"),(0,r.kt)("td",{parentName:"tr",align:"left"},"-INF"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Negative infinite number")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Date Expressions")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"expression")," is a date expression, the string is returned using the default format specified in the system.\nIn the ",(0,r.kt)("em",{parentName:"p"},"format")," parameter, you can pass one of the constants described below."),(0,r.kt)("p",null,"In this case, you can also pass a time in the ",(0,r.kt)("em",{parentName:"p"},"addTime")," parameter. This parameter lets you combine a date with a time so that you can generate time stamps in compliance with current standards (",(0,r.kt)("inlineCode",{parentName:"p"},"kISODateGMT")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"kDateRFC1123")," constants). These formats are particularly useful in the context of XML and Web processing. The ",(0,r.kt)("em",{parentName:"p"},"addTime")," parameter can only be used when the ",(0,r.kt)("em",{parentName:"p"},"expression")," parameter is a date. "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Constant"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kBlankIfNullDate"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"100"),(0,r.kt)("td",{parentName:"tr",align:"left"},"- instead of 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kDateRFC1123"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kInternalDateAbbreviated"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Feb 18, 2023")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kInternalDateLong"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"February 18, 2023")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kInternalDateShort"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"02/18/2023")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kInternalDateShortSpecial"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"02/18/23 (but 02/18/1896 or 02/18/2096)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kISODate"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2023-02-18T00:00:00")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kISODateGMT"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2023-02-18T16:11:53Z")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kSystemDateAbbreviated"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Sat, February 18, 2023")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kSystemDateLong"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Saturday, February 18, 2023")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kSystemDateShort"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"02/18/2023")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Formats can vary depending on system settings.")),(0,r.kt)("p",null,"Here are a few examples of simple formats (assuming that the current date is 02/18/2023):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var vtResult : string\n vsResult = string(currentDate) //vsResult gets "02/18/23"\n vsResult = string(currentDate,kInternalDateLong) // vsResult gets "February 18, 2023"\n vsResult = string(currentDate,kISODateGMT) // vsResult gets "2023-02-18T00:00:00" in France\n\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notes for combined date/time formats:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"kISODateGMT")," format corresponds to the ISO8601 standard, containing a date and a time expressed with respect to the time zone (GMT)."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},' ```qs\n var mydate : string\n mydate = string(currentDate,kISODateGMT,currentTime) // returns, for instance, 2023-02-18T16:11:53Z\n\n```\n\nNote that the "Z" character at the end indicates the GMT format.\n')),(0,r.kt)("p",{parentName:"li"},"If you do not pass the ",(0,r.kt)("em",{parentName:"p"},"addTime")," parameter, the command returns the date at midnight (local time) expressed in GMT time, which may cause the date to be moved forward or back depending on the local time zone:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"```qs\n var mydate : string\n mydate = string(!18/02/2023!,kISODateGMT) // returns 2023-02-17T22:00:00Z in France\n\n```\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"kISODate")," format is similar to the ",(0,r.kt)("inlineCode",{parentName:"p"},"kISODateGMT"),", except that it expresses the date and time without respect to the time zone. Note that since this format does not comply with the ISO8601 standard, its use should be reserved for very specific purposes."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-qs"}," var mydate : string\n mydate = string(!18/02/2023!,kISODate) // returns 2023-02-18T00:00:00 regardless of the time zone\n   mydate = string(currentDate,kISODate,currentTime) // returns 2023-02-18T18:11:53\n\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"kDateRFC1123")," format formats a date/time combination according to the standard defined by RFC 822 and 1123. You need this format for example to set the expiration date for cookies in an HTTP header."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-qs"}," var mydate : string\n mydate = string(currentDate,kDateRFC1123,currentTime) // returns, for example Sat, 18 Feb 2023 13:07:20 GMT\n\n")),(0,r.kt)("p",{parentName:"li"},"The time expressed takes the time zone into account (GMT zone). If you only pass a date, the command returns the date at midnight (local time) expressed in GMT time which may cause the date to be moved forward or back depending on the local time zone:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-qs"}," var mydate : string\n mydate = string(currentDate,kDateRFC1123) // returns Fri, 17 Feb 2023 22:00:00 GMT\n\n")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Time Expressions")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"expression")," is a time expression, the string is returned using the default ",(0,r.kt)("strong",{parentName:"p"},"HH:MM:SS")," format. In the format parameter, you can pass one of the following constants:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Constant"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kBlankIfNullTime"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"100"),(0,r.kt)("td",{parentName:"tr",align:"left"},"instead of 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kHHMM"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2"),(0,r.kt)("td",{parentName:"tr",align:"left"},"01:02")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kHHMMAMPM"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"5"),(0,r.kt)("td",{parentName:"tr",align:"left"},"01:02")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kHHMMSS"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"01:02:03")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kHourMin"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 hour 2 minutes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kHourMinSec"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1 hour 2 minutes 3 seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kISOTime"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"8"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0000-00-00T01:02:03")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kMinSec"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"7"),(0,r.kt)("td",{parentName:"tr",align:"left"},"62 minutes 3 seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kMMSS"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"6"),(0,r.kt)("td",{parentName:"tr",align:"left"},"62:03:00")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kSystemTimeLong"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"11"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1:02:03 AM HNEC (Mac only)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kSystemTimeLongAbbreviated"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"10"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1\u202202\u202203 AM (Mac only)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kSystemTimeShort"),(0,r.kt)("td",{parentName:"tr",align:"left"},"integer"),(0,r.kt)("td",{parentName:"tr",align:"left"},"9"),(0,r.kt)("td",{parentName:"tr",align:"left"},"01:02:03")))),(0,r.kt)("p",null,"Notes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"kISOTime")," format corresponds to the ISO8601 standard and contains, in theory, a date and a time. Since this format does not support combined dates/times; the date part is filled with 0s. This format expresses the local time."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"kBlankIfNullTime")," constant must be added to the format; it indicates that in the case of a null value, Qodly must return an empty string instead of zeros.")),(0,r.kt)("p",null,"These examples assume that the current time is 5:30 PM and 45 seconds:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},'     var vsResult : string\n     vsResult = string(currentTime) // vsResult gets "17:30:45"\n     vsResult = string(currentTime,kHourMinSec) // vsResult gets "17 hours 30 minutes 45 seconds"\n    \n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"String Expressions")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"expression")," is of the string type, the command returns the same value as the one passed in the parameter. This can be useful more particularly in generic programming using pointers.\nIn this case, the ",(0,r.kt)("em",{parentName:"p"},"format")," parameter, if passed, is ignored."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Boolean Expressions")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"expression")," is of the boolean type, the command returns the string \u201cTrue\u201d or \u201cFalse\u201d.\nIn this case, the ",(0,r.kt)("em",{parentName:"p"},"format")," parameter, if passed, is ignored."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Undefined Expressions")," "),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"expression")," is evaluated to undefined, the command returns an empty string. This is useful when you expect the result of an expression (e.g. an object attribute) to be a string, even if it can be undefined."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Null Expressions")),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"expression"),' is evaluated to null, the command returns the "null" string. This is useful when you expect the result of an expression (e.g. an object attribute) to be a string, even if it can be null.'),(0,r.kt)("h4",{id:"see-also-13"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#bool"},(0,r.kt)("inlineCode",{parentName:"a"},"bool")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#date"},(0,r.kt)("inlineCode",{parentName:"a"},"date")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#num"},(0,r.kt)("inlineCode",{parentName:"a"},"num")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#timestring"},(0,r.kt)("inlineCode",{parentName:"a"},"timeString")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"#timestamp"},(0,r.kt)("inlineCode",{parentName:"a"},"timeStamp"))),(0,r.kt)("h2",{id:"substring"},"substring"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"substring")," ( ",(0,r.kt)("em",{parentName:"p"},"source")," : string , ",(0,r.kt)("em",{parentName:"p"},"firstChar")," : integer , ",(0,r.kt)("em",{parentName:"p"},"numChars")," : integer ) : string "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String from which to get substring")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"firstChar"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Position of first character")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"numChars"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of characters to get")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Substring of source")))),(0,r.kt)("h4",{id:"description-16"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"substring")," command returns the portion of source defined by ",(0,r.kt)("em",{parentName:"p"},"firstChar")," and ",(0,r.kt)("em",{parentName:"p"},"numChars"),". "),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"firstChar")," parameter points to the first character in the string to return, and ",(0,r.kt)("em",{parentName:"p"},"numChars")," specifies how many characters to return."),(0,r.kt)("p",null,"If ",(0,r.kt)("em",{parentName:"p"},"firstChar")," plus ",(0,r.kt)("em",{parentName:"p"},"numChars")," is greater than the number of characters in the string, or if ",(0,r.kt)("em",{parentName:"p"},"numChars")," is not specified, ",(0,r.kt)("inlineCode",{parentName:"p"},"substring")," returns the last character(s) in the string, starting with the character specified by ",(0,r.kt)("em",{parentName:"p"},"firstChar"),". If ",(0,r.kt)("em",{parentName:"p"},"firstChar")," is greater than the number of characters in the string, ",(0,r.kt)("inlineCode",{parentName:"p"},"substring"),' returns an empty string ("").'),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"When you use this command in a multi-style context, you need to convert any Window end-of-line characters ('\\r\\n') into single ('\\r') characters in order for processing to be valid. This is due to the mechanism which normalizes Qodly line endings to ensure multi-platform compatibility for texts.")),(0,r.kt)("h4",{id:"example-7"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var vsResult : string\n vsResult = substring("08/04/62",4,2) // vsResult gets "04"\n vsResult = substring("Emergency",1,6) // vsResult gets "Emerge"\n vsResult = substring(var,2) // vsResult gets all characters except the first\n \n')),(0,r.kt)("h4",{id:"see-also-14"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#position"},(0,r.kt)("inlineCode",{parentName:"a"},"position"))),(0,r.kt)("h2",{id:"uppercase"},"uppercase"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"uppercase")," ( ",(0,r.kt)("em",{parentName:"p"},"aString")," : string {, ","*","} ) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"aString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"String to convert to uppercase")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"If passed: keep accents")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"String in uppercase")))),(0,r.kt)("h4",{id:"description-17"},"Description"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"uppercase")," takes ",(0,r.kt)("em",{parentName:"p"},"aString")," and returns the string with all alphabetic characters in uppercase.. "),(0,r.kt)("p",null,"The optional ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," parameter, if passed, indicates that any accented characters present in ",(0,r.kt)("em",{parentName:"p"},"aString")," must be returned as accented uppercase characters. By default, when this parameter is omitted, accented characters \u201close\u201d their accents after the conversion is carried out."),(0,r.kt)("h4",{id:"example-1-9"},"Example 1"),(0,r.kt)("p",null,"This example compares the results obtained according to whether or not the * parameter has been passed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var thestring : string \n thestring = uppercase("h\xe9l\xe8ne") // thestring is "HELENE"\n thestring = uppercase("h\xe9l\xe8ne",*) // thestring is "H\xc9L\xc8NE"\n\n')),(0,r.kt)("h4",{id:"example-2-8"},"Example 2"),(0,r.kt)("p",null,"See the example for ",(0,r.kt)("a",{parentName:"p",href:"#lowercase"},(0,r.kt)("inlineCode",{parentName:"a"},"lowercase")),"."),(0,r.kt)("h4",{id:"see-also-15"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#lowercase"},(0,r.kt)("inlineCode",{parentName:"a"},"lowercase"))))}k.isMDXComponent=!0}}]);