"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([["75442"],{54301:function(e,n,s){s.r(n),s.d(n,{metadata:()=>t,contentTitle:()=>o,default:()=>h,assets:()=>c,toc:()=>l,frontMatter:()=>i});var t=JSON.parse('{"id":"language/basics/lang-object","title":"Object","description":"Variables, attributes or expressions of the object type can contain various types of data. The structure of QodlyScript objects is based on the classic principle of \\"property/value\\" pairs. The syntax of these objects is based on JSON notation:","source":"@site/versioned_docs/version-1.0.0/language/basics/lang-object.md","sourceDirName":"language/basics","slug":"/language/basics/lang-object","permalink":"/docs/1.0.0/language/basics/lang-object","draft":false,"unlisted":false,"editUrl":"https://github.com/qodly/docs/issues/new?title=Comment%20on%20language%2Fbasics%2Flang-object.md%20(1.0.0)&body=Share%20any%20feedback%20about%20this%20page%20%E2%80%94%20report%20issues%2C%20suggest%20improvements%2C%20or%20tell%20us%20what%E2%80%99s%20helpful.%0A%0AIf%20it%E2%80%99s%20an%20issue%3A%0A-%20What%E2%80%99s%20the%20issue%3F%20(e.g.%2C%20typo%2C%20incorrect%20information%2C%20unclear%20explanation)%0A-%20Where%20is%20it%3F%20(e.g.%2C%20section%20name%2C%20specific%20paragraph%2C%20or%20line)%0A%0AThank%20you%20for%20helping%20us%20improve!%20%F0%9F%9A%80%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20","tags":[],"version":"1.0.0","frontMatter":{"id":"lang-object","title":"Object"},"sidebar":"Develop","previous":{"title":"Numeric","permalink":"/docs/1.0.0/language/basics/lang-number"},"next":{"title":"Picture","permalink":"/docs/1.0.0/language/basics/lang-picture"}}'),r=s("85893"),a=s("50065");let i={id:"lang-object",title:"Object"},o=void 0,c={},l=[{value:"Instantiation",id:"instantiation",level:2},{value:"<code>newObject</code> command",id:"newobject-command",level:3},{value:"<code>{}</code> operator",id:"-operator",level:3},{value:"Regular or shared object",id:"regular-or-shared-object",level:3},{value:"Syntax basics",id:"syntax-basics",level:2},{value:"Object properties",id:"object-properties",level:3},{value:"Null value",id:"null-value",level:3},{value:"Undefined value",id:"undefined-value",level:3},{value:"Object operators",id:"object-operators",level:2},{value:"Examples",id:"examples",level:2}];function d(e){let n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:'Variables, attributes or expressions of the object type can contain various types of data. The structure of QodlyScript objects is based on the classic principle of "property/value" pairs. The syntax of these objects is based on JSON notation:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:['A property name is always a text, for example "Name". It must follow ',(0,r.jsx)(n.a,{href:"/docs/1.0.0/language/basics/lang-identifiers#object-properties",children:"specific rules"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"A property value can be of the following type:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"number (number, integer)"}),"\n",(0,r.jsx)(n.li,{children:"string"}),"\n",(0,r.jsx)(n.li,{children:"null"}),"\n",(0,r.jsx)(n.li,{children:"boolean"}),"\n",(0,r.jsx)(n.li,{children:"date (date type or ISO date format string)"}),"\n",(0,r.jsx)(n.li,{children:"object(1) (objects can be nested on several levels)"}),"\n",(0,r.jsx)(n.li,{children:"picture(2)"}),"\n",(0,r.jsx)(n.li,{children:"collection"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["(1) ORDA objects such as ",(0,r.jsx)(n.a,{href:"/docs/1.0.0/guides/data-model-objects#entity",children:"entities"})," or ",(0,r.jsx)(n.a,{href:"/docs/1.0.0/guides/data-model-objects#entity-selection",children:"entity selections"})," cannot be stored in ",(0,r.jsx)(n.strong,{children:"attributes of the object type"}),"; however, they are fully supported in ",(0,r.jsx)(n.strong,{children:"object variables"}),"."]}),"\n",(0,r.jsx)(n.p,{children:'(2) When exposed as text in the debugger or exported to JSON, picture object properties print "[object Picture]".'}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Attribute names are case-sensitive."})}),"\n",(0,r.jsxs)(n.p,{children:["You manage object type variables, attributes or expressions using the ",(0,r.jsx)(n.a,{href:"#syntax-basics",children:"object notation"})," or the commands such as ",(0,r.jsx)(n.code,{children:"instanceOf"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Each property value accessed through the object notation is considered an expression. You can use such values wherever expressions are expected."}),"\n",(0,r.jsx)(n.h2,{id:"instantiation",children:"Instantiation"}),"\n",(0,r.jsx)(n.p,{children:"Objects must have been instantiated, otherwise trying to read or modify their properties will generate a syntax error."}),"\n",(0,r.jsx)(n.p,{children:"Object instantiation can be done in one of the following ways:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["using the ",(0,r.jsx)(n.a,{href:"/docs/1.0.0/language/commands/newObject",children:(0,r.jsx)(n.code,{children:"newObject"})})," command,"]}),"\n",(0,r.jsxs)(n.li,{children:["using the ",(0,r.jsx)(n.code,{children:"{}"})," operator."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Several commands and functions return objects, for example ",(0,r.jsx)(n.a,{href:"/docs/1.0.0/language/commands/jsonParse",children:(0,r.jsx)(n.code,{children:"jsonParse"})})," or ",(0,r.jsx)(n.a,{href:"../commands/file",children:(0,r.jsx)(n.code,{children:"file"})}),". In this case, it is not necessary to instantiate the object explicitly, the QodlyScript language does it for you."]})}),"\n",(0,r.jsxs)(n.h3,{id:"newobject-command",children:[(0,r.jsx)(n.code,{children:"newObject"})," command"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/docs/1.0.0/language/commands/newObject",children:(0,r.jsx)(n.code,{children:"newObject"})})," command creates a new empty or prefilled object and returns its reference."]}),"\n",(0,r.jsx)(n.p,{children:"Examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:' var obVar : object //declaration of an object type variable\n obVar = newObject //instantiation and assignment to the variable\n\n var obFilled : object\n obFilled = newObject("name","Smith","age",42) //instantiation and assignment of a prefilled object\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"-operator",children:[(0,r.jsx)(n.code,{children:"{}"})," operator"]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"{}"})," operator allows you to create an ",(0,r.jsx)(n.strong,{children:"object literal"}),". An object literal is a semi-column separated list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (",(0,r.jsx)(n.code,{children:"{}"}),"). The object literal syntax creates empty or filled objects."]}),"\n",(0,r.jsxs)(n.p,{children:["Since any property value is considered an expression, you can create sub-objects using ",(0,r.jsx)(n.code,{children:"{}"})," in property values. You can also create and reference ",(0,r.jsx)(n.strong,{children:"collection literals"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:' var o, o2, o3 : object //declaration of object variables\n o = {} // instantiation of an empty object\n o2 = {a: "foo", b: 42, c: {}, d: (toto) ? true : false \\} // instantiation of an object\n    // with properties {"a":"foo","b":42,"c":{},"d":false})\n\n    // same properties using variables\n var a : string\n var b : integer\n var c : object\n a = "foo"\n b = 42\n c = {}\n o3 = { a:a, b:b, c:c } // {"a":"foo",b":42,"c":{}}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can mix the ",(0,r.jsx)(n.code,{children:"newObject"})," and literal syntaxes:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:'var o : object\nvar result : string\no = {\\\n    ob1: {age: 42}, \\\n    ob2: newObject("message", "Hello"), \\\n    form1: formula(return this.ob1.age+10), \\\n    form2 : formula(return $1+" World")), \\\n    col: [1, 2, 3, 4, 5, 6]\\\n    }\n\no.form1()  //52\nresult = o.form2(o.ob2.message)  // Hello World\ncol = o.col[5] //6\n'})}),"\n",(0,r.jsx)(n.h3,{id:"regular-or-shared-object",children:"Regular or shared object"}),"\n",(0,r.jsx)(n.p,{children:"You can create two types of objects:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["regular (non-shared) objects, using the ",(0,r.jsx)(n.code,{children:"newObject"})," command or object literal syntax (",(0,r.jsx)(n.code,{children:"{}"}),"). These objects can be edited without any specific access control but cannot be shared between processes."]}),"\n",(0,r.jsxs)(n.li,{children:["shared objects, using the ",(0,r.jsx)(n.a,{href:"/docs/1.0.0/language/commands/newSharedObject",children:(0,r.jsx)(n.code,{children:"newSharedObject"})})," command. These objects can be shared between processes, including preemptive threads. Access to these objects is controlled by ",(0,r.jsx)(n.a,{href:"/docs/1.0.0/language/basics/lang-shared#useend",children:(0,r.jsx)(n.code,{children:"use...end"})})," structures."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"syntax-basics",children:"Syntax basics"}),"\n",(0,r.jsx)(n.p,{children:"Object notation can be used to access object property values through a chain of tokens."}),"\n",(0,r.jsx)(n.h3,{id:"object-properties",children:"Object properties"}),"\n",(0,r.jsx)(n.p,{children:"With object notation, object properties can be accessed in two ways:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['using a "dot" symbol:',"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"object.propertyName"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:'     employee.name = "Smith"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["using a string within square brackets:","\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:'object["propertyName"]'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Examples:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:'     vName = employee["name"]\n     //or also:\n     property = "name"\n	 vName = employee[property]\n'})}),"\n",(0,r.jsx)(n.p,{children:"Since an object property value can be an object or a collection, object notation accepts a sequence of symbols to access sub-properties, for example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:" vAge = employee.children[2].age\n"})}),"\n",(0,r.jsx)(n.p,{children:"Object notation is available on any language element that can contains or returns an object, i.e:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Objects"})," themselves (stored in variables, attributes, object properties, or collection elements).\nExamples:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:"     age = myObjVar.employee.age //variable\n     addr = myEntity.data_obj.address //attribute\n     city = addr.city //property of an object\n     val = myCollection[3].subvalue //collection element\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"QuodlyScript commands"})," that return objects.\nExample:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:"     storage.mydata.prop2 = 10\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Methods"})," that return objects.\nExample:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:'      //myMethod1\n     declare -> result : object\n     result = newObject("a",10,"b",20)\n\n      //myMethod2\n     value = myMethod1.a //10\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Collections"}),"\nExample:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:"     myColl.length //size of the collection\n"})}),"\n",(0,r.jsx)(n.h3,{id:"null-value",children:"Null value"}),"\n",(0,r.jsxs)(n.p,{children:["When using the object notation, the ",(0,r.jsx)(n.strong,{children:"null"})," value is supported though the ",(0,r.jsx)(n.code,{children:"null"})," command. This command can be used to assign or compare the null value to object properties or collection elements, for example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:" myObject.address.zip = null\n if(myColl[2] == null)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For more information, please refer to the ",(0,r.jsx)(n.a,{href:"/docs/1.0.0/language/basics/lang-null-undefined#null",children:(0,r.jsx)(n.code,{children:"null"})})," description."]}),"\n",(0,r.jsx)(n.h3,{id:"undefined-value",children:"Undefined value"}),"\n",(0,r.jsxs)(n.p,{children:["Evaluating an object property can sometimes produce an ",(0,r.jsx)(n.strong,{children:"undefined"})," value. Typically when trying to read or assign undefined expressions, the QodlyScript will generate errors. This does not happen in the following cases:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Reading a property of an undefined object or value returns ",(0,r.jsx)(n.code,{children:"undefined"}),"; assigning an undefined value to variables has the same effect as calling ",(0,r.jsx)(n.a,{href:"/docs/1.0.0/language/basics/lang-variables#clearvariable",children:(0,r.jsx)(n.code,{children:"clearVariable"})})," with them:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:"     var o : object\n     var val : integer\n     val = 10 //val:10\n     val = o.a //o.a is undefined (no error), and assigning this value clears the variable\n      //val:0\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Reading the ",(0,r.jsx)(n.strong,{children:"length"})," property of an undefined collection produces 0:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:"     var c : collection //variable created but no collection is instanciated\n     size = c.length //size = 0\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'An undefined value passed as parameter to a project method is automatically converted to 0 or "" according to the declared parameter type.'}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:'     var o : object\n     mymethod(o.a) //pass an undefined parameter\n\n      //In mymethod method\n     declare (param : text)\n      // param: ""\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A condition expression is automatically converted to ",(0,r.jsx)(n.code,{children:"false"})," when evaluating to ",(0,r.jsx)(n.code,{children:"undefined"})," with the ",(0,r.jsx)(n.code,{children:"if"})," and ",(0,r.jsx)(n.code,{children:"case of"})," keywords:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:"     var o : object\n     if(o.a) // false\n     end\n     switch\n        :(o.a) // false\n     end\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Assigning an undefined value to an existing object property reinitializes or clears its value, depending on its type:"}),"\n",(0,r.jsx)(n.li,{children:"object, collection: null"}),"\n",(0,r.jsx)(n.li,{children:"picture: empty picture"}),"\n",(0,r.jsx)(n.li,{children:"boolean: false"}),"\n",(0,r.jsx)(n.li,{children:'string: ""'}),"\n",(0,r.jsx)(n.li,{children:"number: 0"}),"\n",(0,r.jsx)(n.li,{children:'date: !00-00-00! if "Use date type" setting is enabled, otherwise ""'}),"\n",(0,r.jsx)(n.li,{children:"time: 0 (number of ms)"}),"\n",(0,r.jsx)(n.li,{children:"undefined, null: no change"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:'     var o : object\n     o = newObject("a",2)\n     o.a = o.b //o.a = 0\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Assigning an undefined value to a non existing object property does nothing."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["When expressions of a given type are expected in your code, you can make sure they have the correct type even when evaluated to ",(0,r.jsx)(n.code,{children:"undefined"})," by surrounding them with the appropriate QodlyScript cast command: ",(0,r.jsx)(n.code,{children:"string"}),", ",(0,r.jsx)(n.code,{children:"num"}),", ",(0,r.jsx)(n.code,{children:"date"}),", ",(0,r.jsx)(n.code,{children:"time"}),", ",(0,r.jsx)(n.code,{children:"bool"}),". These commands return an empty value of the specified type when the expression evaluates to ",(0,r.jsx)(n.code,{children:"undefined"}),". For example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:" myString = lowercase(string(o.a.b)) //make sure you get a string value even if undefined\n  //to avoid errors in the code\n"})}),"\n",(0,r.jsx)(n.h2,{id:"object-operators",children:"Object operators"}),"\n",(0,r.jsxs)(n.p,{children:["You can use comparison operators with ",(0,r.jsx)(n.strong,{children:"object references"}),", which means that you can evaluate if two or more references point to the same instance of an object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:"var o1 = {a: 42} //reference to an instance\nvar o2 = {a: 42} //reference to a different instance\nvar o3 = o1 //reference to the same instance\n"})}),"\n",(0,r.jsx)(n.p,{children:"Based upon the code above, the comparison table is:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Operation"}),(0,r.jsx)(n.th,{children:"Syntax"}),(0,r.jsx)(n.th,{children:"Returns"}),(0,r.jsx)(n.th,{children:"Expression"}),(0,r.jsx)(n.th,{children:"Value"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Equality"}),(0,r.jsx)(n.td,{children:"objectRef == objectRef"}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"o1 == o3"}),(0,r.jsx)(n.td,{children:"true"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"o1 == o2"}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Inequality"}),(0,r.jsx)(n.td,{children:"objectRef # objectRef"}),(0,r.jsx)(n.td,{children:"boolean"}),(0,r.jsx)(n.td,{children:"o1 != o3"}),(0,r.jsx)(n.td,{children:"false"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{}),(0,r.jsx)(n.td,{children:"o1 != o2"}),(0,r.jsx)(n.td,{children:"true"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Writing and reading objects:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:'  // Using newObject\n var myObj : object //declares an object variable\n myObj = newObject //instanciates object and assigns to the variable\n myObj.age = 56\n age = myObj.age //56\n\n  // Alternate code\n var myObj2 : object\n myObj2 = {"age":42} //instanciates object and adds the age property\n myObj2.age //42\n\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create a property and assign values, including objects:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:' var Emp : object\n Emp = newObject\n Emp.city = "London" //creates the city property and sets its value to "London"\n Emp.city = "Paris" //modifies the city property\n Emp.phone = {"office":"123456789","home":"0011223344"}\n  //creates the phone property and sets its value to an object\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Get a value in a sub-object:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:' vCity = Emp.city //"Paris"\n vPhone = Emp.phone.home //"0011223344"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["You can access properties as strings using the ",(0,r.jsx)(n.code,{children:"[]"})," operator"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-qs",children:' Emp["city"] = "Berlin" //modifies the city property\n  //this can be useful for creating properties through variables\n var addr : string\n var i : integer\n addr = "address"\n for(i,1,4)\n    Emp[addr+string(i)] = ""\n end\n  // creates 4 empty properties "address1...address4" in the Emp object\n'})})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},50065:function(e,n,s){s.d(n,{Z:function(){return o},a:function(){return i}});var t=s(67294);let r={},a=t.createContext(r);function i(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);