"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([["89561"],{36197:function(e,n,s){s.r(n),s.d(n,{metadata:()=>t,contentTitle:()=>i,default:()=>h,assets:()=>r,toc:()=>c,frontMatter:()=>a});var t=JSON.parse('{"id":"language/basics/lang-methods","title":"Methods","description":"A method is basically a piece of code that executes one or several action(s). Qodly provides a large number of built-in methods (i.e. commands) but also lets you create your own user methods. In this section, we describe user methods.","source":"@site/versioned_docs/version-1.0.0/language/basics/lang-methods.md","sourceDirName":"language/basics","slug":"/language/basics/lang-methods","permalink":"/docs/1.0.0/language/basics/lang-methods","draft":false,"unlisted":false,"editUrl":"https://github.com/qodly/docs/issues/new?title=Comment%20on%20language%2Fbasics%2Flang-methods.md%20(1.0.0)&body=Share%20any%20feedback%20about%20this%20page%20%E2%80%94%20report%20issues%2C%20suggest%20improvements%2C%20or%20tell%20us%20what%E2%80%99s%20helpful.%0A%0AIf%20it%E2%80%99s%20an%20issue%3A%0A-%20What%E2%80%99s%20the%20issue%3F%20(e.g.%2C%20typo%2C%20incorrect%20information%2C%20unclear%20explanation)%0A-%20Where%20is%20it%3F%20(e.g.%2C%20section%20name%2C%20specific%20paragraph%2C%20or%20line)%0A%0AThank%20you%20for%20helping%20us%20improve!%20%F0%9F%9A%80%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20","tags":[],"version":"1.0.0","frontMatter":{"id":"lang-methods","title":"Methods"},"sidebar":"Develop","previous":{"title":"Operators","permalink":"/docs/1.0.0/language/basics/lang-operators"},"next":{"title":"Classes","permalink":"/docs/1.0.0/language/basics/lang-classes"}}'),l=s("85893"),o=s("50065");let a={id:"lang-methods",title:"Methods"},i=void 0,r={},c=[{value:"Defining and Calling Methods",id:"defining-and-calling-methods",level:2},{value:"Writing Method Code",id:"writing-method-code",level:2},{value:"Code on several lines",id:"code-on-several-lines",level:3},{value:"Comments",id:"comments",level:3},{value:"Single line comments (<code>//comment</code>)",id:"single-line-comments-comment",level:4},{value:"Inline or multiline comments (<code>/*comment*/</code>)",id:"inline-or-multiline-comments-comment",level:4},{value:"Methods as Object Formulas",id:"methods-as-object-formulas",level:2},{value:"Recursive Methods",id:"recursive-methods",level:2}];function d(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["A method is basically a piece of code that executes one or several action(s). Qodly provides a large number of built-in methods (i.e. ",(0,l.jsx)(n.strong,{children:"commands"}),") but also lets you create your own user methods. In this section, we describe user methods."]}),"\n",(0,l.jsx)(n.h2,{id:"defining-and-calling-methods",children:"Defining and Calling Methods"}),"\n",(0,l.jsxs)(n.p,{children:["You give a method a ",(0,l.jsx)(n.a,{href:"/docs/1.0.0/language/basics/lang-identifiers#methods",children:"name"})," that usually identifies what it does, and this name is used to call the method wherever it is needed."]}),"\n",(0,l.jsx)(n.p,{children:"Once a method is created, it becomes part of the language of the project."}),"\n",(0,l.jsxs)(n.p,{children:["A method is executed when its name is called, with or without ",(0,l.jsx)(n.a,{href:"/docs/1.0.0/language/basics/lang-parameters",children:"parameters"}),", by another code. For example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'//methodA\n//methodA calls methodB with one parameter\nvar t : string\nt = methodB("world") //t  ==  "hello world"\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'//methodB\ndeclare (param : string)\nreturn ("hello " + param)\n'})}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.p,{children:"Qodly Studio allows executing methods from the Explorer to test them."})}),"\n",(0,l.jsx)(n.h2,{id:"writing-method-code",children:"Writing Method Code"}),"\n",(0,l.jsx)(n.p,{children:"A method can contain any code to execute any custom actions."}),"\n",(0,l.jsxs)(n.p,{children:["A user method is composed of statements. A statement performs an action, and may be simple or complex. Each statement usually consists of one line in the method (if necessary, it can however be split using the ",(0,l.jsx)(n.code,{children:"\\"})," character, see below)."]}),"\n",(0,l.jsx)(n.p,{children:"The maximum size of a method is limited to 2 GB of text or 32,000 lines of code."}),"\n",(0,l.jsx)(n.h3,{id:"code-on-several-lines",children:"Code on several lines"}),"\n",(0,l.jsxs)(n.p,{children:["You can write a single statement on several lines by terminating each line of the statement with a trailing backslash ",(0,l.jsx)(n.code,{children:"\\"})," character. The QodlyScript language will consider all the lines at once. For example, both the following statements are equivalent:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'str = string("hello world!")\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'str = string("hello"+\\\n" world"+\\\n+"!")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"comments",children:"Comments"}),"\n",(0,l.jsx)(n.p,{children:"Comments are inactive lines of code. These lines are not interpreted by the QodlyScript language and are not executed when the code is called."}),"\n",(0,l.jsx)(n.p,{children:"There are two ways to create comments:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"//"})," for single line comments"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"/*...*/"})," for inline or multiline commnents."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Both styles of comments can be used simultaneously."}),"\n",(0,l.jsxs)(n.h4,{id:"single-line-comments-comment",children:["Single line comments (",(0,l.jsx)(n.code,{children:"//comment"}),")"]}),"\n",(0,l.jsxs)(n.p,{children:["Insert ",(0,l.jsx)(n.code,{children:"//"})," at the beginning of a line or after a statement to add a single line comment. Example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:"//This is a comment\nfor(vCounter,1,100) //Starting loop\n  //comment\n  //comment\n  //comment\nend\n"})}),"\n",(0,l.jsxs)(n.h4,{id:"inline-or-multiline-comments-comment",children:["Inline or multiline comments (",(0,l.jsx)(n.code,{children:"/*comment*/"}),")"]}),"\n",(0,l.jsxs)(n.p,{children:["Surround contents with ",(0,l.jsx)(n.code,{children:"/*"})," ... ",(0,l.jsx)(n.code,{children:"*/"})," characters to create inline comments or multiline comment blocks. Both inline and multiline comment blocks begin with ",(0,l.jsx)(n.code,{children:"/*"})," and end with ",(0,l.jsx)(n.code,{children:"*/"}),"."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Inline comments"})," can be inserted anywhere in the code. Example:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:"for /* inline comment */ (vCounter,1,100)\n	...\nend for\n"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Multiline comment blocks"})," allows commenting an unlimited number of lines. Comment blocks can be nested (useful since the QodlyScript code editor supports block collapsing). Example:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:"for (vCounter,1,100)\n/*\ncomments  \n	/* \n	other comments\n	*/\n*/\n...\nend\n"})}),"\n",(0,l.jsx)(n.h2,{id:"methods-as-object-formulas",children:"Methods as Object Formulas"}),"\n",(0,l.jsxs)(n.p,{children:["You can encapsulate your methods in ",(0,l.jsx)(n.strong,{children:"formula"})," objects and call them from your objects."]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.a,{href:"/docs/1.0.0/language/FunctionClass#formula-objects",children:(0,l.jsx)(n.code,{children:"formula"})})," and ",(0,l.jsx)(n.a,{href:"../commands/formulaFromString",children:(0,l.jsx)(n.code,{children:"formulaFromString"})})," commands allow you to create formula objects that you can encapsulate in object properties. It allows you to implement custom object methods."]}),"\n",(0,l.jsxs)(n.p,{children:["To execute a method stored in an object property, use the ",(0,l.jsx)(n.strong,{children:"()"})," operator after the property name. For example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:"//three_days_later\nreturn (currentDate+3)\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Then ",(0,l.jsx)(n.code,{children:"three_days_later"})," can be encapsulated in any object and called:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'var o : object\no = newObject("threeDays";formula(three_days_later))\no.threeDays() //returns the date in three days\n'})}),"\n",(0,l.jsx)(n.p,{children:"Syntax with brackets is also supported:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'o["threeDays"]() //returns the date in three days\n'})}),"\n",(0,l.jsxs)(n.p,{children:["You can also ",(0,l.jsx)(n.a,{href:"/docs/1.0.0/language/basics/lang-parameters",children:"pass parameters"})," to your formula when you call it by using special variables ",(0,l.jsx)(n.code,{children:"$1"}),", ",(0,l.jsx)(n.code,{children:"$2"}),"\u2026 ",(0,l.jsx)(n.code,{children:"$N"}),". They will be received in their sequence order in the formula code. Use ",(0,l.jsx)(n.code,{children:"$0"})," in the formula code to return a value."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'//fullName method\nvar $0,$1,$2 : string\n$0 = $1+" "+$2\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Encapsulate ",(0,l.jsx)(n.code,{children:"fullName"})," in an object:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'var o : object\no = newObject("full_name",formula(fullName))\nresult = o.full_name("John","Smith") \n//result = "John Smith"\n//equivalent to result = fullName("param1","param2")\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Combined with the ",(0,l.jsx)(n.a,{href:"/docs/1.0.0/language/basics/lang-classes#this",children:(0,l.jsx)(n.code,{children:"this"})})," keyword, such object methods allow writing powerful generic code. For example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'//fullName2 method\nvar $0 : string\n$0 = this.firstName+" "+this.lastName\n'})}),"\n",(0,l.jsx)(n.p,{children:"Then the method acts like a new, calculated attribute that can be added to other attributes:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:'var o : object\no = newObject("firstName","Jim","lastName","Wesson")\no.fullName = formula(fullName2) //add the method  \n\nresult = o.fullName2() \n//result = "Jim Wesson"\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Note that, even if it does not have parameters, an object method to be executed must be called with ",(0,l.jsx)(n.code,{children:"()"})," parenthesis. Calling only the object property will return a new reference to the formula (and will not execute it):"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-qs",children:"o = f.message //returns the formula object in o\n"})}),"\n",(0,l.jsx)(n.h2,{id:"recursive-methods",children:"Recursive Methods"}),"\n",(0,l.jsx)(n.p,{children:"Methods can call themselves. For example:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The method A may call the method B which may call A, so A will call B again and so on."}),"\n",(0,l.jsx)(n.li,{children:"A method can call itself."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"This is called recursion. The QodlyScript language fully supports recursion."})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},50065:function(e,n,s){s.d(n,{Z:function(){return i},a:function(){return a}});var t=s(67294);let l={},o=t.createContext(l);function a(e){let n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);