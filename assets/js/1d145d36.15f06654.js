"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([["33264"],{57612:function(e,n,l){l.r(n),l.d(n,{metadata:()=>a,contentTitle:()=>i,default:()=>d,assets:()=>r,toc:()=>c,frontMatter:()=>t});var a=JSON.parse('{"id":"language/basics/lang-blob","title":"BLOB","description":"A BLOB (Binary Large OBject) attribute, variable or expression is a contiguous series of bytes that can be treated as one whole object, or whose bytes can be addressed individually.","source":"@site/versioned_docs/version-1.0.0/language/basics/lang-blob.md","sourceDirName":"language/basics","slug":"/language/basics/lang-blob","permalink":"/docs/1.0.0/language/basics/lang-blob","draft":false,"unlisted":false,"editUrl":"https://github.com/qodly/docs/issues/new?title=Comment%20on%20language%2Fbasics%2Flang-blob.md%20(1.0.0)&body=Share%20any%20feedback%20about%20this%20page%20%E2%80%94%20report%20issues%2C%20suggest%20improvements%2C%20or%20tell%20us%20what%E2%80%99s%20helpful.%0A%0AIf%20it%E2%80%99s%20an%20issue%3A%0A-%20What%E2%80%99s%20the%20issue%3F%20(e.g.%2C%20typo%2C%20incorrect%20information%2C%20unclear%20explanation)%0A-%20Where%20is%20it%3F%20(e.g.%2C%20section%20name%2C%20specific%20paragraph%2C%20or%20line)%0A%0AThank%20you%20for%20helping%20us%20improve!%20%F0%9F%9A%80%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20","tags":[],"version":"1.0.0","frontMatter":{"id":"lang-blob","title":"BLOB"},"sidebar":"Develop","previous":{"title":"Data types","permalink":"/docs/1.0.0/language/basics/lang-data-types"},"next":{"title":"Boolean","permalink":"/docs/1.0.0/language/basics/lang-boolean"}}'),o=l("85893"),s=l("50065");let t={id:"lang-blob",title:"BLOB"},i=void 0,r={},c=[{value:"Blob Types",id:"blob-types",level:2},{value:"Checking if a variable holds a scalar blob or a <code>4D.Blob</code>",id:"checking-if-a-variable-holds-a-scalar-blob-or-a-4dblob",level:2},{value:"Passing blobs as parameters",id:"passing-blobs-as-parameters",level:2},{value:"Automatic conversion of blob type",id:"automatic-conversion-of-blob-type",level:2},{value:"Individually accessing bytes in a blob",id:"individually-accessing-bytes-in-a-blob",level:2},{value:"Accessing a scalar blob&#39;s bytes",id:"accessing-a-scalar-blobs-bytes",level:4},{value:"Accessing a <code>4D.Blob</code>&#39;s bytes",id:"accessing-a-4dblobs-bytes",level:4},{value:"Modifying a scalar blob",id:"modifying-a-scalar-blob",level:2}];function b(e){let n={a:"a",admonition:"admonition",code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"A BLOB (Binary Large OBject) attribute, variable or expression is a contiguous series of bytes that can be treated as one whole object, or whose bytes can be addressed individually."}),"\n",(0,o.jsx)(n.p,{children:"A blob is loaded into memory in its entirety. A blob variable is held and exists in memory only. A blob attribute is loaded into memory from the disk, like the rest of the entity to which it belongs. Like other attribute types that can retain a large amount of data (such as the picture type), blob attributes are not duplicated in memory when you modify an entity."}),"\n",(0,o.jsx)(n.h2,{id:"blob-types",children:"Blob Types"}),"\n",(0,o.jsx)(n.p,{children:"Using the QodlyScript language, there are two ways to handle a blob:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"as a scalar value"}),": a blob can be stored in a blob variable or attribute and altered."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:["as an object (",(0,o.jsx)(n.code,{children:"4D.Blob"}),")"]}),": a ",(0,o.jsx)(n.code,{children:"4D.Blob"})," is a blob object. You can encapsulate a blob or part of it in a ",(0,o.jsx)(n.code,{children:"4D.Blob"})," without altering the original blob. This method is called ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Object_type_(object-oriented_programming)#Boxing",children:"boxing"}),". For more info on how to instantiate a ",(0,o.jsx)(n.code,{children:"4D.Blob"}),", see ",(0,o.jsx)(n.a,{href:"/docs/1.0.0/language/BlobClass",children:"Blob class"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Each blob type has its advantages. Use the following table to determine which one suits your needs:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"Blob"}),(0,o.jsx)(n.th,{style:{textAlign:"center"},children:"4D.Blob"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Alterable"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"Yes"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"No"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Shareable in objects and collections"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"No"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"Yes"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Passed by reference*"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"No"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"Yes"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Performance when accessing bytes"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"+"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"-"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Maximum size"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"2GB"}),(0,o.jsx)(n.td,{style:{textAlign:"center"},children:"Memory"})]})]})]}),"\n",(0,o.jsxs)(n.p,{children:["*Unlike the QodlyScript commands designed to take a scalar blob as a parameter, passing a scalar blob to a method duplicates it in memory. When working with methods, using blob objects (",(0,o.jsx)(n.code,{children:"4D.Blob"}),") is more efficient, as they are passed by reference."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"By default, the maximum size of scalar blobs is set to 2GB, but this size limit may be lower depending on the available space."})}),"\n",(0,o.jsx)(n.p,{children:"You cannot use operators on blobs."}),"\n",(0,o.jsxs)(n.h2,{id:"checking-if-a-variable-holds-a-scalar-blob-or-a-4dblob",children:["Checking if a variable holds a scalar blob or a ",(0,o.jsx)(n.code,{children:"4D.Blob"})]}),"\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.a,{href:"/docs/1.0.0/language/commands/valueType",children:(0,o.jsx)(n.code,{children:"valueType"})})," command to determine if a value is of type Blob or Object."]}),"\n",(0,o.jsxs)(n.p,{children:["To check that an object is a blob object (",(0,o.jsx)(n.code,{children:"4D.Blob"}),"), use ",(0,o.jsx)(n.a,{href:"/docs/1.0.0/language/commands/instanceOf",children:(0,o.jsx)(n.code,{children:"instanceOf"})}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-qs",children:"var myBlob: blob\nvar myBlobObject: 4D.Blob\nvar is4DBlob: boolean\nvar type: integer\nmyBlobObject = 4D.Blob.new()\n\ntype = valueType(myblobObject) // 38 (object)\nis4DBlob = instanceOf(myblobObject,4D.Blob) //True\n"})}),"\n",(0,o.jsx)(n.h2,{id:"passing-blobs-as-parameters",children:"Passing blobs as parameters"}),"\n",(0,o.jsxs)(n.p,{children:["You can pass a scalar blob or a ",(0,o.jsx)(n.code,{children:"4D.Blob"})," to any QodlyScript command that takes a blob as a parameter:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-qs",children:'var myBlob, myNewBlob: 4D.Blob\nvar myString: string\nconvertFromString("Hello, World!", "UTF-8", myBlob)\nmyString = convertToText(myBlob,"UTF-8")\n //myString contains "Hello, World!"\nmyNewBlob = myBlob.slice(0,5)\nmyString = convertToText(myNewBlob,"UTF-8")\n //myString contains "Hello"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can pass blobs and blob objects (",(0,o.jsx)(n.code,{children:"4D.Blob"}),") to methods. Keep in mind that unlike blob objects, which are passed by reference, scalar blobs are duplicated in memory when passed to methods."]}),"\n",(0,o.jsx)(n.h2,{id:"automatic-conversion-of-blob-type",children:"Automatic conversion of blob type"}),"\n",(0,o.jsx)(n.p,{children:"QodlyScript automatically converts scalar blobs to blob objects, and vice versa, when they're assigned to each other. For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-qs",children:'// Create a variable of type Blob and an object variable\nvar myBlob: blob\nvar myObject : object\n\n// Assign that blob to a property of myObject named "blob"\nmyObject = newObject("blob",myBlob)\n\n// The blob stored in myBlob is automatically converted to a 4D.Blob\nvar type : boolean\ntype = instanceOf(myObject.blob,4D.Blob)  //true\n\n// Conversion from 4D.Blob to blob\nmyBlob = myObject.blob\ntype = valueType(myBlob) // blob\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["When converting a ",(0,o.jsx)(n.code,{children:"4D.Blob"})," to a scalar blob, if the size of the ",(0,o.jsx)(n.code,{children:"4D.Blob"})," exceeds the maximum size for scalar blobs, the resulting scalar blob is empty. For example, when the maximum size for scalar blobs is 2GB, if you convert a ",(0,o.jsx)(n.code,{children:"4D.Blob"})," of 2.5GB to a scalar blob, you obtain an empty blob."]})}),"\n",(0,o.jsx)(n.h2,{id:"individually-accessing-bytes-in-a-blob",children:"Individually accessing bytes in a blob"}),"\n",(0,o.jsx)(n.h4,{id:"accessing-a-scalar-blobs-bytes",children:"Accessing a scalar blob's bytes"}),"\n",(0,o.jsxs)(n.p,{children:["You can access individual bytes of a scalar blob using curly brackets ",(0,o.jsx)(n.code,{children:"{}"}),". Within a blob, bytes are numbered from 0 to N-1, where N is the size of the blob:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-qs",children:'  // Declare a variable of type Blob\nvar myBlob : blob\nvar byte : integer\nconvertFromText("Hello, World!", "UTF-8", myBlob)\nbyte = myBlob{1} //101 (character code for "e")\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Since you can address all the bytes of a blob individually, you can store whatever you want in a Blob variable or attribute."}),"\n",(0,o.jsxs)(n.h4,{id:"accessing-a-4dblobs-bytes",children:["Accessing a ",(0,o.jsx)(n.code,{children:"4D.Blob"}),"'s bytes"]}),"\n",(0,o.jsxs)(n.p,{children:["Use square brackets ",(0,o.jsx)(n.code,{children:"[]"})," to directly access a specific byte in a ",(0,o.jsx)(n.code,{children:"4D.Blob"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-qs",children:'var myBlob : 4D.Blob\nvar byte : integer\nconvertFromText("Hello, World!", "UTF-8", myBlob)\nbyte = myBlob[1] //101\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Since a ",(0,o.jsx)(n.code,{children:"4D.Blob"})," cannot be altered, you can read the bytes of a ",(0,o.jsx)(n.code,{children:"4D.Blob"})," using this syntax, but not modify them."]}),"\n",(0,o.jsx)(n.h2,{id:"modifying-a-scalar-blob",children:"Modifying a scalar blob"}),"\n",(0,o.jsx)(n.p,{children:"Unlike blob objects, scalar blobs can be altered. For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-qs",children:'var myBlob : blob\nvar myString : string\nconvertFromText("Hello, World!", "UTF-8", myBlob)\nmyBlob{1} = characterCode("A") //replace the 1st byte\nmyString = convertToText(myBlob,"UTF-8") //HAllo, World!\n'})})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(b,{...e})}):b(e)}},50065:function(e,n,l){l.d(n,{Z:function(){return i},a:function(){return t}});var a=l(67294);let o={},s=a.createContext(o);function t(e){let n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);