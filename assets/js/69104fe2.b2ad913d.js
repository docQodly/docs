"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[9642],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=m(a),c=r,u=p["".concat(s,".").concat(c)]||p[c]||g[c]||i;return a?n.createElement(u,l(l({ref:t},d),{},{components:a})):n.createElement(u,l({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6368:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const i={id:"generateDigest",title:"generateDigest"},l=void 0,o={unversionedId:"language/commands/generateDigest",id:"language/commands/generateDigest",title:"generateDigest",description:"generateDigest ( param integer {, \\*}) : string",source:"@site/docs/language/commands/generateDigest.md",sourceDirName:"language/commands",slug:"/language/commands/generateDigest",permalink:"/docs/language/commands/generateDigest",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/language/commands/generateDigest.md",tags:[],version:"current",frontMatter:{id:"generateDigest",title:"generateDigest"},sidebar:"Develop",previous:{title:"formulaFromString",permalink:"/docs/language/commands/formulaFromString"},next:{title:"generatePasswordHash",permalink:"/docs/language/commands/generatePasswordHash"}},s={},m=[{value:"Description",id:"description",level:4},{value:"Example",id:"example",level:4},{value:"See also",id:"see-also",level:4}],d={toc:m};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"generateDigest")," ( ",(0,r.kt)("em",{parentName:"p"},"param")," : any , ",(0,r.kt)("em",{parentName:"p"},"algorithm")," : integer {, ","*","}) : string"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"}),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"param"),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"blob or string for which to get digest key")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"algorithm"),(0,r.kt)("td",{parentName:"tr",align:null},"integer"),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Algorithm used to return key: 0 = kMD5Digest, 1 = kSHA1Digest, 3 = kSHA256Digest, 4 = kSHA512Digest")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:"center"},"->"),(0,r.kt)("td",{parentName:"tr",align:null},"Encode digest in Base64URL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Result"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,r.kt)("td",{parentName:"tr",align:null},"Value of digest key")))),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"generateDigest")," command returns the digest key of a blob or string after application of an encryption algorithm."),(0,r.kt)("p",null,"Pass a string or blob variable in the ",(0,r.kt)("em",{parentName:"p"},"param")," parameter. The ",(0,r.kt)("inlineCode",{parentName:"p"},"generateDigest")," function returns the digest key as a string."),(0,r.kt)("p",null,"In the ",(0,r.kt)("em",{parentName:"p"},"algorithm")," parameter, pass a value designating which hash function to use. Use one of the following constants, found in the Digest Type theme:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Constant"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Comment"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"k4DRESTDigest"),(0,r.kt)("td",{parentName:"tr",align:"left"},"2"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Internal algorithm of Qodly.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kMD5Digest"),(0,r.kt)("td",{parentName:"tr",align:"left"},"0"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Message Digest 5 algorithm. A series of 128 bits returned as a string of 32 hexadecimal characters.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kSHA1Digest"),(0,r.kt)("td",{parentName:"tr",align:"left"},"1"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Secure Hash 1 algorithm. A series of 160 bits returned as a string of 40 hexadecimal characters.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kSHA256Digest"),(0,r.kt)("td",{parentName:"tr",align:"left"},"3"),(0,r.kt)("td",{parentName:"tr",align:"left"},"(SHA-2 family) SHA-256 is a series of 256 bits returned as a string of 64 hexadecimal characters.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"kSHA512Digest"),(0,r.kt)("td",{parentName:"tr",align:"left"},"4"),(0,r.kt)("td",{parentName:"tr",align:"left"},"(SHA-2 family) SHA-512 is a series of 512 bits returned as a string of 128 hexadecimal characters.")))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"It is not recommended to use MD5 and SHA algorithms to handle passwords; if you need to check passwords, you are advised to use ",(0,r.kt)("a",{parentName:"p",href:"/docs/language/commands/generatePasswordHash"},(0,r.kt)("inlineCode",{parentName:"a"},"generatePasswordHash")),"\nand ",(0,r.kt)("a",{parentName:"p",href:"/docs/language/commands/verifyPasswordHash"},(0,r.kt)("inlineCode",{parentName:"a"},"verifyPasswordHash"))," commands.")),(0,r.kt)("p",null,"By default if the ",(0,r.kt)("em",{parentName:"p"}," parameter is omitted, the returned digest is encoded in hexadecimal. Pass the ")," parameter if you want it to be encoded in Base64URL."),(0,r.kt)("p",null,"The value returned for the same object is the same on all the platforms (macOS/Windows). The calculation is performed based on the representation in UTF-8 of the string passed in the parameter."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'If you use the command with an empty string/blob, it does not return void but a string value (for example "d41d8cd98f00b204e9800998ecf8427e" for MD5).')),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("p",null,"These examples illustrate how to retrieve the digest key of a string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-qs"},' var key1, key2 : string\n key1 = generateDigest("The quick brown fox jumps over the lazy dog.",kMD5Digest)\n  // key1 is "e4d909c290d0fb1ca068ffaddf22cbd0"\n key2 = generateDigest("The quick brown fox jumps over the lazy dog.",kSHA1Digest)\n  // key2 is "408d94384216f890ff7a0c3528e8bed1e0b01621"\n\n')),(0,r.kt)("h4",{id:"see-also"},"See also"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/language/commands/base64Decode"},(0,r.kt)("inlineCode",{parentName:"a"},"base64Decode")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"/docs/language/commands/base64Encode"},(0,r.kt)("inlineCode",{parentName:"a"},"base64Encode")),(0,r.kt)("br",null),"\n",(0,r.kt)("a",{parentName:"p",href:"/docs/language/commands/generatePasswordHash"},(0,r.kt)("inlineCode",{parentName:"a"},"generatePasswordHash"))))}p.isMDXComponent=!0}}]);