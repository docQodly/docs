"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[9235],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(a),c=l,k=m["".concat(o,".").concat(c)]||m[c]||d[c]||r;return a?n.createElement(k,s(s({ref:t},p),{},{components:a})):n.createElement(k,s({ref:t},p))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,s=new Array(r);s[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:l,s[1]=i;for(var u=2;u<r;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},8589:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var n=a(7462),l=(a(7294),a(3905));const r={id:"orda-classes",title:"Data Model Classes"},s=void 0,i={unversionedId:"language/basics/orda-classes",id:"language/basics/orda-classes",title:"Data Model Classes",description:'ORDA allows you to create high-level class functions above the data model. This allows you to write business-oriented code and "publish" it just like an API. Datastore, dataclasses, entity selections, and entities are all available as class objects that can contain functions.',source:"@site/docs/language/basics/orda-classes.md",sourceDirName:"language/basics",slug:"/language/basics/orda-classes",permalink:"/docs/language/basics/orda-classes",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/language/basics/orda-classes.md",tags:[],version:"current",frontMatter:{id:"orda-classes",title:"Data Model Classes"},sidebar:"QodlyScript",previous:{title:"Classes",permalink:"/docs/language/basics/lang-classes"},next:{title:"Parameters",permalink:"/docs/language/basics/lang-parameters"}},o={},u=[{value:"Architecture",id:"architecture",level:2},{value:"Class Description",id:"class-description",level:2},{value:"DataStore Class",id:"datastore-class",level:3},{value:"Example",id:"example",level:4},{value:"DataClass Class",id:"dataclass-class",level:3},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"EntitySelection Class",id:"entityselection-class",level:3},{value:"Example",id:"example-3",level:4},{value:"Entity Class",id:"entity-class",level:3},{value:"Calculated attributes",id:"calculated-attributes",level:4},{value:"Example",id:"example-4",level:4},{value:"Specific rules",id:"specific-rules",level:3},{value:"Calculated attributes",id:"calculated-attributes-1",level:2},{value:"<code>function get &lt;attributeName&gt;</code>",id:"function-get-attributename",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Examples",id:"examples",level:4},{value:"<code>function set &lt;attributeName&gt;</code>",id:"function-set-attributename",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Example",id:"example-5",level:4},{value:"<code>function query &lt;attributeName&gt;</code>",id:"function-query-attributename",level:3},{value:"Syntax",id:"syntax-2",level:4},{value:"Examples",id:"examples-1",level:4},{value:"<code>function orderBy &lt;attributeName&gt;</code>",id:"function-orderby-attributename",level:3},{value:"Syntax",id:"syntax-3",level:4},{value:"Example",id:"example-6",level:4},{value:"Exposed vs non-exposed functions",id:"exposed-vs-non-exposed-functions",level:2},{value:"Example",id:"example-7",level:3}],p={toc:u};function m(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,'ORDA allows you to create high-level class functions above the data model. This allows you to write business-oriented code and "publish" it just like an API. Datastore, dataclasses, entity selections, and entities are all available as class objects that can contain functions.'),(0,l.kt)("p",null,"For example, you could create a ",(0,l.kt)("inlineCode",{parentName:"p"},"getNextWithHigherSalary()")," function in the ",(0,l.kt)("inlineCode",{parentName:"p"},"EmployeeEntity")," class to return employees with a salary higher than the selected one. It would be as simple as calling:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"nextHigh=ds.Employee.get(1).getNextWithHigherSalary()\n")),(0,l.kt)("p",null,"Thanks to this feature, the entire business logic of your Qodly application can be stored as a independent layer so that it can be easily maintained and reused with a high level of security:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'You can "hide" the overall complexity of the underlying physical structure and only expose understandable and ready-to-use functions. '),(0,l.kt)("li",{parentName:"ul"},"If the physical structure evolves, you can simply adapt function code and client applications will continue to call them transparently. "),(0,l.kt)("li",{parentName:"ul"},"By default, all of your data model class functions (including ",(0,l.kt)("a",{parentName:"li",href:"#calculated-attributes"},"calculated attribute functions"),") are ",(0,l.kt)("strong",{parentName:"li"},"not exposed")," to remote calls. You must explicitly declare each public function with the ",(0,l.kt)("a",{parentName:"li",href:"#exposed-vs-non-exposed-functions"},(0,l.kt)("inlineCode",{parentName:"a"},"exposed"))," keyword.")),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(5773).Z,width:"748",height:"526"})),(0,l.kt)("h2",{id:"architecture"},"Architecture"),(0,l.kt)("p",null,"ORDA provides ",(0,l.kt)("strong",{parentName:"p"},"generic classes")," exposed through a ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"4D"))," class store, as well as specific ",(0,l.kt)("strong",{parentName:"p"},"user classes")," (extending generic classes) exposed in the ",(0,l.kt)("a",{parentName:"p",href:"/docs/language/basics/lang-classes"},(0,l.kt)("strong",{parentName:"a"},(0,l.kt)("inlineCode",{parentName:"strong"},"cs"))," class store"),":"),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(1873).Z,width:"769",height:"567"})),(0,l.kt)("p",null,"All ORDA data model classes are exposed as properties of the ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"cs"))," class store. The following ORDA classes are available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Class"),(0,l.kt)("th",{parentName:"tr",align:null},"Example name"),(0,l.kt)("th",{parentName:"tr",align:null},"Instantiated by"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cs.DataStore"),(0,l.kt)("td",{parentName:"tr",align:null},"cs.DataStore"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"../language/DataStoreClass.md#ds"},(0,l.kt)("inlineCode",{parentName:"a"},"ds"))," command")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cs.",(0,l.kt)("em",{parentName:"td"},"DataClassName")),(0,l.kt)("td",{parentName:"tr",align:null},"cs.Employee"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"../language/DataStoreClass.md#dataclassname"},(0,l.kt)("inlineCode",{parentName:"a"},"dataStore.DataClassName")),", ",(0,l.kt)("inlineCode",{parentName:"td"},'dataStore["DataClassName"]'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cs.",(0,l.kt)("em",{parentName:"td"},"DataClassName"),"Entity"),(0,l.kt)("td",{parentName:"tr",align:null},"cs.EmployeeEntity"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"../language/DataClassClass.md#get"},(0,l.kt)("inlineCode",{parentName:"a"},"dataClass.get()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/DataClassClass.md#new"},(0,l.kt)("inlineCode",{parentName:"a"},"dataClass.new()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#first"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.first()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#last"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.last()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntityClass.md#previous"},(0,l.kt)("inlineCode",{parentName:"a"},"entity.previous()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntityClass.md#next"},(0,l.kt)("inlineCode",{parentName:"a"},"entity.next()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntityClass.md#first"},(0,l.kt)("inlineCode",{parentName:"a"},"entity.first()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntityClass.md#last"},(0,l.kt)("inlineCode",{parentName:"a"},"entity.last()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntityClass.md#clone"},(0,l.kt)("inlineCode",{parentName:"a"},"entity.clone()")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cs.",(0,l.kt)("em",{parentName:"td"},"DataClassName"),"Selection"),(0,l.kt)("td",{parentName:"tr",align:null},"cs.EmployeeSelection"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"../language/DataClassClass.md#query"},(0,l.kt)("inlineCode",{parentName:"a"},"dataClass.query()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#query"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.query()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/DataClassClass.md#all"},(0,l.kt)("inlineCode",{parentName:"a"},"dataClass.all()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/DataClassClass.md#fromcollection"},(0,l.kt)("inlineCode",{parentName:"a"},"dataClass.fromCollection()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/DataClassClass.md#newselection"},(0,l.kt)("inlineCode",{parentName:"a"},"dataClass.newSelection()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#drop"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.drop()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntityClass.md#getselection"},(0,l.kt)("inlineCode",{parentName:"a"},"entity.getSelection()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#and"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.and()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#minus"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.minus()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#or"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.or()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#or"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.orderBy()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#orderbyformula"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.orderByFormula()")),", ",(0,l.kt)("a",{parentName:"td",href:"../language/EntitySelectionClass.md#slice"},(0,l.kt)("inlineCode",{parentName:"a"},"entitySelection.slice()")))))),(0,l.kt)("p",null,"Also, object instances from ORDA data model user classes benefit from their parent's properties and functions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a Datastore class object can call functions from the ",(0,l.kt)("a",{parentName:"li",href:"../language/DataStoreClass.md"},"ORDA Datastore generic class"),"."),(0,l.kt)("li",{parentName:"ul"},"a Dataclass class object can call functions from the ",(0,l.kt)("a",{parentName:"li",href:"../language/DataClassClass.md"},"ORDA Dataclass generic class"),"."),(0,l.kt)("li",{parentName:"ul"},"an Entity selection class object can call functions from the ",(0,l.kt)("a",{parentName:"li",href:"../language/EntitySelectionClass.md"},"ORDA Entity selection generic class"),"."),(0,l.kt)("li",{parentName:"ul"},"an Entity class object can call functions from the ",(0,l.kt)("a",{parentName:"li",href:"../language/EntityClass.md"},"ORDA Entity generic class"),".")),(0,l.kt)("h2",{id:"class-description"},"Class Description"),(0,l.kt)("h3",{id:"datastore-class"},"DataStore Class"),(0,l.kt)("p",null,"A database exposes its own DataStore class in the ",(0,l.kt)("inlineCode",{parentName:"p"},"cs")," class store. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Extends"),": 4D.DataStoreImplementation "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Class name in ",(0,l.kt)("em",{parentName:"strong"},"cs")," class store"),": DataStore")),(0,l.kt)("p",null,"You can create functions in the DataStore class that will be available through the ",(0,l.kt)("inlineCode",{parentName:"p"},"ds")," object. "),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'// DataStore class\n\nextends DataStoreImplementation\n\nexposed function getDesc\n  return "Database exposing employees and their companies"\n')),(0,l.kt)("p",null,"This function can then be called:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'desc=ds.getDesc() //"Database exposing..."\n')),(0,l.kt)("h3",{id:"dataclass-class"},"DataClass Class"),(0,l.kt)("p",null,"Each dataclass offers a DataClass class in the ",(0,l.kt)("inlineCode",{parentName:"p"},"cs")," class store."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Extends"),": 4D.DataClass "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Class name in ",(0,l.kt)("em",{parentName:"strong"},"cs")," class store"),": ",(0,l.kt)("em",{parentName:"li"},"DataClassName")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Example name"),": Employee")),(0,l.kt)("h4",{id:"example-1"},"Example 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'// Company class\n\n\nextends DataClass\n\n// Returns companies whose revenue is over the average\n// Returns an entity selection related to the Company DataClass\n\nfunction getBestOnes() : cs.CompanySelection \n    sel=this.query("revenues >= :1",this.all().average("revenues"))\n    return sel\n')),(0,l.kt)("p",null,'Then you can get an entity selection of the "best" companies by executing: '),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"    var best : cs.CompanySelection\n    best=ds.Company.getBestOnes()\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("a",{parentName:"p",href:"#calculated-attributes"},"Calculated attributes")," are defined in the ",(0,l.kt)("a",{parentName:"p",href:"#entity-class"},"Entity Class"),". ")),(0,l.kt)("h4",{id:"example-2"},"Example 2"),(0,l.kt)("p",null,"Considering the following model (partial view):"),(0,l.kt)("p",null,(0,l.kt)("img",{src:a(6476).Z,width:"445",height:"167"})),(0,l.kt)("p",null,"Zipcodes are used as primary keys of the ",(0,l.kt)("em",{parentName:"p"},"ZipCode")," table. The many-to-one relation attribute between ",(0,l.kt)("em",{parentName:"p"},"cityID")," and ",(0,l.kt)("em",{parentName:"p"},"ID")," is named ",(0,l.kt)("em",{parentName:"p"},"city"),"."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"City Class")," provides an API:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'// City class\n\nextends DataClass\n\nexposed function getCityName(zipcode : integer) -> result : string\n    var zip : cs.ZipCodeEntity\n\n    zip=ds.ZipCode.get(zipcode)\n    result="" \n\n    if (zip!=null)\n        result=zip.city.name\n    end\n')),(0,l.kt)("p",null,"The application can use the API to get the city matching a zip code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"city=ds.City.getCityName(zipcode)\n\n")),(0,l.kt)("h3",{id:"entityselection-class"},"EntitySelection Class"),(0,l.kt)("p",null,"Each dataclass offers an EntitySelection class in the ",(0,l.kt)("inlineCode",{parentName:"p"},"cs")," class store."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Extends"),": 4D.EntitySelection "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Class name in ",(0,l.kt)("em",{parentName:"strong"},"cs")," class store"),": ",(0,l.kt)("em",{parentName:"li"},"DataClassName"),"Selection"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Example name"),": EmployeeSelection")),(0,l.kt)("h4",{id:"example-3"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'// EmployeeSelection class\n\n\nextends EntitySelection\n\n//Extract the employees with a salary greater than the average from this entity selection \n\nfunction withSalaryGreaterThanAverage() -> result : cs.EmployeeSelection\n    result=this.query("salary > :1",this.average("salary")).orderBy("salary")\n\n')),(0,l.kt)("p",null,"Then you can get employees with a salary greater than the average in any entity selection by executing: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"moreThanAvg=ds.Company.all().employees.withSalaryGreaterThanAverage()\n")),(0,l.kt)("h3",{id:"entity-class"},"Entity Class"),(0,l.kt)("p",null,"Each dataclass offers an Entity class in the ",(0,l.kt)("inlineCode",{parentName:"p"},"cs")," class store."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Extends"),": 4D.Entity "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Class name in ",(0,l.kt)("em",{parentName:"strong"},"cs")," class store"),": ",(0,l.kt)("em",{parentName:"li"},"DataClassName"),"Entity"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Example name"),": CityEntity")),(0,l.kt)("h4",{id:"calculated-attributes"},"Calculated attributes"),(0,l.kt)("p",null,"Entity classes allow you to define ",(0,l.kt)("strong",{parentName:"p"},"calculated attributes")," using specific keywords:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"function get")," ",(0,l.kt)("em",{parentName:"li"},"attributeName")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"function set")," ",(0,l.kt)("em",{parentName:"li"},"attributeName")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"function query")," ",(0,l.kt)("em",{parentName:"li"},"attributeName")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"function orderBy")," ",(0,l.kt)("em",{parentName:"li"},"attributeName"))),(0,l.kt)("p",null,"For more information, please refer to the ",(0,l.kt)("a",{parentName:"p",href:"#calculated-attributes"},"Calculated attributes")," section. "),(0,l.kt)("h4",{id:"example-4"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'// cs.CityEntity class\n\nextends Entity\n\nfunction getPopulation() -> result : integer\n    result=this.zips.sum("population")\n\n\nfunction isBigCity() -> result : boolean\n// The getPopulation() function is usable inside the class\nresult=this.getPopulation()>50000\n')),(0,l.kt)("p",null,"Then you can call this code: "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'var city : cs.CityEntity\nvar message : string\n\ncity=ds.City.getCity("Caguas")\n\nif (city.isBigCity())\n    message=city.name + " is a big city"\nend\n')),(0,l.kt)("h3",{id:"specific-rules"},"Specific rules"),(0,l.kt)("p",null,"When creating or editing data model classes, you must pay attention to the following rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Since they are both defined in the ",(0,l.kt)("strong",{parentName:"li"},"cs")," ",(0,l.kt)("a",{parentName:"li",href:"/docs/language/basics/lang-classes#class-stores"},"class store"),", do not give the same name to a dataclass and to a user class. If such a case occurs, the constructor of the user class becomes unusable. "),(0,l.kt)("li",{parentName:"ul"},'Do not use a reserved name for a user class (e.g., "DataClass").'),(0,l.kt)("li",{parentName:"ul"},"In an ORDA class, ",(0,l.kt)("inlineCode",{parentName:"li"},"this")," designates the instance of the object matching the dataclass."),(0,l.kt)("li",{parentName:"ul"},"You cannot instantiate a data model class object with the ",(0,l.kt)("inlineCode",{parentName:"li"},"new()")," keyword (an error is returned). You must use a regular method as listed in the ",(0,l.kt)("a",{parentName:"li",href:"#architecture"},(0,l.kt)("inlineCode",{parentName:"a"},"Instantiated by")," column of the ORDA class table"),"."),(0,l.kt)("li",{parentName:"ul"},"You cannot override a native ORDA class function from the ",(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"4D"))," ",(0,l.kt)("a",{parentName:"li",href:"Concepts/classes.md#class-stores"},"class store")," with a data model user class function.")),(0,l.kt)("h2",{id:"calculated-attributes-1"},"Calculated attributes"),(0,l.kt)("p",null,"A calculated attribute is a dataclass attribute with a data type that masks a calculation. For more information on calculated attributes, see ",(0,l.kt)("a",{parentName:"p",href:"../studio/model/attributes.md#calculated-attributes"},"Calculated attributes"),"."),(0,l.kt)("h3",{id:"function-get-attributename"},(0,l.kt)("inlineCode",{parentName:"h3"},"function get <attributeName>")),(0,l.kt)("h4",{id:"syntax"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"{exposed} function get <attributeName>({event : object}) -> result : type\n// code\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"getter")," function is mandatory to declare the ",(0,l.kt)("em",{parentName:"p"},"attributeName")," calculated attribute. Whenever the ",(0,l.kt)("em",{parentName:"p"},"attributeName")," is accessed, the ",(0,l.kt)("inlineCode",{parentName:"p"},"function get")," code is evaluated and the ",(0,l.kt)("em",{parentName:"p"},"result")," value is returned. "),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"A calculated attribute can use the value of other calculated attribute(s). Recursive calls generate errors. ")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"getter")," function defines the data type of the calculated attribute thanks to the ",(0,l.kt)("em",{parentName:"p"},"result")," parameter. The following resulting types are allowed:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Scalar (string, boolean, date, time, number)"),(0,l.kt)("li",{parentName:"ul"},"object"),(0,l.kt)("li",{parentName:"ul"},"Image"),(0,l.kt)("li",{parentName:"ul"},"BLOB"),(0,l.kt)("li",{parentName:"ul"},"Entity (i.e. cs.EmployeeEntity)"),(0,l.kt)("li",{parentName:"ul"},"Entity selection (i.e. cs.EmployeeSelection)")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"event")," parameter contains the following properties:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"attributeName"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Calculated attribute name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dataClassName"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Dataclass name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"kind"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},'"get"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"result"),(0,l.kt)("td",{parentName:"tr",align:null},"variant"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional. Add this property with null value if you want a scalar attribute to return null")))),(0,l.kt)("h4",{id:"examples"},"Examples"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"fullName")," calculated attribute:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'function get fullName(event : object)-> fullName : string\n\n  switch    \n    : (this.firstName==null) & (this.lastName==null)\n        event.result=null //use result to return null\n    : (this.firstName==null)\n        fullName=this.lastName\n    : (this.lastName==null)\n        fullName=this.firstName\n    else \n        fullName=this.firstName+" "+this.lastName\n    end \n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A calculated attribute can be based upon an entity related attribute:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"function get bigBoss(event : object)-> result: cs.EmployeeEntity\n    result=this.manager.manager\n    \n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A calculated attribute can be based upon an entity selection related attribute:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"function get coWorkers(event : object)-> result: cs.EmployeeSelection\n    if (this.manager==null)\n        result=ds.Employee.newSelection()\n    else \n        result=this.manager.directReports.minus(this)\n    end\n")),(0,l.kt)("h3",{id:"function-set-attributename"},(0,l.kt)("inlineCode",{parentName:"h3"},"function set <attributeName>")),(0,l.kt)("h4",{id:"syntax-1"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"function set <attributeName>(value : type {, event : object})\n// code\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"setter")," function executes whenever a value is assigned to the attribute. this function usually processes the input value(s) and the result is dispatched between one or more other attributes."),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"value")," parameter receives the value assigned to the attribute. "),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"event")," parameter contains the following properties:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"attributeName"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Calculated attribute name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dataClassName"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Dataclass name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"kind"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},'"set"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"variant"),(0,l.kt)("td",{parentName:"tr",align:null},"Value to be handled by the calculated attribute")))),(0,l.kt)("h4",{id:"example-5"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'function set fullName(value : string , event : object)\n    var p : integer\n    p=position(" ",value)       \n    this.firstname=substring(value, 1, p-1)  // "" if p<0\n    this.lastname=substring(value, p+1)\n')),(0,l.kt)("h3",{id:"function-query-attributename"},(0,l.kt)("inlineCode",{parentName:"h3"},"function query <attributeName>")),(0,l.kt)("h4",{id:"syntax-2"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"function query <attributeName>(event : object)\nfunction query <attributeName>(event : object) -> result : string\nfunction query <attributeName>(event : object) -> result : object\n// code\n")),(0,l.kt)("p",null,"This function supports three syntaxes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"With the first syntax, you handle the whole query through the ",(0,l.kt)("inlineCode",{parentName:"p"},"event.result")," object property.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"With the second and third syntaxes, the function returns a value in ",(0,l.kt)("em",{parentName:"p"},"result"),":"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("em",{parentName:"li"},"result")," is a string, it must be a valid query string"),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("em",{parentName:"li"},"result")," is an object, it must contain two properties:")),(0,l.kt)("table",{parentName:"li"},(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"result.query"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Valid query string with placeholders (:1, :2, etc.)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"result.parameters"),(0,l.kt)("td",{parentName:"tr",align:null},"collection"),(0,l.kt)("td",{parentName:"tr",align:null},"values for placeholders")))))),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"query")," function executes whenever a query using the calculated attribute is launched. It is useful to customize and optimize queries by relying on indexed attributes. When the ",(0,l.kt)("inlineCode",{parentName:"p"},"query")," function is not implemented for a calculated attribute, the search is always sequential (based upon the evaluation of all values using the ",(0,l.kt)("inlineCode",{parentName:"p"},"get <AttributeName>")," function)."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The following features are not supported:"),(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"calling a ",(0,l.kt)("inlineCode",{parentName:"li"},"query")," function on calculated attributes of type Entity or Entity selection, "),(0,l.kt)("li",{parentName:"ul"},"using the ",(0,l.kt)("inlineCode",{parentName:"li"},"order by")," keyword in the resulting query string."))),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"event")," parameter contains the following properties:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"attributeName"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Calculated attribute name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dataClassName"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Dataclass name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"kind"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},'"query"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"variant"),(0,l.kt)("td",{parentName:"tr",align:null},"Value to be handled by the calculated attribute")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"operator"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Query operator (see also the ",(0,l.kt)("a",{parentName:"td",href:"../language/DataClassClass.md#query"},(0,l.kt)("inlineCode",{parentName:"a"},"query")," class function"),"). Possible values:",(0,l.kt)("li",null,"== (equal to, @ is wildcard)"),(0,l.kt)("li",null,"=== (equal to, @ is not wildcard)"),(0,l.kt)("li",null,"!= (not equal to, @ is wildcard)"),(0,l.kt)("li",null,"!== (not equal to, @ is not wildcard)"),(0,l.kt)("li",null,"< (less than)"),(0,l.kt)("li",null,"<= (less than or equal to)"),(0,l.kt)("li",null,"> (greater than)"),(0,l.kt)("li",null,">= (greater than or equal to)"),(0,l.kt)("li",null,"IN (included in)"),(0,l.kt)("li",null,"% (contains keyword)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"result"),(0,l.kt)("td",{parentName:"tr",align:null},"variant"),(0,l.kt)("td",{parentName:"tr",align:null},"Value to be handled by the calculated attribute. Pass ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," in this property if you want to execute a default query (always sequential for calculated attributes).")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"If the function returns a value in ",(0,l.kt)("em",{parentName:"p"},"result")," and another value is assigned to the ",(0,l.kt)("inlineCode",{parentName:"p"},"event.result")," property, the priority is given to ",(0,l.kt)("inlineCode",{parentName:"p"},"event.result"),". ")),(0,l.kt)("h4",{id:"examples-1"},"Examples"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Query on the ",(0,l.kt)("em",{parentName:"li"},"fullName")," calculated attribute. ")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'function query fullName(event : object)->result : object\n\n    var fullname, firstname, lastname, myQuery : string\n    var operator, myQuery : string\n    var p : integer\n    var parameters : collection\n\n    operator=event.operator\n    fullname=event.value\n\n    p=position(" ",fullname) \n    if (p>0)\n        firstname=substring(fullname, 1, p-1)+"@"\n        lastname=substring(fullname, p+1)+"@"\n        parameters=newCollection(firstname, lastname) // two items collection\n    else \n        fullname=fullname+"@"\n        parameters=newCollection(fullname) // single item collection\n    end \n\n    switch \n    : (operator=="==") | (operator=="===")\n        if (p>0)\n            myQuery="(firstName = :1 and lastName = :2) or (firstName = :2 and lastName = :1)"\n        else \n            myQuery="firstName = :1 or lastName = :1"\n        end \n    : (operator="!=")\n        if (p>0)\n            myQuery="firstName != :1 and lastName != :2 and firstName != :2 and lastName != :1"\n        else \n            myQuery="firstName != :1 and lastName != :1"\n        end \n    end \n\n    result=newObject("query", myQuery, "parameters", parameters)\n')),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Keep in mind that using placeholders in queries based upon user text input is recommended for security reasons (see ",(0,l.kt)("a",{parentName:"p",href:"../language/DataClassClass.md#query"},(0,l.kt)("inlineCode",{parentName:"a"},"query()")," description"),").")),(0,l.kt)("p",null,"Calling code, for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'emps=ds.Employee.query("fullName = :1", "Flora Pionsin")\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"This function handles queries on the ",(0,l.kt)("em",{parentName:"li"},"age")," calculated attribute and returns an object with parameters:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'function query age(event : object)->result : object\n    \n    var operator, myQuery : string\n    var age : integer\n    \n    operator=event.operator\n            \n    age=num(event.value)  // integer\n    d1=addToDate(currentDate, -age-1, 0, 0)\n    d2=addToDate(d1, 1, 0, 0)\n    parameters=newCollection(d1, d2)\n    \n    switch \n            \n        : (operator=="==")\n            myQuery="birthday > :1 and birthday <= :2"  // after d1 and before or egal d2\n            \n        : (operator=="===") \n\n            myQuery="birthday = :2"  // d2 = second calculated date (= birthday date)\n\n        : (operator==">=")\n            myQuery="birthday <= :2"\n            \n            //... other operators           \n            \n            \n    end \n    \n    \n    if (undefined(event.result))\n        result=newObject\n        result.query=myQuery\n        result.parameters=parameters\n    end\n\n')),(0,l.kt)("p",null,"Calling code, for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'// people aged between 20 and 21 years (-1 day)\ntwenty=people.query("age = 20")  // calls the "==" case\n\n// people aged 20 years today\ntwentyToday=people.query("age === 20") // equivalent to people.query("age is 20") \n\n')),(0,l.kt)("h3",{id:"function-orderby-attributename"},(0,l.kt)("inlineCode",{parentName:"h3"},"function orderBy <attributeName>")),(0,l.kt)("h4",{id:"syntax-3"},"Syntax"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"function orderBy <attributeName>(event : object)\nfunction orderBy <attributeName>(event : object)-> result : string\n\n// code\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"orderBy")," function executes whenever the calculated attribute needs to be ordered. It allows sorting the calculated attribute. For example, you can sort ",(0,l.kt)("em",{parentName:"p"},"fullName")," on first names then last names, or conversely.\nWhen the ",(0,l.kt)("inlineCode",{parentName:"p"},"orderBy")," function is not implemented for a calculated attribute, the sort is always sequential (based upon the evaluation of all values using the ",(0,l.kt)("inlineCode",{parentName:"p"},"get <AttributeName>")," function)."),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Calling an ",(0,l.kt)("inlineCode",{parentName:"p"},"orderBy")," function on calculated attributes of type Entity class or Entity selection class ",(0,l.kt)("strong",{parentName:"p"},"is not supported"),". ")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"event")," parameter contains the following properties:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"attributeName"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Calculated attribute name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dataClassName"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Dataclass name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"kind"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},'"orderBy"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"variant"),(0,l.kt)("td",{parentName:"tr",align:null},"Value to be handled by the calculated attribute")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"operator"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},'"desc" or "asc" (default)')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"descending"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")," for descending order, ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," for ascending order")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"result"),(0,l.kt)("td",{parentName:"tr",align:null},"variant"),(0,l.kt)("td",{parentName:"tr",align:null},"Value to be handled by the calculated attribute. Pass ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," if you want to let Qodly execute the default sort.")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"You can use either the ",(0,l.kt)("inlineCode",{parentName:"p"},"operator")," or the ",(0,l.kt)("inlineCode",{parentName:"p"},"descending")," property. It is essentially a matter of programming style (see examples).   ")),(0,l.kt)("p",null,"You can return the ",(0,l.kt)("inlineCode",{parentName:"p"},"orderBy")," string either in the ",(0,l.kt)("inlineCode",{parentName:"p"},"event.result")," object property or in the ",(0,l.kt)("em",{parentName:"p"},"result")," function result. If the function returns a value in ",(0,l.kt)("em",{parentName:"p"},"result")," and another value is assigned to the ",(0,l.kt)("inlineCode",{parentName:"p"},"event.result")," property, the priority is given to ",(0,l.kt)("inlineCode",{parentName:"p"},"event.result"),". "),(0,l.kt)("h4",{id:"example-6"},"Example"),(0,l.kt)("p",null,"You can write conditional code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'function orderBy fullName(event : object)-> result : string\n    if (event.descending==true)\n        result="firstName desc, lastName desc" \n    else \n        result="firstName, lastName" \n    end\n')),(0,l.kt)("p",null,"You can also write compact code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'function orderBy fullName(event : object)-> result : string\n    result="firstName "+event.operator+", "lastName "+event.operator\n\n')),(0,l.kt)("p",null,"Conditional code is necessary in some cases:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'function orderBy age(event : object)-> result : string\n    if (event.descending==true)\n        result="birthday asc" \n    else \n        result="birthday desc" \n    end\n\n')),(0,l.kt)("h2",{id:"exposed-vs-non-exposed-functions"},"Exposed vs non-exposed functions"),(0,l.kt)("p",null,"For security reasons, all of your data model class functions are ",(0,l.kt)("strong",{parentName:"p"},"not exposed")," (i.e., private) by default to web requests. "),(0,l.kt)("p",null,'A function that is not exposed is not available from web requests and cannot be called on any object instance. You define non-exposed functions (as well as dataclasses or attributes) if you want them to be only available on the server through local code. If a web request tries to access a non-exposed function, the "-10729 - Unknown member method" error is returned. '),(0,l.kt)("p",null,"To allow a data model class function to be called by a remote request, you must explicitly declare it using the ",(0,l.kt)("inlineCode",{parentName:"p"},"exposed")," keyword. The formal syntax is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},"// declare an exposed function\nexposed function <functionName>   \n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"exposed")," keyword can only be used with Data model class functions. If used with a ",(0,l.kt)("a",{parentName:"p",href:"../language/basics/lang-classes.md"},"regular user class")," function, it is ignored.")),(0,l.kt)("h3",{id:"example-7"},"Example"),(0,l.kt)("p",null,"You want an exposed function to use a private function in a dataclass class:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'extends DataClass\n\n//Public function\nexposed function registerNewStudent(student : object) -> status : object\n\nvar entity : cs.StudentsEntity\n\nentity=ds.Students.new()\nentity.fromObject(student)\nentity.school=this.query("name=:1", student.schoolName).first()\nentity.idNumber=this.computeIDNumber()\nstatus=entity.save()\n\n//Not exposed (private) function\nfunction computeIDNumber()-> id : integer\n//compute a new ID number\nid=...\n\n')),(0,l.kt)("p",null,"When the code is called:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-qs"},'var student , status : object\nvar id : integer\n\nstudent=newObject("firstname", "Mary", "lastname", "Smith", "schoolName", "Math school")\n\nstatus=ds.Schools.registerNewStudent(student) //can be called from a web request\n// id=ds.Schools.computeIDNumber() // Error "Unknown member method" if called from a web request \n')))}m.isMDXComponent=!0},1873:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ClassDiagramImage-6cbf13bbf1dca5f0656fbdfad146e86f.png"},5773:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/functions-schema-3ca010ca9c3722923ef6d3976a00942d.png"},6476:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/structure3-3e17368a57aab8689325a062219e53a1.png"}}]);