"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[2917],{3905:(e,t,a)=>{a.d(t,{Zo:()=>b,kt:()=>u});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},b=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),m=s(a),c=l,u=m["".concat(p,".").concat(c)]||m[c]||d[c]||r;return a?n.createElement(u,o(o({ref:t},b),{},{components:a})):n.createElement(u,o({ref:t},b))}));function u(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1986:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var n=a(7462),l=(a(7294),a(3905));const r={id:"BlobClass",title:"Blob"},o=void 0,i={unversionedId:"language/BlobClass",id:"language/BlobClass",title:"Blob",description:"The Blob class lets you create and manipulate blob objects (4D.Blob).",source:"@site/docs/language/BlobClass.md",sourceDirName:"language",slug:"/language/BlobClass",permalink:"/docs/language/BlobClass",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/language/BlobClass.md",tags:[],version:"current",frontMatter:{id:"BlobClass",title:"Blob"},sidebar:"QodlyScript",previous:{title:"Pathnames",permalink:"/docs/language/basics/lang-pathnames"},next:{title:"Class",permalink:"/docs/language/ClassClass"}},p={},s=[{value:"Summary",id:"summary",level:3},{value:"4D.Blob.new()",id:"4dblobnew",level:2},{value:"Description",id:"description",level:4},{value:".size",id:"size",level:2},{value:"Description",id:"description-1",level:4},{value:".slice()",id:"slice",level:2},{value:"Description",id:"description-2",level:4},{value:"Example",id:"example",level:4}],b={toc:s};function m(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The Blob class lets you create and manipulate ",(0,l.kt)("a",{parentName:"p",href:"../basics/lang-blob.md#blob-types"},"blob objects")," (",(0,l.kt)("inlineCode",{parentName:"p"},"4D.Blob"),")."),(0,l.kt)("h3",{id:"summary"},"Summary"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#4dblobnew"},(0,l.kt)("strong",{parentName:"a"},"4D.Blob.new"),"() : 4D.Blob",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"a"},"4D.Blob.new"),"( ",(0,l.kt)("em",{parentName:"a"},"blobScal")," : Blob ) : 4D.Blob",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"a"},"4D.Blob.new"),"( ",(0,l.kt)("em",{parentName:"a"},"blobObj")," : 4D.Blob ) : 4D.Blob"),"\xa0","\xa0","\xa0","\xa0","creates a new ",(0,l.kt)("inlineCode",{parentName:"td"},"4D.Blob")," object optionally encapsulating a copy of the data from another blob (scalar blob or ",(0,l.kt)("inlineCode",{parentName:"td"},"4D.Blob"),")")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#size"},(0,l.kt)("strong",{parentName:"a"},".size")," : Real"),"\xa0","\xa0","\xa0","\xa0","returns the size of a ",(0,l.kt)("inlineCode",{parentName:"td"},"4D.Blob"),", expressed in bytes.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#slice"},(0,l.kt)("strong",{parentName:"a"},".slice"),"() : 4D.Blob",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"a"},".slice"),"( ",(0,l.kt)("em",{parentName:"a"},"start")," : Real ) : 4D.Blob",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"a"},".slice"),"( ",(0,l.kt)("em",{parentName:"a"},"start")," : Real; ",(0,l.kt)("em",{parentName:"a"},"end")," : Real ) : 4D.Blob"),"\xa0","\xa0","\xa0","\xa0"," creates and returns a ",(0,l.kt)("inlineCode",{parentName:"td"},"4D.Blob ")," that references data from a subset of the blob on which it's called. The original blob is not altered.")))),(0,l.kt)("h2",{id:"4dblobnew"},"4D.Blob.new()"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"4D.Blob.new"),"() : 4D.Blob",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"p"},"4D.Blob.new"),"( ",(0,l.kt)("em",{parentName:"p"},"blobScal")," : Blob ) : 4D.Blob",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"p"},"4D.Blob.new"),"( ",(0,l.kt)("em",{parentName:"p"},"blobObj")," : 4D.Blob ) : 4D.Blob"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"}),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"blob"),(0,l.kt)("td",{parentName:"tr",align:null},"Blob or 4D.Blob"),(0,l.kt)("td",{parentName:"tr",align:"center"},"->"),(0,l.kt)("td",{parentName:"tr",align:null},"Blob to copy")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Result"),(0,l.kt)("td",{parentName:"tr",align:null},"4D.Blob"),(0,l.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,l.kt)("td",{parentName:"tr",align:null},"New 4D.Blob")))),(0,l.kt)("h4",{id:"description"},"Description"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"4D.Blob.new")," creates a new ",(0,l.kt)("inlineCode",{parentName:"p"},"4D.Blob")," object optionally encapsulating a copy of the data from another blob (scalar blob or ",(0,l.kt)("inlineCode",{parentName:"p"},"4D.Blob"),")."),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"blob")," parameter is omitted, the method returns an empty 4D.Blob."),(0,l.kt)("h2",{id:"size"},".size"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},".size")," : Real"),(0,l.kt)("h4",{id:"description-1"},"Description"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},".size")," property returns the size of a ",(0,l.kt)("inlineCode",{parentName:"p"},"4D.Blob"),", expressed in bytes."),(0,l.kt)("h2",{id:"slice"},".slice()"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},".slice"),"() : 4D.Blob",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"p"},".slice"),"( ",(0,l.kt)("em",{parentName:"p"},"start")," : Real ) : 4D.Blob",(0,l.kt)("br",null),(0,l.kt)("strong",{parentName:"p"},".slice"),"( ",(0,l.kt)("em",{parentName:"p"},"start")," : Real; ",(0,l.kt)("em",{parentName:"p"},"end")," : Real ) : 4D.Blob"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:"center"}),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"start"),(0,l.kt)("td",{parentName:"tr",align:null},"Real"),(0,l.kt)("td",{parentName:"tr",align:"center"},"->"),(0,l.kt)("td",{parentName:"tr",align:null},"index of the first byte to include in the new ",(0,l.kt)("inlineCode",{parentName:"td"},"4D.Blob"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"end"),(0,l.kt)("td",{parentName:"tr",align:null},"Real"),(0,l.kt)("td",{parentName:"tr",align:"center"},"->"),(0,l.kt)("td",{parentName:"tr",align:null},"index of the first byte that will not be included in the new ",(0,l.kt)("inlineCode",{parentName:"td"},"4D.Blob"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Result"),(0,l.kt)("td",{parentName:"tr",align:null},"4D.Blob"),(0,l.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,l.kt)("td",{parentName:"tr",align:null},"New ",(0,l.kt)("inlineCode",{parentName:"td"},"4D.Blob"))))),(0,l.kt)("h4",{id:"description-2"},"Description"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".slice()"),"  creates and returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"4D.Blob ")," that references data from a subset of the blob on which it's called. The original blob is not altered."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"start")," parameter is an index into the blob indicating the first byte to include in the new ",(0,l.kt)("inlineCode",{parentName:"p"},"4D.Blob"),". If you specify a negative value, 4D treats it as an offset from the end of the blob toward the beginning. For example, -10 would be the 10th from last byte in the blob. The default value is 0. If you specify a value for start that is larger than the size of the source blob, the returned ",(0,l.kt)("inlineCode",{parentName:"p"},"4D.Blob"),"'s size is 0, and it contains no data."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"end")," parameter is an index into the blob indicating the first byte that will not be included in the new ",(0,l.kt)("inlineCode",{parentName:"p"},"4D.Blob")," (i.e. the byte exactly at this index is not included). If you specify a negative value, 4D treats it as an offset from the end of the blob toward the beginning. For example, -10 would be the 10th from last byte in the blob. The default value is the size of the blob."),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-4d"},'var myBlob, myNewBlob : 4D.Blob\nvar is4DBlob : Boolean\nvar myString : Text\n\n// Store text in a 4D.Blob\nCONVERT FROM TEXT("Hello, World!", "UTF-8", myBlob)\nis4DBlob=OB Instance of(myBlob, 4D.Blob);   //True\n\nmyString=Convert to text(myBlob, "UTF-8")\n// myString contains "Hello, World!"\n\n// Create a new 4D.Blob from myBlob\nmyNewBlob=myBlob.slice(0, 5)\n\nmyString=Convert to text(myNewBlob, "UTF-8")\n// myString contains "Hello"\n')))}m.isMDXComponent=!0}}]);