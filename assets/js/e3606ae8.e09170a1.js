"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([["66025"],{79583:function(e,n,t){t.r(n),t.d(n,{metadata:()=>s,contentTitle:()=>r,default:()=>h,assets:()=>l,toc:()=>d,frontMatter:()=>a});var s=JSON.parse('{"id":"language/commands/setRealComparisonLevel","title":"setRealComparisonLevel","description":"setRealComparisonLevel ( epsilon : number )","source":"@site/versioned_docs/version-1.0.0/language/commands/setRealComparisonLevel.md","sourceDirName":"language/commands","slug":"/language/commands/setRealComparisonLevel","permalink":"/docs/language/commands/setRealComparisonLevel","draft":false,"unlisted":false,"editUrl":"https://github.com/docQodly/docs/edit/main/versioned_docs/version-1.0.0/language/commands/setRealComparisonLevel.md","tags":[],"version":"1.0.0","frontMatter":{"id":"setRealComparisonLevel","title":"setRealComparisonLevel"},"sidebar":"Develop","previous":{"title":"setPictureMetadata","permalink":"/docs/language/commands/setPictureMetadata"},"next":{"title":"sin","permalink":"/docs/language/commands/sin"}}'),i=t("85893"),o=t("50065");let a={id:"setRealComparisonLevel",title:"setRealComparisonLevel"},r=void 0,l={},d=[{value:"Description",id:"description",level:4}];function c(e){let n={admonition:"admonition",code:"code",em:"em",h4:"h4",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"setRealComparisonLevel"}),"* ( ",(0,i.jsx)(n.em,{children:"epsilon"})," : number )"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"center"}}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"epsilon"}),(0,i.jsx)(n.td,{children:"number"}),(0,i.jsx)(n.td,{style:{textAlign:"center"},children:"\u2192"}),(0,i.jsx)(n.td,{children:"Epsilon value for real equality comparisons"})]})})]}),"\n",(0,i.jsx)(n.h4,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"setRealComparisonLevel"})," command sets the ",(0,i.jsx)(n.em,{children:"epsilon"})," value used by Qodly to compare real values and expressions for equality."]}),"\n",(0,i.jsx)(n.p,{children:"A computer always performs approximative real computations; therefore, testing real numbers for equality should take this approximation into account. Qodly does this when comparing real numbers by testing whether or not the difference between the two numbers exceeds a certain value. This value is called the epsilon and works this way:"}),"\n",(0,i.jsxs)(n.p,{children:["Given two real numbers ",(0,i.jsx)(n.em,{children:"a"})," and ",(0,i.jsx)(n.em,{children:"b"}),", if ",(0,i.jsx)(n.code,{children:"abs(a-b)"})," is greater than the epsilon, the numbers are considered not equal; otherwise, the numbers are considered equal."]}),"\n",(0,i.jsx)(n.p,{children:"By default, Qodly sets the epsilon value to 10 power minus 6 (10^-6). Please note that the epsilon value should always be positive. Examples:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"0.00001 = 0.00002 returns false, because the difference 0.00001 is greater than 10^-6."}),"\n",(0,i.jsx)(n.li,{children:"0.000001 = 0.000002 returns true, because the difference 0.000001 is not greater than 10^-6."}),"\n",(0,i.jsx)(n.li,{children:"0.000001 = 0.000003 returns false, because the difference 0.000002 is greater than 10^-6."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.code,{children:"setRealComparisonLevel"}),", you can increase or decrease the epsilon value as you require."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The command will have no effect if ",(0,i.jsx)(n.em,{children:"epsilon"})," > 10^-3 or if ",(0,i.jsx)(n.em,{children:"epsilon"})," < 0."]})}),"\n",(0,i.jsx)(n.p,{children:"Changing the epsilon only affects real number comparison for equality. It has no effect on other real computations nor on the display of real values."}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"This command should be used in specific cases, such as sorting on an attribute with values less than 10^-6. Usually, you will not need to change the default epsilon value."})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"setRealComparisonLevel"})," command has no effect on queries and sorts performed with attributes of the Number type. It only applies the Qodly language."]})})]})}function h(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:function(){return r},a:function(){return a}});var s=t(67294);let i={},o=s.createContext(i);function a(e){let n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);