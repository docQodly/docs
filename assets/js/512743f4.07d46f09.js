"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[2810],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(i,".").concat(h)]||p[h]||u[h]||r;return n?a.createElement(m,s(s({ref:t},d),{},{components:n})):a.createElement(m,s({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:o,s[1]=l;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},14760:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={id:"lang-shared",title:"Shared objects and collections"},s=void 0,l={unversionedId:"language/basics/lang-shared",id:"language/basics/lang-shared",title:"Shared objects and collections",description:"Shared objects and shared collections are specific objects and collections whose contents are shared between processes. Shared objects and shared collections are compatible with preemptive processes: they can be passed by reference as parameters to commands such as callWorker.",source:"@site/docs/language/basics/lang-shared.md",sourceDirName:"language/basics",slug:"/language/basics/lang-shared",permalink:"/docs/language/basics/lang-shared",draft:!1,editUrl:"https://github.com/qodly/docs/edit/main/docs/language/basics/lang-shared.md",tags:[],version:"current",frontMatter:{id:"lang-shared",title:"Shared objects and collections"},sidebar:"Develop",previous:{title:"Expressions",permalink:"/docs/language/basics/lang-expressions"},next:{title:"Control flow",permalink:"/docs/language/basics/lang-control-flow"}},i={},c=[{value:"Using shared objects or collections",id:"using-shared-objects-or-collections",level:2},{value:"Modification",id:"modification",level:3},{value:"Read",id:"read",level:3},{value:"Duplication",id:"duplication",level:3},{value:"Storage",id:"storage",level:3},{value:"use...end",id:"useend",level:2},{value:"Examples",id:"examples",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Shared objects")," and ",(0,o.kt)("strong",{parentName:"p"},"shared collections")," are specific ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/basics/lang-object"},"objects")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/basics/lang-collection"},"collections")," whose contents are shared between processes. Shared objects and shared collections are compatible with ",(0,o.kt)("strong",{parentName:"p"},"preemptive processes"),": they can be passed by reference as parameters to commands such as ",(0,o.kt)("inlineCode",{parentName:"p"},"callWorker"),"."),(0,o.kt)("p",null,"Shared objects and shared collections can be stored in standard ",(0,o.kt)("inlineCode",{parentName:"p"},"object")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"collection")," type ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/basics/lang-variables"},"variables"),", but must be instantiated using specific commands:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"to create a shared object, use the ",(0,o.kt)("a",{parentName:"li",href:"/docs/language/object#newsharedobject"},(0,o.kt)("inlineCode",{parentName:"a"},"newSharedObject"))," command,"),(0,o.kt)("li",{parentName:"ul"},"to create a shared collection, use the ",(0,o.kt)("a",{parentName:"li",href:"/docs/language/CollectionClass#newsharedcollection"},(0,o.kt)("inlineCode",{parentName:"a"},"newSharedCollection"))," command.")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Shared objects and collections can be set as properties of standard (not shared) objects or collections.")),(0,o.kt)("p",null,"In order to modify a shared object/collection, the ",(0,o.kt)("strong",{parentName:"p"},"use...end")," structure must be called. Reading a shared object/collection value does not require ",(0,o.kt)("strong",{parentName:"p"},"use...end"),"."),(0,o.kt)("p",null,"To know if an object or a collection is shared, use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/object#objectisshared"},(0,o.kt)("inlineCode",{parentName:"a"},"objectIsShared"))," command. "),(0,o.kt)("p",null,"A unique, global catalog returned by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/object#storage"},(0,o.kt)("inlineCode",{parentName:"a"},"storage"))," command is always available throughout the project, and can be used to store all shared objects and collections. "),(0,o.kt)("h2",{id:"using-shared-objects-or-collections"},"Using shared objects or collections"),(0,o.kt)("p",null,"Once instantiated with the ",(0,o.kt)("inlineCode",{parentName:"p"},"newSharedObject")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"newSharedCollection")," command, shared object/collection properties and elements can be modified or read from any process of the application."),(0,o.kt)("h3",{id:"modification"},"Modification"),(0,o.kt)("p",null,"Modifications can be applied to shared objects and shared collections:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"adding or removing object properties,"),(0,o.kt)("li",{parentName:"ul"},"adding or editing values (provided they are supported in shared objects), including other shared objects or collections (which creates a shared group, see below).")),(0,o.kt)("p",null,"However, all modification instructions in a shared object or collection must be surrounded by the ",(0,o.kt)("inlineCode",{parentName:"p"},"use...end")," keywords, otherwise an error is generated."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qs"},'s_obj=newSharedObject("prop1","alpha")\nuse(s_obj)\n   s_obj.prop1="omega"\nend\n')),(0,o.kt)("p",null,"A shared object/collection can only be modified by one process at a time. ",(0,o.kt)("inlineCode",{parentName:"p"},"use")," locks the shared object/collection from other threads, while ",(0,o.kt)("inlineCode",{parentName:"p"},"end")," unlocks the shared object/collection (if the locking counter is at 0, see below). Trying to modify a shared object/collection without at least one ",(0,o.kt)("inlineCode",{parentName:"p"},"use...end")," generates an error. When a process calls ",(0,o.kt)("inlineCode",{parentName:"p"},"use...end")," on a shared object/collection that is already in use by another process, it is simply put on hold until the ",(0,o.kt)("inlineCode",{parentName:"p"},"end")," unlocks it (no error is generated). Consequently, instructions within ",(0,o.kt)("inlineCode",{parentName:"p"},"use...end")," structures should execute quickly and unlock the elements as soon as possible. Thus, it is strongly advised to avoid modifying a shared object or collection directly from the interface, e.g. through a web form."),(0,o.kt)("p",null,"Assigning shared objects/collections to properties or elements of other shared objects/collections is allowed and creates ",(0,o.kt)("strong",{parentName:"p"},"shared groups"),". A shared group is automatically created when a shared object/collection is set as property value or element of another shared object/collection. Shared groups allow nesting shared objects and collections but enforce additional rules:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Calling ",(0,o.kt)("inlineCode",{parentName:"li"},"use")," on a shared object/collection belonging to a group locks properties/elements of all shared objects/collections of the group and increments its locking counter. Calling ",(0,o.kt)("inlineCode",{parentName:"li"},"end")," decrements the locking counter of the group and when the counter is at 0, all the linked shared objects/collections are unlocked."),(0,o.kt)("li",{parentName:"ul"},"A shared object/collection can only belong to one shared group. An error is returned if you try to set an already grouped shared object/collection to a different group."),(0,o.kt)("li",{parentName:"ul"},"Grouped shared objects/collections cannot be ungrouped. Once included in a shared group, a shared object/collection is linked permanently to that group during the whole session. Even if all references of an object/collection are removed from the parent object/collection, they will remain linked. ")),(0,o.kt)("p",null,"Please refer to example 2 for an illustration of shared group rules."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Shared groups are managed through an internal property named ",(0,o.kt)("em",{parentName:"p"},"locking identifier"),". ")),(0,o.kt)("h3",{id:"read"},"Read"),(0,o.kt)("p",null,"Reading properties or elements of a shared object/collection is allowed without having to call the ",(0,o.kt)("inlineCode",{parentName:"p"},"use...end")," structure, even if the shared object/collection is in use by another process."),(0,o.kt)("p",null,"However, it is necessary to read a shared object/collection within ",(0,o.kt)("inlineCode",{parentName:"p"},"use...end")," when several values are linked together and must be read at once, for consistency reasons."),(0,o.kt)("h3",{id:"duplication"},"Duplication"),(0,o.kt)("p",null,"Calling ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/object#objectcopy"},(0,o.kt)("inlineCode",{parentName:"a"},"objectCopy"))," with a shared object or with an object containing shared object(s) as properties is possible, but will return a standard (not shared) object including its contained objects (if any)."),(0,o.kt)("h3",{id:"storage"},"Storage"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"storage")," is a unique shared object, automatically available on each project. This shared object is returned by the ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/object#storage"},(0,o.kt)("inlineCode",{parentName:"a"},"storage"))," command. You can use this object to reference all shared objects/collections defined during the session that you want to be available from any preemptive or standard processes."),(0,o.kt)("p",null,"Note that, unlike standard shared objects, the ",(0,o.kt)("strong",{parentName:"p"},"storage")," object does not create a shared group when shared objects/collections are added as its properties. This exception allows the ",(0,o.kt)("strong",{parentName:"p"},"storage")," object to be used without locking all connected shared objects or collections."),(0,o.kt)("p",null,"For more information, refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/object#storage"},(0,o.kt)("inlineCode",{parentName:"a"},"storage")," command description"),"."),(0,o.kt)("h2",{id:"useend"},"use...end"),(0,o.kt)("p",null,"The formal syntax of the ",(0,o.kt)("inlineCode",{parentName:"p"},"use...end")," structure is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qs"}," use(Shared_object_or_Shared_collection)\n    statement(s)\n end\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"use...end")," structure defines a sequence of statements that will execute tasks on the ",(0,o.kt)("em",{parentName:"p"},"Shared_object_or_Shared_collection")," parameter under the protection of an internal semaphore. ",(0,o.kt)("em",{parentName:"p"},"Shared_object_or_Shared_collection")," can be any valid shared object or shared collection."),(0,o.kt)("p",null,"Shared objects and shared collections are designed to allow communication between processes, in particular, ",(0,o.kt)("strong",{parentName:"p"},"preemptive processes"),". They can be passed by reference as parameters from a process to another one. Surrounding modifications on shared objects or shared collections by the ",(0,o.kt)("inlineCode",{parentName:"p"},"use...end")," keywords is mandatory to prevent concurrent access between processes."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Once the ",(0,o.kt)("strong",{parentName:"li"},"use")," line is successfully executed, all ",(0,o.kt)("em",{parentName:"li"},"Shared_object_or_Shared_collection")," properties/elements are locked for all other process in write access until the corresponding ",(0,o.kt)("inlineCode",{parentName:"li"},"end")," line is executed."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("em",{parentName:"li"},"statement(s)")," sequence can execute any modification on the ",(0,o.kt)("em",{parentName:"li"},"Shared_object_or_Shared_collection")," properties/elements without risk of concurrent access."),(0,o.kt)("li",{parentName:"ul"},"If another shared object or collection is added as a property of the ",(0,o.kt)("em",{parentName:"li"},"Shared_object_or_Shared_collection")," parameter, they become connected within the same shared group."),(0,o.kt)("li",{parentName:"ul"},"If another process tries to access one of the ",(0,o.kt)("em",{parentName:"li"},"Shared_object_or_Shared_collection")," properties or connected properties while a ",(0,o.kt)("strong",{parentName:"li"},"use...end")," sequence is being executed, it is automatically put on hold and waits until the current sequence is terminated. "),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("strong",{parentName:"li"},"end")," line unlocks the ",(0,o.kt)("em",{parentName:"li"},"Shared_object_or_Shared_collection")," properties and all objects of the same group."),(0,o.kt)("li",{parentName:"ul"},"Several ",(0,o.kt)("strong",{parentName:"li"},"use...end")," structures can be nested in the QodlyScript code. In the case of a group, each ",(0,o.kt)("strong",{parentName:"li"},"use")," increments the locking counter of the group and each ",(0,o.kt)("strong",{parentName:"li"},"end")," decrements it; all properties/elements will be released only when the last ",(0,o.kt)("strong",{parentName:"li"},"end")," call sets the locking counter to 0. ")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If a function of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/CollectionClass"},"collection class")," modifies a shared collection, an internal ",(0,o.kt)("strong",{parentName:"p"},"use")," is automatically called for this shared collection while the function is executed. ")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("p",null,"The following examples highlight specific rules when handling shared groups:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qs"}," ob1=newSharedObject\n ob2=newSharedObject\n use(ob1)\n    ob1.a=ob2  //group 1 is created\n end\n \n ob3=newSharedObject\n ob4=newSharedObject\n use(ob3)\n    ob3.a=ob4  //group 2 is created\n end\n \n use(ob1) //use an object from group 1\n    ob1.b=ob4  //ERROR\n  //ob4 already belongs to another group\n  //assignment is not allowed\n end\n \n use(ob3)\n    ob3.a=null //remove any reference to ob4 from group 2\n end\n \n use(ob1) //use an object from group 1\n    ob1.b=ob4  //ERROR\n  //ob4 still belongs to group 2\n  //assignment is not allowed\n end\n")))}p.isMDXComponent=!0}}]);