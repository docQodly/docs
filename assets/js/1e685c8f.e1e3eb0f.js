"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[6205],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},y=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(n),y=a,c=d["".concat(s,".").concat(y)]||d[y]||u[y]||r;return n?i.createElement(c,l(l({ref:t},m),{},{components:n})):i.createElement(c,l({ref:t},m))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}y.displayName="MDXCreateElement"},1167:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=n(87462),a=(n(67294),n(3905));const r={id:"$entityset",title:"$entityset"},l=void 0,o={unversionedId:"api/$entityset",id:"api/$entityset",title:"$entityset",description:"Functionality",source:"@site/docs/api/$entityset.md",sourceDirName:"api",slug:"/api/$entityset",permalink:"/docs/api/$entityset",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/api/$entityset.md",tags:[],version:"current",frontMatter:{id:"$entityset",title:"$entityset"},sidebar:"API",previous:{title:"$distinct",permalink:"/docs/api/$distinct"},next:{title:"$expand",permalink:"/docs/api/$expand"}},s={},p=[{value:"Functionality",id:"functionality",level:2},{value:"Definition",id:"definition",level:3},{value:"Syntaxes",id:"syntaxes",level:3},{value:"Use Cases",id:"use-cases",level:2},{value:"Retrieving an Existing Entity Set",id:"retrieving-an-existing-entity-set",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Operations",id:"operations",level:4},{value:"Example",id:"example",level:4},{value:"Creating a New Entity Set from Existing Ones",id:"creating-a-new-entity-set-from-existing-ones",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Logical Operators",id:"logical-operators",level:4},{value:"Example",id:"example-1",level:4},{value:"Best Practices",id:"best-practices",level:2}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"functionality"},"Functionality"),(0,a.kt)("h3",{id:"definition"},"Definition"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"$entityset")," endpoint enables you to manage and manipulate entity sets in your data collection. After creating an entity set using the ",(0,a.kt)("inlineCode",{parentName:"p"},"$method=entityset")," parameter, you can perform various operations on these entity sets to retrieve, compare, and combine them as needed."),(0,a.kt)("h3",{id:"syntaxes"},"Syntaxes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,a.kt)("th",{parentName:"tr",align:null},"Example"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#retrieving-an-existing-entity-set"},(0,a.kt)("strong",{parentName:"a"},"$entityset/{entitySetID}"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/People/$entityset/0ANUMBER")),(0,a.kt)("td",{parentName:"tr",align:null},"Retrieves an existing entity set")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"#creating-a-new-entity-set-from-existing-ones"},(0,a.kt)("strong",{parentName:"a"},"$entityset/{entitySetID}?$operator...&$otherCollection"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"/Employee/$entityset/0ANUMBER?$logicOperator=AND&$otherCollection=C0ANUMBER")),(0,a.kt)("td",{parentName:"tr",align:null},"Creates a new entity set by comparing existing entity sets")))),(0,a.kt)("h2",{id:"use-cases"},"Use Cases"),(0,a.kt)("h3",{id:"retrieving-an-existing-entity-set"},"Retrieving an Existing Entity Set"),(0,a.kt)("p",null,"You can retrieve an existing entity set by its ID. This allows you to execute operations on a previously defined entity set. Entity sets have a time limit, either by default or as specified using the ",(0,a.kt)("inlineCode",{parentName:"p"},"$timeout")," parameter. You can also save filter and order by statements with ",(0,a.kt)("inlineCode",{parentName:"p"},"$savedfilter")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$savedorderby")," when creating an entity set."),(0,a.kt)("h4",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET /rest/{{dataClass}}/$entityset/{{entitySetID}}\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"entitySetID"),": The unique ID of the entity set."))),(0,a.kt)("h4",{id:"operations"},"Operations"),(0,a.kt)("p",null,"When you retrieve an existing entity set, you can apply any of the following operations to it:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$expand"),": Expand related entities."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$filter"),": Apply filter criteria."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$orderby"),": Order the results."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$skip"),": Skip a specified number of entities."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$top"),"/",(0,a.kt)("inlineCode",{parentName:"li"},"$limit"),": Limit the number of entities returned.")),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("p",null,"After creating an entity set, you retrieve it as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET /rest/Employee/$entityset/9718A30BF61343C796345F3BE5B01CE7\n")),(0,a.kt)("h3",{id:"creating-a-new-entity-set-from-existing-ones"},"Creating a New Entity Set from Existing Ones"),(0,a.kt)("p",null,"You can create a new entity set by comparing two existing entity sets using logical operators. The logical operators define the relationship between the two sets, such as intersection, union, and difference."),(0,a.kt)("h4",{id:"syntax-1"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET /rest/{{dataClass}}/$entityset/{{entitySetID}}?$logicOperator={{operator}}&$otherCollection={{otherEntitySetID}}&$method=entityset\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"entitySetID"),": The unique ID of the first entity set."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$logicOperator"),": The logical operator to apply (AND, OR, EXCEPT, INTERSECT)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"$otherCollection"),": The unique ID of the second entity set."))),(0,a.kt)("h4",{id:"logical-operators"},"Logical Operators"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Operator"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"AND"),(0,a.kt)("td",{parentName:"tr",align:null},"Returns the entities common to both entity sets")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"OR"),(0,a.kt)("td",{parentName:"tr",align:null},"Returns the entities in either entity set")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"EXCEPT"),(0,a.kt)("td",{parentName:"tr",align:null},"Returns the entities in the first entity set minus those in the second")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"INTERSECT"),(0,a.kt)("td",{parentName:"tr",align:null},"Returns true if there is an intersection, otherwise false")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},'Logical operators are not case-sensitive (e.g., "AND" or "and").')),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Using AND to Return Common Entities")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET /rest/Employee/$entityset/9718A30BF61343C796345F3BE5B01CE7?$logicOperator=AND&$otherCollection=C05A0D887C664D4DA1B38366DD21629B\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Using INTERSECT to Check for Intersection")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET /rest/Employee/$entityset/9718A30BF61343C796345F3BE5B01CE7?$logicOperator=INTERSECT&$otherCollection=C05A0D887C664D4DA1B38366DD21629B\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If there is an intersection, this query returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". Otherwise, it returns ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Using OR to Combine Entity Sets")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET /rest/Employee/$entityset/9718A30BF61343C796345F3BE5B01CE7?$logicOperator=OR&$otherCollection=C05A0D887C664D4DA1B38366DD21629B&$method=entityset\n")),(0,a.kt)("p",null,"This query creates a new entity set that combines all the entities from both entity sets."),(0,a.kt)("h2",{id:"best-practices"},"Best Practices"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Manage Time Limits:")," Be aware of the time limits on entity sets and use ",(0,a.kt)("inlineCode",{parentName:"p"},"$timeout")," to specify your limits if needed.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Save Filters and Orderings:")," Use ",(0,a.kt)("inlineCode",{parentName:"p"},"$savedfilter")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$savedorderby")," to save filter and order by statements for future use.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Efficient Comparisons:")," Use logical operators to efficiently compare and combine entity sets."))))}d.isMDXComponent=!0}}]);