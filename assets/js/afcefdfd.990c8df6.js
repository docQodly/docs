"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([["4775"],{55061:function(e,s,n){n.r(s),n.d(s,{metadata:()=>r,contentTitle:()=>c,default:()=>a,assets:()=>l,toc:()=>h,frontMatter:()=>d});var r=JSON.parse('{"id":"language/CryptoKeyClass","title":"CryptoKey","description":"The CryptoKey class in QodlyScript encapsulates an asymmetric encryption key pair.","source":"@site/versioned_docs/version-1.0.0/language/CryptoKeyClass.md","sourceDirName":"language","slug":"/language/CryptoKeyClass","permalink":"/docs/language/CryptoKeyClass","draft":false,"unlisted":false,"editUrl":"https://github.com/qodly/docs/issues/new?title=Comment%20on%20language%2FCryptoKeyClass.md%20(1.0.0)&body=Share%20any%20feedback%20about%20this%20page%20%E2%80%94%20report%20issues%2C%20suggest%20improvements%2C%20or%20tell%20us%20what%E2%80%99s%20helpful.%0A%0AIf%20it%E2%80%99s%20an%20issue%3A%0A-%20What%E2%80%99s%20the%20issue%3F%20(e.g.%2C%20typo%2C%20incorrect%20information%2C%20unclear%20explanation)%0A-%20Where%20is%20it%3F%20(e.g.%2C%20section%20name%2C%20specific%20paragraph%2C%20or%20line)%0A%0AThank%20you%20for%20helping%20us%20improve!%20%F0%9F%9A%80%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20","tags":[],"version":"1.0.0","frontMatter":{"id":"CryptoKeyClass","title":"CryptoKey"},"sidebar":"Develop","previous":{"title":"Collection","permalink":"/docs/language/CollectionClass"},"next":{"title":"DataClass","permalink":"/docs/language/DataClassClass"}}'),t=n("85893"),i=n("50065");let d={id:"CryptoKeyClass",title:"CryptoKey"},c=void 0,l={},h=[{value:"Example",id:"example",level:3},{value:"Functions and properties",id:"functions-and-properties",level:3},{value:"4D.CryptoKey.new()",id:"4dcryptokeynew",level:2},{value:"<em>settings</em>",id:"settings",level:4},{value:"<em>CryptoKey</em>",id:"cryptokey",level:4},{value:".curve",id:"curve",level:2},{value:".decrypt()",id:"decrypt",level:2},{value:"<em>options</em>",id:"options",level:4},{value:"<em>Result</em>",id:"result",level:4},{value:".encrypt()",id:"encrypt",level:2},{value:"<em>options</em>",id:"options-1",level:5},{value:"<em>Result</em>",id:"result-1",level:4},{value:".getPrivateKey()",id:"getprivatekey",level:2},{value:"<em>Result</em>",id:"result-2",level:4},{value:".getPublicKey()",id:"getpublickey",level:2},{value:"<em>Result</em>",id:"result-3",level:4},{value:".pem",id:"pem",level:2},{value:".sign()",id:"sign",level:2},{value:"<em>options</em>",id:"options-2",level:4},{value:"<em>Result</em>",id:"result-4",level:4},{value:".size",id:"size",level:2},{value:".type",id:"type",level:2},{value:".verify()",id:"verify",level:2},{value:"<em>options</em>",id:"options-3",level:4},{value:"<em>Result</em>",id:"result-5",level:4}];function o(e){let s={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CryptoKey"})," class in QodlyScript encapsulates an asymmetric encryption key pair."]}),"\n",(0,t.jsxs)(s.p,{children:["This class is available from the ",(0,t.jsx)(s.code,{children:"4D"})," class store."]}),"\n",(0,t.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(s.p,{children:"The following sample code signs and verifies a message using a new ECDSA key pair, for example in order to make a ES256 JSON Web token."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-qs",children:' // Generate a new ECDSA key pair\nvar key : 4D.CryptoKey\nkey = 4D.CryptoKey.new(newobject("type","ECDSA","curve","prime256v1"))\n\n  // Get signature as base64\nvar message, signature : string\nmessage = "hello world"\nsignature = key.sign(message,newobject("hash","SHA256"))\n\n  // Verify signature\nvar status : object\nstatus = key.verify(message,signature,newobject("hash","SHA256"))\nassert(status.success)\n'})}),"\n",(0,t.jsx)(s.h3,{id:"functions-and-properties",children:"Functions and properties"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsx)(s.tr,{children:(0,t.jsx)(s.th,{})})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#4dcryptokeynew",children:[(0,t.jsx)(s.strong,{children:"4D.CryptoKey.new"}),"( ",(0,t.jsx)(s.em,{children:"settings"})," : object ) : 4D.CryptoKey"]}),"\xa0\xa0\xa0\xa0creates a new ",(0,t.jsx)(s.code,{children:"4D.CryptoKey"})," object encapsulating an encryption key pair"]})}),(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#curve",children:[(0,t.jsx)(s.strong,{children:".curve"})," : string"]}),"\xa0\xa0\xa0\xa0normalised curve name of the key"]})}),(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#decrypt",children:[(0,t.jsx)(s.strong,{children:".decrypt"}),"( ",(0,t.jsx)(s.em,{children:"message"})," : string , ",(0,t.jsx)(s.em,{children:"options"})," : object ) : object"]}),"\xa0\xa0\xa0\xa0decrypts the ",(0,t.jsx)(s.em,{children:"message"})," parameter using the ",(0,t.jsx)(s.strong,{children:"private"})," key"]})}),(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#encrypt",children:[(0,t.jsx)(s.strong,{children:".encrypt"}),"( ",(0,t.jsx)(s.em,{children:"message"})," : string , ",(0,t.jsx)(s.em,{children:"options"})," : object ) : string"]}),"\xa0\xa0\xa0\xa0encrypts the ",(0,t.jsx)(s.em,{children:"message"})," parameter using the ",(0,t.jsx)(s.strong,{children:"public"})," key"]})}),(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#getprivatekey",children:[(0,t.jsx)(s.strong,{children:".getPrivateKey"}),"() : string"]}),"\xa0\xa0\xa0\xa0returns the private key of the ",(0,t.jsx)(s.code,{children:"CryptoKey"})," object"]})}),(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#getpublickey",children:[(0,t.jsx)(s.strong,{children:".getPublicKey"}),"() : string"]}),"\xa0\xa0\xa0\xa0returns the public key of the ",(0,t.jsx)(s.code,{children:"CryptoKey"})," object"]})}),(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#sign",children:[".",(0,t.jsx)(s.strong,{children:"sign"})," (",(0,t.jsx)(s.em,{children:"message"})," : string , ",(0,t.jsx)(s.em,{children:"options"})," : object) : string"]}),"\xa0\xa0\xa0\xa0signs the utf8 representation of a ",(0,t.jsx)(s.em,{children:"message"})," string"]})}),(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#size",children:[(0,t.jsx)(s.strong,{children:".size"})," : integer"]}),"\xa0\xa0\xa0\xa0the size of the key in bits"]})}),(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#type",children:[(0,t.jsx)(s.strong,{children:".type"})," : string"]}),'\xa0\xa0\xa0\xa0name of the key type - "RSA", "ECDSA", "PEM"']})}),(0,t.jsx)(s.tr,{children:(0,t.jsxs)(s.td,{children:[(0,t.jsxs)(s.a,{href:"#verify",children:[(0,t.jsx)(s.strong,{children:".verify"}),"( ",(0,t.jsx)(s.em,{children:"message"})," : string , ",(0,t.jsx)(s.em,{children:"signature"})," : string , ",(0,t.jsx)(s.em,{children:"options"})," : object) : object"]}),"\xa0\xa0\xa0\xa0verifies the base64 signature against the utf8 representation of ",(0,t.jsx)(s.em,{children:"message"})]})})]})]}),"\n",(0,t.jsx)(s.h2,{id:"4dcryptokeynew",children:"4D.CryptoKey.new()"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"4D.CryptoKey.new"}),"( ",(0,t.jsx)(s.em,{children:"settings"})," : object ) : 4D.CryptoKey"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"settings"}),(0,t.jsx)(s.td,{children:"object"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsx)(s.td,{children:"Settings to generate or load a key pair"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"result"}),(0,t.jsx)(s.td,{children:"4D.CryptoKey"}),(0,t.jsx)(s.td,{children:"\u2190"}),(0,t.jsx)(s.td,{children:"object encapsulating an encryption key pair"})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"4D.CryptoKey.new()"})," function creates a new ",(0,t.jsx)(s.code,{children:"4D.CryptoKey"})," object encapsulating an encryption key pair, based upon the ",(0,t.jsx)(s.em,{children:"settings"})," object parameter. It allows to generate a new RSA or ECDSA key, or to load an existing key pair from a PEM definition."]}),"\n",(0,t.jsx)(s.h4,{id:"settings",children:(0,t.jsx)(s.em,{children:"settings"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"#type",children:"type"})}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsxs)(s.td,{children:["Defines the type of the key to create: ",(0,t.jsxs)("li",{children:['"RSA": generates a RSA key pair, using ',(0,t.jsx)(s.a,{href:"#size",children:".size"})," as size."]}),(0,t.jsxs)("li",{children:['"ECDSA": generates an Elliptic Curve Digital Signature Algorithm key pair, using ',(0,t.jsx)(s.a,{href:"#curve",children:".curve"})," as curve. Note that ECDSA keys cannot be used for encryption but only for signature."]}),(0,t.jsxs)("li",{children:['"PEM": loads a key pair definition in PEM format, using ',(0,t.jsx)(s.a,{href:"#pem",children:".pem"}),"."]})]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"#curve",children:"curve"})}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"Name of ECDSA curve"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"#pem",children:"pem"})}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"PEM definition of an encryption key to load"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.a,{href:"#size",children:"size"})}),(0,t.jsx)(s.td,{children:"integer"}),(0,t.jsx)(s.td,{children:"Size of RSA key in bits"})]})]})]}),"\n",(0,t.jsx)(s.h4,{id:"cryptokey",children:(0,t.jsx)(s.em,{children:"CryptoKey"})}),"\n",(0,t.jsxs)(s.p,{children:["The returned ",(0,t.jsx)(s.code,{children:"CryptoKey"})," object encapsulates an encryption key pair. It is a shared object and can therefore be used by multiple processes simultaneously."]}),"\n",(0,t.jsx)(s.h2,{id:"curve",children:".curve"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:".curve"})," : string"]}),"\n",(0,t.jsx)(s.p,{children:'Defined only for ECDSA keys: the normalised curve name of the key. Usually "prime256v1" for ES256 (default), "secp384r1" for ES384, "secp521r1" for ES512.'}),"\n",(0,t.jsx)(s.h2,{id:"decrypt",children:".decrypt()"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:".decrypt"}),"( ",(0,t.jsx)(s.em,{children:"message"})," : string , ",(0,t.jsx)(s.em,{children:"options"})," : object ) : object"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"message"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsxs)(s.td,{children:["Message string to be decoded using ",(0,t.jsx)(s.code,{children:"options.encodingEncrypted"})," and decrypted."]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"options"}),(0,t.jsx)(s.td,{children:"object"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsx)(s.td,{children:"Decoding options"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Result"}),(0,t.jsx)(s.td,{children:"object"}),(0,t.jsx)(s.td,{children:"\u2190"}),(0,t.jsx)(s.td,{children:"Status"})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:".decrypt()"})," function decrypts the ",(0,t.jsx)(s.em,{children:"message"})," parameter using the ",(0,t.jsx)(s.strong,{children:"private"})," key. The algorithm used depends on the type of the key."]}),"\n",(0,t.jsxs)(s.p,{children:["The key must be a RSA key, the algorithm is RSA-OAEP (see ",(0,t.jsx)(s.a,{href:"https://tools.ietf.org/html/rfc3447",children:"RFC 3447"}),")."]}),"\n",(0,t.jsx)(s.h4,{id:"options",children:(0,t.jsx)(s.em,{children:"options"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"hash"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:'Digest algorithm to use. For example: "SHA256", "SHA384", or "SHA512".'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"encodingEncrypted"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsxs)(s.td,{children:["Encoding used to convert the ",(0,t.jsx)(s.code,{children:"message"}),' parameter into the binary representation to decrypt. Can be "Base64" or "Base64URL". Default is "Base64".']})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"encodingDecrypted"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:'Encoding used to convert the binary decrypted message into the result string. Can be "UTF-8", "Base64", or "Base64URL". Default is "UTF-8".'})]})]})]}),"\n",(0,t.jsx)(s.h4,{id:"result",children:(0,t.jsx)(s.em,{children:"Result"})}),"\n",(0,t.jsxs)(s.p,{children:["The function returns a status object with ",(0,t.jsx)(s.code,{children:"success"})," property set to ",(0,t.jsx)(s.code,{children:"true"})," if the ",(0,t.jsx)(s.em,{children:"message"})," could be successfully decrypted."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"success"}),(0,t.jsx)(s.td,{children:"boolean"}),(0,t.jsx)(s.td,{children:"True if the message has been successfully decrypted"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"result"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsxs)(s.td,{children:["Message decrypted and decoded using the ",(0,t.jsx)(s.code,{children:"options.encodingDecrypted"})]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"errors"}),(0,t.jsx)(s.td,{children:"collection"}),(0,t.jsxs)(s.td,{children:["If ",(0,t.jsx)(s.code,{children:"success"})," is ",(0,t.jsx)(s.code,{children:"false"}),", may contain a collection of errors"]})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["In case the ",(0,t.jsx)(s.em,{children:"message"})," couldn't be decrypted because it was not encrypted with the same key or algorithm, the ",(0,t.jsx)(s.code,{children:"status"})," object being returned contains an error collection in ",(0,t.jsx)(s.code,{children:"status.errors"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"encrypt",children:".encrypt()"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:".encrypt"}),"( ",(0,t.jsx)(s.em,{children:"message"})," : string , ",(0,t.jsx)(s.em,{children:"options"})," : object ) : string"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"message"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsxs)(s.td,{children:["Message string to be encoded using ",(0,t.jsx)(s.code,{children:"options.encodingDecrypted"})," and encrypted."]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"options"}),(0,t.jsx)(s.td,{children:"object"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsx)(s.td,{children:"Encoding options"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Result"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"\u2190"}),(0,t.jsxs)(s.td,{children:["Message encrypted and encoded using the ",(0,t.jsx)(s.code,{children:"options.encodingEncrypted"})]})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:".encrypt()"})," function encrypts the ",(0,t.jsx)(s.em,{children:"message"})," parameter using the ",(0,t.jsx)(s.strong,{children:"public"})," key. The algorithm used depends on the type of the key."]}),"\n",(0,t.jsxs)(s.p,{children:["The key must be a RSA key, the algorithm is RSA-OAEP (see ",(0,t.jsx)(s.a,{href:"https://tools.ietf.org/html/rfc3447",children:"RFC 3447"}),")."]}),"\n",(0,t.jsx)(s.h5,{id:"options-1",children:(0,t.jsx)(s.em,{children:"options"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"hash"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:'Digest algorithm to use. For example: "SHA256", "SHA384", or "SHA512".'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"encodingEncrypted"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:'Encoding used to convert the binary encrypted message into the result string. Can be "Base64", or "Base64URL". Default is "Base64".'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"encodingDecrypted"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsxs)(s.td,{children:["Encoding used to convert the ",(0,t.jsx)(s.code,{children:"message"}),' parameter into the binary representation to encrypt. Can be "UTF-8", "Base64", or "Base64URL". Default is "UTF-8".']})]})]})]}),"\n",(0,t.jsx)(s.h4,{id:"result-1",children:(0,t.jsx)(s.em,{children:"Result"})}),"\n",(0,t.jsx)(s.p,{children:"The returned value is an encrypted message."}),"\n",(0,t.jsx)(s.h2,{id:"getprivatekey",children:".getPrivateKey()"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:".getPrivateKey"}),"() : string"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsx)(s.tbody,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Result"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"\u2190"}),(0,t.jsx)(s.td,{children:"Private key in PEM format"})]})})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:".getPrivateKey()"})," function  returns the private key of the ",(0,t.jsx)(s.code,{children:"CryptoKey"})," object in PEM format, or an empty string if none is available."]}),"\n",(0,t.jsx)(s.h4,{id:"result-2",children:(0,t.jsx)(s.em,{children:"Result"})}),"\n",(0,t.jsx)(s.p,{children:"The returned value is the private key."}),"\n",(0,t.jsx)(s.h2,{id:"getpublickey",children:".getPublicKey()"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:".getPublicKey"}),"() : string"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsx)(s.tbody,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Result"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"\u2190"}),(0,t.jsx)(s.td,{children:"Public key in PEM format"})]})})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:".getPublicKey()"})," function returns the public key of the ",(0,t.jsx)(s.code,{children:"CryptoKey"})," object in PEM format, or an empty string if none is available."]}),"\n",(0,t.jsx)(s.h4,{id:"result-3",children:(0,t.jsx)(s.em,{children:"Result"})}),"\n",(0,t.jsx)(s.p,{children:"The returned value is the public key."}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"pem",children:".pem"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:".pem"})," : string"]}),"\n",(0,t.jsx)(s.p,{children:"PEM definition of an encryption key to load. If the key is a private key, the RSA or ECDSA public key will be deduced from it."}),"\n",(0,t.jsx)(s.h2,{id:"sign",children:".sign()"}),"\n",(0,t.jsxs)(s.p,{children:[".",(0,t.jsx)(s.strong,{children:"sign"})," (",(0,t.jsx)(s.em,{children:"message"})," : string , ",(0,t.jsx)(s.em,{children:"options"})," : object) : string"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"message"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsx)(s.td,{children:"Message string to sign"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"options"}),(0,t.jsx)(s.td,{children:"object"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsx)(s.td,{children:"Signing options"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Result"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"\u2190"}),(0,t.jsx)(s.td,{children:'Signature in Base64 or Base64URL representation, depending on "encoding" option'})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:".sign()"})," function signs the utf8 representation of a ",(0,t.jsx)(s.em,{children:"message"})," string using the ",(0,t.jsx)(s.code,{children:"CryptoKey"})," object keys and provided ",(0,t.jsx)(s.em,{children:"options"}),". It returns its signature in base64 or base64URL format, depending on the value of the ",(0,t.jsx)(s.code,{children:"options.encoding"})," attribute you passed."]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CryptoKey"})," must contain a valid ",(0,t.jsx)(s.strong,{children:"private"})," key."]}),"\n",(0,t.jsx)(s.h4,{id:"options-2",children:(0,t.jsx)(s.em,{children:"options"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"hash"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:'Digest algorithm to use. For example: "SHA256", "SHA384", or "SHA512". When used to produce a JWT, the hash size must match the PS@, ES@, RS@, or PS@ algorithm size'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"encodingEncrypted"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:'Encoding used to convert the binary encrypted message into the result string. Can be "Base64", or "Base64URL". Default is "Base64".'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"pss"}),(0,t.jsx)(s.td,{children:"boolean"}),(0,t.jsxs)(s.td,{children:["Use Probabilistic Signature Scheme (PSS). Ignored if the key is not an RSA key. Pass ",(0,t.jsx)(s.code,{children:"true"})," when producing a JWT for PS@ algorithm"]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"encoding"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:'Representation to be used for result signature. Possible values: "Base64" or "Base64URL". Default is "Base64".'})]})]})]}),"\n",(0,t.jsx)(s.h4,{id:"result-4",children:(0,t.jsx)(s.em,{children:"Result"})}),"\n",(0,t.jsxs)(s.p,{children:["The utf8 representation of the ",(0,t.jsx)(s.em,{children:"message"})," string."]}),"\n",(0,t.jsx)(s.h2,{id:"size",children:".size"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:".size"})," : integer"]}),"\n",(0,t.jsx)(s.p,{children:"Defined only for RSA keys: the size of the key in bits. Typically 2048 (default)."}),"\n",(0,t.jsx)(s.h2,{id:"type",children:".type"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:".type"})," : string"]}),"\n",(0,t.jsx)(s.p,{children:'Contains the name of the key type - "RSA", "ECDSA", "PEM" .'}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:['"RSA": an RSA key pair, using ',(0,t.jsx)(s.code,{children:"settings.size"})," as ",(0,t.jsx)(s.a,{href:"#size",children:".size"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:['"ECDSA": an Elliptic Curve Digital Signature Algorithm key pair, using ',(0,t.jsx)(s.code,{children:"settings.curve"})," as ",(0,t.jsx)(s.a,{href:"#curve",children:".curve"}),". Note that ECDSA keys cannot be used for encryption but only for signature."]}),"\n",(0,t.jsxs)(s.li,{children:['"PEM": a key pair definition in PEM format, using ',(0,t.jsx)(s.code,{children:"settings.pem"})," as ",(0,t.jsx)(s.a,{href:"#pem",children:".pem"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"verify",children:".verify()"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:".verify"}),"( ",(0,t.jsx)(s.em,{children:"message"})," : string , ",(0,t.jsx)(s.em,{children:"signature"})," : string , ",(0,t.jsx)(s.em,{children:"options"})," : object) : object"]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Parameter"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"message"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsx)(s.td,{children:"Message string that was used to produce the signature"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"signature"}),(0,t.jsx)(s.td,{children:"string"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsxs)(s.td,{children:["Signature to verify, in Base64 or Base64URL representation, depending on ",(0,t.jsx)(s.code,{children:"options.encoding"})," value"]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"options"}),(0,t.jsx)(s.td,{children:"object"}),(0,t.jsx)(s.td,{children:"\u2192"}),(0,t.jsx)(s.td,{children:"Signing options"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Result"}),(0,t.jsx)(s.td,{children:"object"}),(0,t.jsx)(s.td,{children:"\u2190"}),(0,t.jsx)(s.td,{children:"Status of the verification"})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:".verify()"})," function verifies the base64 signature against the utf8 representation of ",(0,t.jsx)(s.em,{children:"message"})," using the ",(0,t.jsx)(s.code,{children:"CryptoKey"})," object keys and provided ",(0,t.jsx)(s.em,{children:"options"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"CryptoKey"})," must contain a valid ",(0,t.jsx)(s.strong,{children:"public"})," key."]}),"\n",(0,t.jsx)(s.h4,{id:"options-3",children:(0,t.jsx)(s.em,{children:"options"})}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"hash"}),(0,t.jsx)(s.td,{children:"text"}),(0,t.jsx)(s.td,{children:'Digest algorithm to use. For example: "SHA256", "SHA384", or "SHA512". When used to produce a JWT, the hash size must match the PS@, ES@, RS@, or PS@ algorithm size'})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"pss"}),(0,t.jsx)(s.td,{children:"boolean"}),(0,t.jsxs)(s.td,{children:["Use Probabilistic Signature Scheme (PSS). Ignored if the key is not an RSA key. Pass ",(0,t.jsx)(s.code,{children:"true"})," when verifying a JWT for PS@ algorithm"]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"encoding"}),(0,t.jsx)(s.td,{children:"text"}),(0,t.jsx)(s.td,{children:'Representation of provided signature. Possible values are "Base64" or "Base64URL". Default is "Base64".'})]})]})]}),"\n",(0,t.jsx)(s.h4,{id:"result-5",children:(0,t.jsx)(s.em,{children:"Result"})}),"\n",(0,t.jsxs)(s.p,{children:["The function returns a status object with ",(0,t.jsx)(s.code,{children:"success"})," property set to ",(0,t.jsx)(s.code,{children:"true"})," if ",(0,t.jsx)(s.code,{children:"message"})," could be successfully verified (i.e. the signature matches)."]}),"\n",(0,t.jsxs)(s.p,{children:["In case the signature couldn't be verified because it was not signed with the same ",(0,t.jsx)(s.em,{children:"message"}),", key or algorithm, the ",(0,t.jsx)(s.code,{children:"status"})," object being returned contains an error collection in ",(0,t.jsx)(s.code,{children:"status.errors"}),"."]}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Property"}),(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Description"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"success"}),(0,t.jsx)(s.td,{children:"boolean"}),(0,t.jsx)(s.td,{children:"True if the signature matches the message"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"errors"}),(0,t.jsx)(s.td,{children:"collection"}),(0,t.jsxs)(s.td,{children:["If ",(0,t.jsx)(s.code,{children:"success"})," is ",(0,t.jsx)(s.code,{children:"false"}),", may contain a collection of errors"]})]})]})]})]})}function a(e={}){let{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},50065:function(e,s,n){n.d(s,{Z:function(){return c},a:function(){return d}});var r=n(67294);let t={},i=r.createContext(t);function d(e){let s=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);