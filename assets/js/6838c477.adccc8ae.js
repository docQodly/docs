"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([["43644"],{7918:function(e,t,n){n.r(t),n.d(t,{metadata:()=>i,contentTitle:()=>o,default:()=>h,assets:()=>d,toc:()=>c,frontMatter:()=>l});var i=JSON.parse('{"id":"api/$entityset","title":"$entityset","description":"Functionality","source":"@site/versioned_docs/version-1.0.0/api/$entityset.md","sourceDirName":"api","slug":"/api/$entityset","permalink":"/docs/1.0.0/api/$entityset","draft":false,"unlisted":false,"editUrl":"https://github.com/qodly/docs/issues/new?title=Comment%20on%20api%2F%24entityset.md%20(1.0.0)&body=Share%20any%20feedback%20about%20this%20page%20%E2%80%94%20report%20issues%2C%20suggest%20improvements%2C%20or%20tell%20us%20what%E2%80%99s%20helpful.%0A%0AIf%20it%E2%80%99s%20an%20issue%3A%0A-%20What%E2%80%99s%20the%20issue%3F%20(e.g.%2C%20typo%2C%20incorrect%20information%2C%20unclear%20explanation)%0A-%20Where%20is%20it%3F%20(e.g.%2C%20section%20name%2C%20specific%20paragraph%2C%20or%20line)%0A%0AThank%20you%20for%20helping%20us%20improve!%20%F0%9F%9A%80%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20","tags":[],"version":"1.0.0","frontMatter":{"id":"$entityset","title":"$entityset"},"sidebar":"Integrations","previous":{"title":"$distinct","permalink":"/docs/1.0.0/api/$distinct"},"next":{"title":"$expand","permalink":"/docs/1.0.0/api/$expand"}}'),s=n("85893"),r=n("50065");let l={id:"$entityset",title:"$entityset"},o=void 0,d={},c=[{value:"Functionality",id:"functionality",level:2},{value:"Definition",id:"definition",level:3},{value:"Syntaxes",id:"syntaxes",level:3},{value:"Combining with Other Parameters",id:"combining-with-other-parameters",level:2},{value:"Use Cases",id:"use-cases",level:2},{value:"Retrieving an Existing Entity Set",id:"retrieving-an-existing-entity-set",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Operations",id:"operations",level:4},{value:"Example",id:"example",level:4},{value:"Creating a New Entity Set from Existing Ones",id:"creating-a-new-entity-set-from-existing-ones",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Logical Operators",id:"logical-operators",level:4},{value:"Example",id:"example-1",level:4},{value:"Best Practices",id:"best-practices",level:2}];function a(e){let t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"functionality",children:"Functionality"}),"\n",(0,s.jsx)(t.h3,{id:"definition",children:"Definition"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"$entityset"})," endpoint enables you to manage and manipulate entity sets in your data collection. After creating an entity set using the ",(0,s.jsx)(t.code,{children:"$method=entityset"})," parameter, you can perform various operations on these entity sets to retrieve, compare, and combine them as needed."]}),"\n",(0,s.jsx)(t.h3,{id:"syntaxes",children:"Syntaxes"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Syntax"}),(0,s.jsx)(t.th,{children:"Example"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"#retrieving-an-existing-entity-set",children:(0,s.jsx)(t.strong,{children:"$entityset/{entitySetID}"})})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"/People/$entityset/0ANUMBER"})}),(0,s.jsx)(t.td,{children:"Retrieves an existing entity set"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.a,{href:"#creating-a-new-entity-set-from-existing-ones",children:(0,s.jsx)(t.strong,{children:"$entityset/{entitySetID}?$operator...&$otherCollection"})})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"/Employee/$entityset/0ANUMBER?$logicOperator=AND&$otherCollection=C0ANUMBER"})}),(0,s.jsx)(t.td,{children:"Creates a new entity set by comparing existing entity sets"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"combining-with-other-parameters",children:"Combining with Other Parameters"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"$entityset"})," parameter can be combined with other parameters to enhance functionality:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"$filter"}),": Define a filter to create an entity set based on specific criteria."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"$orderby"}),": Specify the order in which entities are sorted in the entity set."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"$top/$limit"})," and ",(0,s.jsx)(t.strong,{children:"$skip"}),": Limit the number of entities in the entity set and skip a certain number of entities."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"$expand"}),": Include related data within the entity set."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"$attributes"}),": Specify which attributes to include in the entity set."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"$timeout"}),": Define the duration for which the entity set will be saved in the server's cache."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"$savedfilter"}),": Save the filter criteria used when creating the entity set for future retrieval."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"$savedorderby"}),": Save the sort order used when creating the entity set for future retrieval."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsx)(t.h3,{id:"retrieving-an-existing-entity-set",children:"Retrieving an Existing Entity Set"}),"\n",(0,s.jsxs)(t.p,{children:["You can retrieve an existing entity set by its ID. This allows you to execute operations on a previously defined entity set. Entity sets have a time limit, either by default or as specified using the ",(0,s.jsx)(t.code,{children:"$timeout"})," parameter. You can also save filter and order by statements with ",(0,s.jsx)(t.code,{children:"$savedfilter"})," and ",(0,s.jsx)(t.code,{children:"$savedorderby"})," when creating an entity set."]}),"\n",(0,s.jsx)(t.h4,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"GET /rest/{{dataClass}}/$entityset/{{entitySetID}}\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"entitySetID"}),": The unique ID of the entity set."]}),"\n"]})}),"\n",(0,s.jsx)(t.h4,{id:"operations",children:"Operations"}),"\n",(0,s.jsx)(t.p,{children:"When you retrieve an existing entity set, you can apply any of the following operations to it:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"$expand"}),": Expand related entities."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"$filter"}),": Apply filter criteria."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"$orderby"}),": Order the results."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"$skip"}),": Skip a specified number of entities."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"$top"}),"/",(0,s.jsx)(t.code,{children:"$limit"}),": Limit the number of entities returned."]}),"\n"]}),"\n",(0,s.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.p,{children:"After creating an entity set, you retrieve it as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"GET /rest/Employee/$entityset/9718A30BF61343C796345F3BE5B01CE7\n"})}),"\n",(0,s.jsx)(t.h3,{id:"creating-a-new-entity-set-from-existing-ones",children:"Creating a New Entity Set from Existing Ones"}),"\n",(0,s.jsx)(t.p,{children:"You can create a new entity set by comparing two existing entity sets using logical operators. The logical operators define the relationship between the two sets, such as intersection, union, and difference."}),"\n",(0,s.jsx)(t.h4,{id:"syntax-1",children:"Syntax"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"GET /rest/{{dataClass}}/$entityset/{{entitySetID}}?$logicOperator={{operator}}&$otherCollection={{otherEntitySetID}}&$method=entityset\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"entitySetID"}),": The unique ID of the first entity set."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"$logicOperator"}),": The logical operator to apply (AND, OR, EXCEPT, INTERSECT)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"$otherCollection"}),": The unique ID of the second entity set."]}),"\n"]})}),"\n",(0,s.jsx)(t.h4,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Operator"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"AND"}),(0,s.jsx)(t.td,{children:"Returns the entities common to both entity sets"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OR"}),(0,s.jsx)(t.td,{children:"Returns the entities in either entity set"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"EXCEPT"}),(0,s.jsx)(t.td,{children:"Returns the entities in the first entity set minus those in the second"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"INTERSECT"}),(0,s.jsx)(t.td,{children:"Returns true if there is an intersection, otherwise false"})]})]})]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:'Logical operators are not case-sensitive (e.g., "AND" or "and").'})}),"\n",(0,s.jsx)(t.h4,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Using AND to Return Common Entities"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"GET /rest/Employee/$entityset/9718A30BF61343C796345F3BE5B01CE7?$logicOperator=AND&$otherCollection=C05A0D887C664D4DA1B38366DD21629B\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Using INTERSECT to Check for Intersection"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"GET /rest/Employee/$entityset/9718A30BF61343C796345F3BE5B01CE7?$logicOperator=INTERSECT&$otherCollection=C05A0D887C664D4DA1B38366DD21629B\n"})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["If there is an intersection, this query returns ",(0,s.jsx)(t.code,{children:"true"}),". Otherwise, it returns ",(0,s.jsx)(t.code,{children:"false"}),"."]})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Using OR to Combine Entity Sets"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"GET /rest/Employee/$entityset/9718A30BF61343C796345F3BE5B01CE7?$logicOperator=OR&$otherCollection=C05A0D887C664D4DA1B38366DD21629B&$method=entityset\n"})}),"\n",(0,s.jsx)(t.p,{children:"This query creates a new entity set that combines all the entities from both entity sets."}),"\n",(0,s.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Manage Time Limits:"})," Be aware of the time limits on entity sets and use ",(0,s.jsx)(t.code,{children:"$timeout"})," to specify your limits if needed."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Save Filters and Orderings:"})," Use ",(0,s.jsx)(t.code,{children:"$savedfilter"})," and ",(0,s.jsx)(t.code,{children:"$savedorderby"})," to save filter and order by statements for future use."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Efficient Comparisons:"})," Use logical operators to efficiently compare and combine entity sets."]}),"\n"]}),"\n"]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},50065:function(e,t,n){n.d(t,{Z:function(){return o},a:function(){return l}});var i=n(67294);let s={},r=i.createContext(s);function l(e){let t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);