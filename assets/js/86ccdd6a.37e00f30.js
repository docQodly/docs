"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[1074],{3905:(t,e,r)=>{r.d(e,{Zo:()=>m,kt:()=>k});var n=r(67294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function p(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var l=n.createContext({}),c=function(t){var e=n.useContext(l),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},m=function(t){var e=c(t.components);return n.createElement(l.Provider,{value:e},t.children)},s="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),s=c(r),d=a,k=s["".concat(l,".").concat(d)]||s[d]||u[d]||i;return r?n.createElement(k,o(o({ref:e},m),{},{components:r})):n.createElement(k,o({ref:e},m))}));function k(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,o=new Array(i);o[0]=d;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=t,p[s]="string"==typeof t?t:a,o[1]=p;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5278:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const i={id:"combinePictures",title:"combinePictures"},o=void 0,p={unversionedId:"language/commands/combinePictures",id:"language/commands/combinePictures",title:"combinePictures",description:"combinePictures ( resultingPict picture  , operator picture , horOffset integer )",source:"@site/docs/language/commands/combinePictures.md",sourceDirName:"language/commands",slug:"/language/commands/combinePictures",permalink:"/docs/language/commands/combinePictures",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/language/commands/combinePictures.md",tags:[],version:"current",frontMatter:{id:"combinePictures",title:"combinePictures"},sidebar:"Develop",previous:{title:"clearSemaphore",permalink:"/docs/language/commands/clearSemaphore"},next:{title:"compareStrings",permalink:"/docs/language/commands/compareStrings"}},l={},c=[{value:"Description",id:"description",level:4},{value:"See also",id:"see-also",level:4}],m={toc:c};function s(t){let{components:e,...r}=t;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"combinePictures")," ( ",(0,a.kt)("em",{parentName:"p"},"resultingPict")," : picture , ",(0,a.kt)("em",{parentName:"p"},"pict1")," : picture  , ",(0,a.kt)("em",{parentName:"p"},"operator")," : integer , ",(0,a.kt)("em",{parentName:"p"},"pict2")," : picture , ",(0,a.kt)("em",{parentName:"p"},"horOffset")," : integer , ",(0,a.kt)("em",{parentName:"p"},"vertOffset")," : integer )"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:"center"}),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"resultingPict"),(0,a.kt)("td",{parentName:"tr",align:null},"picture"),(0,a.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,a.kt)("td",{parentName:"tr",align:null},"Picture resulting from combination")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"pict1"),(0,a.kt)("td",{parentName:"tr",align:null},"picture"),(0,a.kt)("td",{parentName:"tr",align:"center"},"->"),(0,a.kt)("td",{parentName:"tr",align:null},"First picture to combine")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"operator"),(0,a.kt)("td",{parentName:"tr",align:null},"integer"),(0,a.kt)("td",{parentName:"tr",align:"center"},"->"),(0,a.kt)("td",{parentName:"tr",align:null},"Type of combination to be done")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"pict2"),(0,a.kt)("td",{parentName:"tr",align:null},"picture"),(0,a.kt)("td",{parentName:"tr",align:"center"},"->"),(0,a.kt)("td",{parentName:"tr",align:null},"Second picture to combinee")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"horOffset"),(0,a.kt)("td",{parentName:"tr",align:null},"integer"),(0,a.kt)("td",{parentName:"tr",align:"center"},"->"),(0,a.kt)("td",{parentName:"tr",align:null},"Horizontal offset for superimposition")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"vertOffset"),(0,a.kt)("td",{parentName:"tr",align:null},"integer"),(0,a.kt)("td",{parentName:"tr",align:"center"},"->"),(0,a.kt)("td",{parentName:"tr",align:null},"Vertical offset for superimposition")))),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"combinePictures")," command combines the ",(0,a.kt)("em",{parentName:"p"},"pict1")," and ",(0,a.kt)("em",{parentName:"p"},"pict2")," pictures in ",(0,a.kt)("em",{parentName:"p"},"operator")," mode in order to produce a third, ",(0,a.kt)("em",{parentName:"p"},"resultingPict"),".  The resulting picture is of the compound type and keeps all the characteristics of the source pictures."),(0,a.kt)("p",null,"In ",(0,a.kt)("em",{parentName:"p"},"operator"),", pass the type of combination to be applied. Three types of combinations are proposed, you can use the following constants:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Constant"),(0,a.kt)("th",{parentName:"tr",align:null},"Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"kHorizontalConcatenation"),(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"pict2")," is attached to ",(0,a.kt)("em",{parentName:"td"},"pict1"),", the top left corner of ",(0,a.kt)("em",{parentName:"td"},"pict2")," coincides with the top right corner of ",(0,a.kt)("em",{parentName:"td"},"pict1"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"kVerticalConcatenation"),(0,a.kt)("td",{parentName:"tr",align:null},"2"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"pict2")," is attached to ",(0,a.kt)("em",{parentName:"td"},"pict1"),", the top left corner of ",(0,a.kt)("em",{parentName:"td"},"pict2")," coincides with the lower left corner of ",(0,a.kt)("em",{parentName:"td"},"pict1"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"kSuperimposition"),(0,a.kt)("td",{parentName:"tr",align:null},"3"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"pict2")," is placed over ",(0,a.kt)("em",{parentName:"td"},"pict1"),", the top left corner of ",(0,a.kt)("em",{parentName:"td"},"pict2")," coincides with the top left corner of ",(0,a.kt)("em",{parentName:"td"},"pict1"),".")))),(0,a.kt)("p",null,"If the optional ",(0,a.kt)("em",{parentName:"p"},"horOffset")," and ",(0,a.kt)("em",{parentName:"p"},"vertOffset")," parameters are used, a translation is applied to ",(0,a.kt)("em",{parentName:"p"},"pict2")," before superimposition. The values passed in ",(0,a.kt)("em",{parentName:"p"},"horOffset")," and ",(0,a.kt)("em",{parentName:"p"},"vertOffset")," must correspond to pixels. Pass positive values for an offset to the right or towards the bottom and a negative value for an offset to the left or towards the top."),(0,a.kt)("h4",{id:"see-also"},"See also"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/language/commands/transformPicture"},(0,a.kt)("inlineCode",{parentName:"a"},"transformPicture")),", ",(0,a.kt)("a",{parentName:"p",href:"/docs/language/basics/lang-picture#picture-operators"},"picture operators"),"."))}s.isMDXComponent=!0}}]);