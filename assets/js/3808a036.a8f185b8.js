"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[207],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>y});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var b=n.createContext({}),s=function(e){var t=n.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(b.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,l=e.originalType,b=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=s(a),m=o,y=p["".concat(b,".").concat(m)]||p[m]||d[m]||l;return a?n.createElement(y,r(r({ref:t},c),{},{components:a})):n.createElement(y,r({ref:t},c))}));function y(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=a.length,r=new Array(l);r[0]=m;var i={};for(var b in t)hasOwnProperty.call(t,b)&&(i[b]=t[b]);i.originalType=e,i[p]="string"==typeof e?e:o,r[1]=i;for(var s=2;s<l;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},47886:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(87462),o=(a(67294),a(3905));const l={id:"lang-blob",title:"BLOB"},r=void 0,i={unversionedId:"language/basics/lang-blob",id:"language/basics/lang-blob",title:"BLOB",description:"A BLOB (Binary Large OBject) attribute, variable or expression is a contiguous series of bytes that can be treated as one whole object, or whose bytes can be addressed individually.",source:"@site/docs/language/basics/lang-blob.md",sourceDirName:"language/basics",slug:"/language/basics/lang-blob",permalink:"/docs/language/basics/lang-blob",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/language/basics/lang-blob.md",tags:[],version:"current",frontMatter:{id:"lang-blob",title:"BLOB"},sidebar:"Programming",previous:{title:"Data types",permalink:"/docs/language/basics/lang-data-types"},next:{title:"Boolean",permalink:"/docs/language/basics/lang-boolean"}},b={},s=[{value:"Blob Types",id:"blob-types",level:2},{value:"Checking if a variable holds a scalar blob or a <code>4D.Blob</code>",id:"checking-if-a-variable-holds-a-scalar-blob-or-a-4dblob",level:2},{value:"Passing blobs as parameters",id:"passing-blobs-as-parameters",level:2},{value:"Automatic conversion of blob type",id:"automatic-conversion-of-blob-type",level:2},{value:"Individually accessing bytes in a blob",id:"individually-accessing-bytes-in-a-blob",level:2},{value:"Accessing a scalar blob&#39;s bytes",id:"accessing-a-scalar-blobs-bytes",level:4},{value:"Accessing a <code>4D.Blob</code>&#39;s bytes",id:"accessing-a-4dblobs-bytes",level:4},{value:"Modifying a scalar blob",id:"modifying-a-scalar-blob",level:2}],c={toc:s};function p(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A BLOB (Binary Large OBject) attribute, variable or expression is a contiguous series of bytes that can be treated as one whole object, or whose bytes can be addressed individually."),(0,o.kt)("p",null,"A blob is loaded into memory in its entirety. A blob variable is held and exists in memory only. A blob attribute is loaded into memory from the disk, like the rest of the entity to which it belongs. Like other attribute types that can retain a large amount of data (such as the picture type), blob attributes are not duplicated in memory when you modify an entity. "),(0,o.kt)("h2",{id:"blob-types"},"Blob Types"),(0,o.kt)("p",null,"Using the QodlyScript language, there are two ways to handle a blob:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"as a scalar value"),": a blob can be stored in a blob variable or attribute and altered."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"as an object (",(0,o.kt)("inlineCode",{parentName:"strong"},"4D.Blob"),")"),": a ",(0,o.kt)("inlineCode",{parentName:"li"},"4D.Blob")," is a blob object. You can encapsulate a blob or part of it in a ",(0,o.kt)("inlineCode",{parentName:"li"},"4D.Blob")," without altering the original blob. This method is called ",(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Object_type_(object-oriented_programming)#Boxing"},"boxing"),". For more info on how to instantiate a ",(0,o.kt)("inlineCode",{parentName:"li"},"4D.Blob"),", see ",(0,o.kt)("a",{parentName:"li",href:"/docs/language/BlobClass"},"Blob class"),".")),(0,o.kt)("p",null,"Each blob type has its advantages. Use the following table to determine which one suits your needs:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:"center"},"Blob"),(0,o.kt)("th",{parentName:"tr",align:"center"},"4D.Blob"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Alterable"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes"),(0,o.kt)("td",{parentName:"tr",align:"center"},"No")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Shareable in objects and collections"),(0,o.kt)("td",{parentName:"tr",align:"center"},"No"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Passed by reference","*"),(0,o.kt)("td",{parentName:"tr",align:"center"},"No"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Performance when accessing bytes"),(0,o.kt)("td",{parentName:"tr",align:"center"},"+"),(0,o.kt)("td",{parentName:"tr",align:"center"},"-")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Maximum size"),(0,o.kt)("td",{parentName:"tr",align:"center"},"2GB"),(0,o.kt)("td",{parentName:"tr",align:"center"},"Memory")))),(0,o.kt)("p",null,"*","Unlike the QodlyScript commands designed to take a scalar blob as a parameter, passing a scalar blob to a method duplicates it in memory. When working with methods, using blob objects (",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob"),") is more efficient, as they are passed by reference."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"By default, the maximum size of scalar blobs is set to 2GB, but this size limit may be lower depending on the available space.")),(0,o.kt)("p",null,"You cannot use operators on blobs."),(0,o.kt)("h2",{id:"checking-if-a-variable-holds-a-scalar-blob-or-a-4dblob"},"Checking if a variable holds a scalar blob or a ",(0,o.kt)("inlineCode",{parentName:"h2"},"4D.Blob")),(0,o.kt)("p",null,"Use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/#valuetype"},(0,o.kt)("inlineCode",{parentName:"a"},"valueType"))," command to determine if a value is of type Blob or Object.\nTo check that an object is a blob object (",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob"),"), use ",(0,o.kt)("a",{parentName:"p",href:"/docs/language/object#instanceof"},(0,o.kt)("inlineCode",{parentName:"a"},"instanceOf")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qs"},"var myBlob: blob\nvar myBlobObject: 4D.Blob\nvar is4DBlob: boolean\nvar type: integer\nmyBlobObject=4D.Blob.new()\n\ntype=valueType(myblobObject) // 38 (object)\nis4DBlob=instanceOf(myblobObject,4D.Blob) //True\n")),(0,o.kt)("h2",{id:"passing-blobs-as-parameters"},"Passing blobs as parameters"),(0,o.kt)("p",null,"You can pass a scalar blob or a ",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob")," to any QodlyScript command that takes a blob as a parameter:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qs"},'var myBlob, myNewBlob: 4D.Blob\nvar myString: string\nconvertFromString("Hello, World!", "UTF-8", myBlob)\nmyString=convertToText(myBlob,"UTF-8")\n //myString contains "Hello, World!"\nmyNewBlob=myBlob.slice(0,5)\nmyString=convertToText(myNewBlob,"UTF-8")\n //myString contains "Hello"\n')),(0,o.kt)("p",null,"You can pass blobs and blob objects (",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob"),") to methods. Keep in mind that unlike blob objects, which are passed by reference, scalar blobs are duplicated in memory when passed to methods."),(0,o.kt)("h2",{id:"automatic-conversion-of-blob-type"},"Automatic conversion of blob type"),(0,o.kt)("p",null,"QodlyScript automatically converts scalar blobs to blob objects, and vice versa, when they're assigned to each other. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qs"},'// Create a variable of type Blob and an object variable\nvar myBlob: blob\nvar myObject : object\n\n// Assign that blob to a property of myObject named "blob"\nmyObject=newObject("blob",myBlob)\n\n// The blob stored in myBlob is automatically converted to a 4D.Blob\nvar type : boolean\ntype=instanceOf(myObject.blob,4D.Blob)  //true\n\n// Conversion from 4D.Blob to blob\nmyBlob=myObject.blob\ntype=valueType(myBlob) // blob\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"When converting a ",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob")," to a scalar blob, if the size of the ",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob")," exceeds the maximum size for scalar blobs, the resulting scalar blob is empty. For example, when the maximum size for scalar blobs is 2GB, if you convert a ",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob")," of 2.5GB to a scalar blob, you obtain an empty blob.")),(0,o.kt)("h2",{id:"individually-accessing-bytes-in-a-blob"},"Individually accessing bytes in a blob"),(0,o.kt)("h4",{id:"accessing-a-scalar-blobs-bytes"},"Accessing a scalar blob's bytes"),(0,o.kt)("p",null,"You can access individual bytes of a scalar blob using curly brackets ",(0,o.kt)("inlineCode",{parentName:"p"},"{}"),". Within a blob, bytes are numbered from 0 to N-1, where N is the size of the blob:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qs"},'  // Declare a variable of type Blob\nvar myBlob : blob\nvar byte : integer\nconvertFromText("Hello, World!", "UTF-8", myBlob)\nbyte=myBlob{1} //101 (character code for "e")\n\n')),(0,o.kt)("p",null,"Since you can address all the bytes of a blob individually, you can store whatever you want in a Blob variable or attribute."),(0,o.kt)("h4",{id:"accessing-a-4dblobs-bytes"},"Accessing a ",(0,o.kt)("inlineCode",{parentName:"h4"},"4D.Blob"),"'s bytes"),(0,o.kt)("p",null,"Use square brackets ",(0,o.kt)("inlineCode",{parentName:"p"},"[]")," to directly access a specific byte in a ",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qs"},'var myBlob : 4D.Blob\nvar byte : integer\nconvertFromText("Hello, World!", "UTF-8", myBlob)\nbyte=myBlob[1] //101 \n')),(0,o.kt)("p",null,"Since a ",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob")," cannot be altered, you can read the bytes of a ",(0,o.kt)("inlineCode",{parentName:"p"},"4D.Blob")," using this syntax, but not modify them."),(0,o.kt)("h2",{id:"modifying-a-scalar-blob"},"Modifying a scalar blob"),(0,o.kt)("p",null,"Unlike blob objects, scalar blobs can be altered. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-qs"},'var myBlob : blob\nvar myString : string\nconvertFromText("Hello, World!", "UTF-8", myBlob)\nmyBlob{1}=characterCode("A") //replace the 1st byte\nmyString=convertToText(myBlob,"UTF-8") //HAllo, World!\n')))}p.isMDXComponent=!0}}]);