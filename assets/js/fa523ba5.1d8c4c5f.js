"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([[6954],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,g=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},97094:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={id:"convertToString",title:"convertToString"},i=void 0,l={unversionedId:"language/commands/convertToString",id:"language/commands/convertToString",title:"convertToString",description:"convertToString ( aBlob string ) blob , charSetInt string",source:"@site/docs/language/commands/convertToString.md",sourceDirName:"language/commands",slug:"/language/commands/convertToString",permalink:"/docs/language/commands/convertToString",draft:!1,editUrl:"https://github.com/docQodly/docs/edit/main/docs/language/commands/convertToString.md",tags:[],version:"current",frontMatter:{id:"convertToString",title:"convertToString"},sidebar:"Develop",previous:{title:"convertPicture",permalink:"/docs/language/commands/convertPicture"},next:{title:"cos",permalink:"/docs/language/commands/cos"}},c={},p=[{value:"Description",id:"description",level:4},{value:"See also",id:"see-also",level:4}],s={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"convertToString")," ( ",(0,a.kt)("em",{parentName:"p"},"aBlob")," : blob , ",(0,a.kt)("em",{parentName:"p"},"charSetString")," : string ) : string",(0,a.kt)("br",null),(0,a.kt)("strong",{parentName:"p"},"convertToString")," ( ",(0,a.kt)("em",{parentName:"p"},"aBlob")," : blob , ",(0,a.kt)("em",{parentName:"p"},"charSetInt")," : integer ) : string"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:"center"}),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"aBlob"),(0,a.kt)("td",{parentName:"tr",align:null},"blob"),(0,a.kt)("td",{parentName:"tr",align:"center"},"->"),(0,a.kt)("td",{parentName:"tr",align:null},"blob containing text expressed in a specific character set")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"charSetString"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:"center"},"->"),(0,a.kt)("td",{parentName:"tr",align:null},"Name of blob character set")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"charSetInt"),(0,a.kt)("td",{parentName:"tr",align:null},"integer"),(0,a.kt)("td",{parentName:"tr",align:"center"},"->"),(0,a.kt)("td",{parentName:"tr",align:null},"Number of blob character set")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Result"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:"center"},"<-"),(0,a.kt)("td",{parentName:"tr",align:null},"Contents of blob expressed in Qodly character set")))),(0,a.kt)("h4",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"convertToString")," command converts the text contained in the ",(0,a.kt)("em",{parentName:"p"},"aBlob")," parameter and returns it in text expressed in the character set of Qodly. Qodly uses the UTF-16 character set by default."),(0,a.kt)("p",null,"In ",(0,a.kt)("em",{parentName:"p"},"charSetString")," or ",(0,a.kt)("em",{parentName:"p"},"charSetInt"),", pass the character set of the text contained in ",(0,a.kt)("em",{parentName:"p"},"aBlob"),", which will be used for the conversion. If the blob contains text copied from within Qodly, then the blob\u2019s text is likely to be in the UTF-16 character set. You can pass a string providing the standard name of the character set, or one of its aliases (for example, \u201cISO-8859-1\u201d or \u201cUTF-8\u201d), or its identifier (integer). For more information, please refer to the description of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/language/commands/convertFromString"},(0,a.kt)("inlineCode",{parentName:"a"},"convertFromString"))," command."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"convertToString")," supports Byte Order Marks (BOMs). If the character set specified is of the Unicode type (UTF-8, UTF-16 or UTF-32), Qodly attempts to identify a BOM among the first bytes received. If one is detected, it is filtered out of the result and Qodly uses the character set that it defines instead of the one specified."),(0,a.kt)("h4",{id:"see-also"},"See also"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/language/commands/convertFromString"},(0,a.kt)("inlineCode",{parentName:"a"},"convertFromString"))))}m.isMDXComponent=!0}}]);