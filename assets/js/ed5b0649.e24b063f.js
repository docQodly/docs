"use strict";(self.webpackChunkqodly=self.webpackChunkqodly||[]).push([["6885"],{82493:function(e,r,n){n.r(r),n.d(r,{metadata:()=>t,contentTitle:()=>d,default:()=>h,assets:()=>l,toc:()=>o,frontMatter:()=>s});var t=JSON.parse('{"id":"language/commands/characterCode","title":"characterCode","description":"characterCode ( character integer","source":"@site/versioned_docs/version-1.1.0/language/commands/characterCode.md","sourceDirName":"language/commands","slug":"/language/commands/characterCode","permalink":"/docs/language/commands/characterCode","draft":false,"unlisted":false,"editUrl":"https://github.com/qodly/docs/issues/new?title=Comment%20on%20language%2Fcommands%2FcharacterCode.md%20(1.1.0)&body=Share%20any%20feedback%20about%20this%20page%20%E2%80%94%20report%20issues%2C%20suggest%20improvements%2C%20or%20tell%20us%20what%E2%80%99s%20helpful.%0A%0AIf%20it%E2%80%99s%20an%20issue%3A%0A-%20What%E2%80%99s%20the%20issue%3F%20(e.g.%2C%20typo%2C%20incorrect%20information%2C%20unclear%20explanation)%0A-%20Where%20is%20it%3F%20(e.g.%2C%20section%20name%2C%20specific%20paragraph%2C%20or%20line)%0A%0AThank%20you%20for%20helping%20us%20improve!%20%F0%9F%9A%80%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20","tags":[],"version":"1.1.0","frontMatter":{"id":"characterCode","title":"characterCode"},"sidebar":"Develop","previous":{"title":"char","permalink":"/docs/language/commands/char"},"next":{"title":"clearSemaphore","permalink":"/docs/language/commands/clearSemaphore"}}'),a=n("85893"),c=n("50065");let s={id:"characterCode",title:"characterCode"},d=void 0,l={},o=[{value:"Description",id:"description",level:4},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"Example 3",id:"example-3",level:4},{value:"See also",id:"see-also",level:4}];function i(e){let r={a:"a",code:"code",em:"em",h4:"h4",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"characterCode"})," ( ",(0,a.jsx)(r.em,{children:"character"})," : string ) : integer"]}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Parameter"}),(0,a.jsx)(r.th,{children:"Type"}),(0,a.jsx)(r.th,{style:{textAlign:"center"}}),(0,a.jsx)(r.th,{children:"Description"})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:"character"}),(0,a.jsx)(r.td,{children:"string"}),(0,a.jsx)(r.td,{style:{textAlign:"center"},children:"\u2192"}),(0,a.jsx)(r.td,{children:"Character for which you want to get the code"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:"Result"}),(0,a.jsx)(r.td,{children:"integer"}),(0,a.jsx)(r.td,{style:{textAlign:"center"},children:"\u2190"}),(0,a.jsx)(r.td,{children:"Character code"})]})]})]}),"\n",(0,a.jsx)(r.h4,{id:"description",children:"Description"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"characterCode"})," command returns the Unicode UTF-16 code (included between 1 and 65535) of ",(0,a.jsx)(r.em,{children:"character"}),"."]}),"\n",(0,a.jsxs)(r.p,{children:["If there is more than one character in the string, ",(0,a.jsx)(r.code,{children:"characterCode"})," returns only the code of the first character."]}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.a,{href:"/docs/language/commands/char",children:(0,a.jsx)(r.code,{children:"char"})})," function is the counterpart of ",(0,a.jsx)(r.code,{children:"characterCode"}),". It returns the character that the UTF-16 code represents."]}),"\n",(0,a.jsx)(r.h4,{id:"example-1",children:"Example 1"}),"\n",(0,a.jsxs)(r.p,{children:["Uppercase and lowercase characters are considered equal within a comparison. You can use ",(0,a.jsx)(r.code,{children:"characterCode"})," to differentiate between uppercase and lowercase characters. Thus, this line returns true:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-qs",children:' ("A" == "a") //true\n\n'})}),"\n",(0,a.jsx)(r.p,{children:"On the other hand, this line returns False:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-qs",children:' (characterCode("A") == characterCode("a")) //false\n\n'})}),"\n",(0,a.jsx)(r.h4,{id:"example-2",children:"Example 2"}),"\n",(0,a.jsx)(r.p,{children:'This example returns the code of the first character of the string "ABC":'}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-qs",children:' var getCode : integer\n getCode = characterCode("ABC") //GetCode gets 65, the characterCode of A\n\n'})}),"\n",(0,a.jsx)(r.h4,{id:"example-3",children:"Example 3"}),"\n",(0,a.jsx)(r.p,{children:"The following example tests for carriage returns and tabs:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-qs",children:" var vlChar, vlCode  : integer\n var vtText : string\n for(vlChar,1,length(vtText))\n    vlCode = characterCode(vtText[[vlChar]])\n    switch\n       :(vlCode == Carriage return)\n  //do something\n       :(vlCode == Tab)\n  //do something else\n       :(...)\n  //...\n    end\n end\n\n"})}),"\n",(0,a.jsx)(r.h4,{id:"see-also",children:"See also"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.a,{href:"/docs/language/commands/char",children:(0,a.jsx)(r.code,{children:"char"})}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(r.a,{href:"/docs/language/basics/lang-text#character-reference-symbols",children:(0,a.jsx)(r.code,{children:"Character Reference Symbols"})})]})]})}function h(e={}){let{wrapper:r}={...(0,c.a)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},50065:function(e,r,n){n.d(r,{Z:function(){return d},a:function(){return s}});var t=n(67294);let a={},c=t.createContext(a);function s(e){let r=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(c.Provider,{value:r},e.children)}}}]);